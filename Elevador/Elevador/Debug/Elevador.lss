
Elevador.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000052  00800100  00000fe8  0000107c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000fe8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000084  00800152  00800152  000010ce  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000010ce  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001100  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002f0  00000000  00000000  00001140  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003682  00000000  00000000  00001430  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001447  00000000  00000000  00004ab2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000018d4  00000000  00000000  00005ef9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000548  00000000  00000000  000077d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000170f  00000000  00000000  00007d18  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000e7e  00000000  00000000  00009427  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000230  00000000  00000000  0000a2a5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 f7 03 	jmp	0x7ee	; 0x7ee <__vector_13>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 ee       	ldi	r30, 0xE8	; 232
  7c:	ff e0       	ldi	r31, 0x0F	; 15
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 35       	cpi	r26, 0x52	; 82
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e5       	ldi	r26, 0x52	; 82
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a6 3d       	cpi	r26, 0xD6	; 214
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 a3 00 	call	0x146	; 0x146 <main>
  9e:	0c 94 f2 07 	jmp	0xfe4	; 0xfe4 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <Appl__Initialize>:
//=====================================================================================================================


void Appl__Initialize(void)
{
	User_Action = EVENTS_NO_EVENT;
  a6:	8f ef       	ldi	r24, 0xFF	; 255
  a8:	80 93 54 01 	sts	0x0154, r24	; 0x800154 <User_Action>
	Timer_Counter = TIME_IN_50MS_BASE;
  ac:	84 e1       	ldi	r24, 0x14	; 20
  ae:	80 93 55 01 	sts	0x0155, r24	; 0x800155 <Timer_Counter>
	Toggle = OFF;
  b2:	10 92 57 01 	sts	0x0157, r1	; 0x800157 <Toggle>
	Sounds__PlaySounds(SOUND_POWER_ON);   //buzzer de power on
  b6:	80 e0       	ldi	r24, 0x00	; 0
  b8:	0e 94 c8 06 	call	0xd90	; 0xd90 <Sounds__PlaySounds>
	Trigger = FALSE;
  bc:	10 92 56 01 	sts	0x0156, r1	; 0x800156 <Trigger>
  c0:	08 95       	ret

000000c2 <Appl__Handler>:
}

void Appl__Handler(void)
{
	User_Action = Display__GetEvent();
  c2:	0e 94 66 06 	call	0xccc	; 0xccc <Display__GetEvent>
  c6:	80 93 54 01 	sts	0x0154, r24	; 0x800154 <User_Action>
	if (User_Action != EVENTS_NO_EVENT)
  ca:	8f 3f       	cpi	r24, 0xFF	; 255
  cc:	d9 f1       	breq	.+118    	; 0x144 <Appl__Handler+0x82>
	{
		switch(User_Action)
  ce:	81 30       	cpi	r24, 0x01	; 1
  d0:	89 f0       	breq	.+34     	; 0xf4 <Appl__Handler+0x32>
  d2:	18 f0       	brcs	.+6      	; 0xda <Appl__Handler+0x18>
  d4:	82 30       	cpi	r24, 0x02	; 2
  d6:	d9 f0       	breq	.+54     	; 0x10e <Appl__Handler+0x4c>
  d8:	08 95       	ret
		{
			case KEY_GROUND_FLOOR:
				Hal__SetBuzzerFreq(4000);
  da:	80 ea       	ldi	r24, 0xA0	; 160
  dc:	9f e0       	ldi	r25, 0x0F	; 15
  de:	0e 94 a9 04 	call	0x952	; 0x952 <Hal__SetBuzzerFreq>
				Sounds__PlaySounds(SOUND_KEY_PRESS);
  e2:	81 e0       	ldi	r24, 0x01	; 1
  e4:	0e 94 c8 06 	call	0xd90	; 0xd90 <Sounds__PlaySounds>
				Floor_position = GROUND_STATE;
  e8:	10 92 53 01 	sts	0x0153, r1	; 0x800153 <Floor_position>
				OvenPosition__SetSolicitation(GROUND);
  ec:	80 e0       	ldi	r24, 0x00	; 0
  ee:	0e 94 04 01 	call	0x208	; 0x208 <OvenPosition__SetSolicitation>
			break;
  f2:	08 95       	ret
		
			case KEY_FIRST_FLOOR:
				Hal__SetBuzzerFreq(4000);
  f4:	80 ea       	ldi	r24, 0xA0	; 160
  f6:	9f e0       	ldi	r25, 0x0F	; 15
  f8:	0e 94 a9 04 	call	0x952	; 0x952 <Hal__SetBuzzerFreq>
				Sounds__PlaySounds(SOUND_KEY_PRESS);
  fc:	81 e0       	ldi	r24, 0x01	; 1
  fe:	0e 94 c8 06 	call	0xd90	; 0xd90 <Sounds__PlaySounds>
				Floor_position = FIRST_STATE;
 102:	81 e0       	ldi	r24, 0x01	; 1
 104:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <Floor_position>
				OvenPosition__SetSolicitation(FIRST);
 108:	0e 94 04 01 	call	0x208	; 0x208 <OvenPosition__SetSolicitation>
			break;
 10c:	08 95       	ret
			
			case KEY_NEXT_FLOOR:
				Hal__SetBuzzerFreq(4000);
 10e:	80 ea       	ldi	r24, 0xA0	; 160
 110:	9f e0       	ldi	r25, 0x0F	; 15
 112:	0e 94 a9 04 	call	0x952	; 0x952 <Hal__SetBuzzerFreq>
				Sounds__PlaySounds(SOUND_KEY_PRESS);
 116:	81 e0       	ldi	r24, 0x01	; 1
 118:	0e 94 c8 06 	call	0xd90	; 0xd90 <Sounds__PlaySounds>
				if (Floor_position == GROUND_STATE)
 11c:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <Floor_position>
 120:	81 11       	cpse	r24, r1
 122:	06 c0       	rjmp	.+12     	; 0x130 <Appl__Handler+0x6e>
				{
					Display__SetState(DOOR_CLOSE);
 124:	84 e0       	ldi	r24, 0x04	; 4
 126:	0e 94 f7 05 	call	0xbee	; 0xbee <Display__SetState>
					OvenPosition__SetSolicitation(FIRST);
 12a:	81 e0       	ldi	r24, 0x01	; 1
 12c:	0e 94 04 01 	call	0x208	; 0x208 <OvenPosition__SetSolicitation>
				}
				if (Floor_position == FIRST_STATE)
 130:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <Floor_position>
 134:	81 30       	cpi	r24, 0x01	; 1
 136:	31 f4       	brne	.+12     	; 0x144 <Appl__Handler+0x82>
				{
					Display__SetState(DOOR_CLOSE);
 138:	84 e0       	ldi	r24, 0x04	; 4
 13a:	0e 94 f7 05 	call	0xbee	; 0xbee <Display__SetState>
					OvenPosition__SetSolicitation(GROUND);
 13e:	80 e0       	ldi	r24, 0x00	; 0
 140:	0e 94 04 01 	call	0x208	; 0x208 <OvenPosition__SetSolicitation>
 144:	08 95       	ret

00000146 <main>:
//-------------------------------------- Public Functions -------------------------------------------------------------
//=====================================================================================================================

void main(void)
{
	Slot = SLOT_1;
 146:	10 92 58 01 	sts	0x0158, r1	; 0x800158 <Slot>
	
	TCCR1A = 0;                        //confira timer para operação normal pinos OC1A e OC1B desconectados
 14a:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
	TCCR1B = 0;                        //limpa registrador
 14e:	e1 e8       	ldi	r30, 0x81	; 129
 150:	f0 e0       	ldi	r31, 0x00	; 0
 152:	10 82       	st	Z, r1
	TCCR1B |= (1<<CS10)|(1 << CS12);   // configura prescaler para 1024: CS12 = 1 e CS10 = 1
 154:	80 81       	ld	r24, Z
 156:	85 60       	ori	r24, 0x05	; 5
 158:	80 83       	st	Z, r24
	
	TCNT1 = 62500;      //para contar a cada 250ms
 15a:	84 e2       	ldi	r24, 0x24	; 36
 15c:	94 ef       	ldi	r25, 0xF4	; 244
 15e:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
 162:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
	//TCNT1 = 0xC2F7;                    //inicia timer com valor para que estouro ocorra em 1 segundo
	//TCNT1 = 34186;                   // Para contar 2s=> 65536 - 31330
	// 65536-(16MHz/1024/1Hz) =  65536 - 15.625 = 49911(0xC2F7)=> 15.625 é o período desejado.
	// Usa-se a diferença porque o contador é crescente e estoura de 0xffff a 0.
	TIMSK1 |= (1 << TOIE1);
 166:	ef e6       	ldi	r30, 0x6F	; 111
 168:	f0 e0       	ldi	r31, 0x00	; 0
 16a:	80 81       	ld	r24, Z
 16c:	81 60       	ori	r24, 0x01	; 1
 16e:	80 83       	st	Z, r24
	sei();
 170:	78 94       	sei
	
	
	// Functions Initialization
	INITIALIZE_TASKS();
 172:	0e 94 49 01 	call	0x292	; 0x292 <ADC__Initialize>
 176:	0e 94 2d 03 	call	0x65a	; 0x65a <Pwm__Initialize>
 17a:	0e 94 2f 04 	call	0x85e	; 0x85e <Hal__Initialize>
 17e:	0e 94 f4 05 	call	0xbe8	; 0xbe8 <Display__Initialize>
 182:	0e 94 8e 03 	call	0x71c	; 0x71c <Timer__Initialize>
 186:	0e 94 bd 06 	call	0xd7a	; 0xd7a <Sounds__Initialize>
 18a:	0e 94 a0 06 	call	0xd40	; 0xd40 <PositionSensor__Initialize>
 18e:	0e 94 01 01 	call	0x202	; 0x202 <OvenPositionControl__Initialize>
 192:	0e 94 53 00 	call	0xa6	; 0xa6 <Appl__Initialize>

			default:
			  Slot = SLOT_1;
			  break;
	       }
	Slot++;
 196:	c1 e0       	ldi	r28, 0x01	; 1
	INITIALIZE_TASKS();
		
	//Main Loop
	for(;;)
	{
		ALL_SLOTS_TASKS();
 198:	0e 94 a6 03 	call	0x74c	; 0x74c <Timer__HMSHandler>
 19c:	0e 94 47 05 	call	0xa8e	; 0xa8e <Hal__FastHandler>
		switch(Slot)
 1a0:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <Slot>
 1a4:	82 30       	cpi	r24, 0x02	; 2
 1a6:	99 f0       	breq	.+38     	; 0x1ce <main+0x88>
 1a8:	28 f4       	brcc	.+10     	; 0x1b4 <main+0x6e>
 1aa:	88 23       	and	r24, r24
 1ac:	41 f0       	breq	.+16     	; 0x1be <main+0x78>
 1ae:	81 30       	cpi	r24, 0x01	; 1
 1b0:	59 f0       	breq	.+22     	; 0x1c8 <main+0x82>
 1b2:	1a c0       	rjmp	.+52     	; 0x1e8 <main+0xa2>
 1b4:	83 30       	cpi	r24, 0x03	; 3
 1b6:	81 f0       	breq	.+32     	; 0x1d8 <main+0x92>
 1b8:	84 30       	cpi	r24, 0x04	; 4
 1ba:	89 f0       	breq	.+34     	; 0x1de <main+0x98>
 1bc:	15 c0       	rjmp	.+42     	; 0x1e8 <main+0xa2>
		   {
			case SLOT_1:
			   SLOT_1_TASKS();
 1be:	0e 94 a4 07 	call	0xf48	; 0xf48 <Sounds__Background>
 1c2:	0e 94 c0 05 	call	0xb80	; 0xb80 <Hal__BackgroundHandler>
			   break;
 1c6:	13 c0       	rjmp	.+38     	; 0x1ee <main+0xa8>

			case SLOT_2:
			   SLOT_2_TASKS();
 1c8:	0e 94 61 00 	call	0xc2	; 0xc2 <Appl__Handler>
			   break;
 1cc:	10 c0       	rjmp	.+32     	; 0x1ee <main+0xa8>

			case SLOT_3:
			  SLOT_3_TASKS();
 1ce:	0e 94 72 01 	call	0x2e4	; 0x2e4 <ADC__Handler>
 1d2:	0e 94 a7 06 	call	0xd4e	; 0xd4e <PositionSensor__ConversionHandler>
			  break;
 1d6:	0b c0       	rjmp	.+22     	; 0x1ee <main+0xa8>

			case SLOT_4:
			  SLOT_4_TASKS();
 1d8:	0e 94 29 01 	call	0x252	; 0x252 <OvenPositionControl__Handler>
			  break;
 1dc:	08 c0       	rjmp	.+16     	; 0x1ee <main+0xa8>

			case SLOT_5:
			  SLOT_5_TASKS();
 1de:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <UpdateDisplaySevenSeg>
 1e2:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <UpdateDisplayLeds>
			  break;
 1e6:	03 c0       	rjmp	.+6      	; 0x1ee <main+0xa8>

			default:
			  Slot = SLOT_1;
			  break;
	       }
	Slot++;
 1e8:	c0 93 58 01 	sts	0x0158, r28	; 0x800158 <Slot>
 1ec:	d5 cf       	rjmp	.-86     	; 0x198 <main+0x52>
 1ee:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <Slot>
 1f2:	8f 5f       	subi	r24, 0xFF	; 255
 1f4:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <Slot>
	if(Slot >= NUM_OF_MAIN_SLOTS)
 1f8:	85 30       	cpi	r24, 0x05	; 5
 1fa:	70 f2       	brcs	.-100    	; 0x198 <main+0x52>
		Slot = SLOT_1;
 1fc:	10 92 58 01 	sts	0x0158, r1	; 0x800158 <Slot>
 200:	cb cf       	rjmp	.-106    	; 0x198 <main+0x52>

00000202 <OvenPositionControl__Initialize>:


//---------------------------------------------------------------------------------------------------------------------
void OvenPositionControl__Initialize(void)
{
	Oven_PositionControl_State = OVEN_OFF;
 202:	10 92 5a 01 	sts	0x015A, r1	; 0x80015a <Oven_PositionControl_State>
 206:	08 95       	ret

00000208 <OvenPosition__SetSolicitation>:
}

void OvenPosition__SetSolicitation(OVEN_POSITION_CONTROL_SOLICITATION_TYPE state)
{
	Oven_PositionControl_Solicitation = state;
 208:	80 93 5b 01 	sts	0x015B, r24	; 0x80015b <Oven_PositionControl_Solicitation>
	
	current_position = PositionSensor__GetMeters(POSITION_SENSOR_1);
 20c:	80 e0       	ldi	r24, 0x00	; 0
 20e:	0e 94 af 06 	call	0xd5e	; 0xd5e <PositionSensor__GetMeters>
 212:	90 93 5d 01 	sts	0x015D, r25	; 0x80015d <current_position+0x1>
 216:	80 93 5c 01 	sts	0x015C, r24	; 0x80015c <current_position>
	if(Oven_PositionControl_Solicitation == GROUND)
 21a:	20 91 5b 01 	lds	r18, 0x015B	; 0x80015b <Oven_PositionControl_Solicitation>
 21e:	21 11       	cpse	r18, r1
 220:	0b c0       	rjmp	.+22     	; 0x238 <OvenPosition__SetSolicitation+0x30>
	{
		if(POSITION_GROUND_MAX >= current_position)
 222:	85 3f       	cpi	r24, 0xF5	; 245
 224:	91 40       	sbci	r25, 0x01	; 1
 226:	20 f4       	brcc	.+8      	; 0x230 <OvenPosition__SetSolicitation+0x28>
		{
			Oven_PositionControl_State = OVEN_INSIDE;
 228:	81 e0       	ldi	r24, 0x01	; 1
 22a:	80 93 5a 01 	sts	0x015A, r24	; 0x80015a <Oven_PositionControl_State>
 22e:	08 95       	ret
		}
		else
		{
			Oven_PositionControl_State = OVEN_OUTSIDE_UP;
 230:	83 e0       	ldi	r24, 0x03	; 3
 232:	80 93 5a 01 	sts	0x015A, r24	; 0x80015a <Oven_PositionControl_State>
 236:	08 95       	ret
		}
	}
	if(Oven_PositionControl_Solicitation == FIRST)
 238:	21 30       	cpi	r18, 0x01	; 1
 23a:	51 f4       	brne	.+20     	; 0x250 <OvenPosition__SetSolicitation+0x48>
	{	
		if(current_position >= POSITION_FIRST_MIN)
 23c:	85 3f       	cpi	r24, 0xF5	; 245
 23e:	91 40       	sbci	r25, 0x01	; 1
 240:	20 f0       	brcs	.+8      	; 0x24a <OvenPosition__SetSolicitation+0x42>
		{
			Oven_PositionControl_State = OVEN_INSIDE;
 242:	81 e0       	ldi	r24, 0x01	; 1
 244:	80 93 5a 01 	sts	0x015A, r24	; 0x80015a <Oven_PositionControl_State>
 248:	08 95       	ret
		}
		else
		{
			Oven_PositionControl_State = OVEN_OUTSIDE_DOWN;
 24a:	82 e0       	ldi	r24, 0x02	; 2
 24c:	80 93 5a 01 	sts	0x015A, r24	; 0x80015a <Oven_PositionControl_State>
 250:	08 95       	ret

00000252 <OvenPositionControl__Handler>:
	}
}

void OvenPositionControl__Handler(void)
{
	OvenPosition__SetSolicitation(Oven_PositionControl_Solicitation);
 252:	80 91 5b 01 	lds	r24, 0x015B	; 0x80015b <Oven_PositionControl_Solicitation>
 256:	0e 94 04 01 	call	0x208	; 0x208 <OvenPosition__SetSolicitation>
	switch(Oven_PositionControl_State)
 25a:	80 91 5a 01 	lds	r24, 0x015A	; 0x80015a <Oven_PositionControl_State>
 25e:	82 30       	cpi	r24, 0x02	; 2
 260:	81 f0       	breq	.+32     	; 0x282 <OvenPositionControl__Handler+0x30>
 262:	83 30       	cpi	r24, 0x03	; 3
 264:	91 f0       	breq	.+36     	; 0x28a <OvenPositionControl__Handler+0x38>
 266:	81 30       	cpi	r24, 0x01	; 1
 268:	99 f4       	brne	.+38     	; 0x290 <OvenPositionControl__Handler+0x3e>
	{
		case OVEN_INSIDE:
			Display__SetState(DOOR_OPEN);
 26a:	83 e0       	ldi	r24, 0x03	; 3
 26c:	0e 94 f7 05 	call	0xbee	; 0xbee <Display__SetState>
			if (Door_state = SECOND_OPEN)
 270:	81 e0       	ldi	r24, 0x01	; 1
 272:	80 93 59 01 	sts	0x0159, r24	; 0x800159 <Door_state>
			{
				Display__SetState(DOOR_CLOSE);
 276:	84 e0       	ldi	r24, 0x04	; 4
 278:	0e 94 f7 05 	call	0xbee	; 0xbee <Display__SetState>
			}
			else
			{
				Door_state = SECOND_OPEN;
			}
			Oven_PositionControl_State = OVEN_OFF;
 27c:	10 92 5a 01 	sts	0x015A, r1	; 0x80015a <Oven_PositionControl_State>
		break;
 280:	08 95       	ret
		
		case OVEN_OUTSIDE_DOWN:
			Display__SetState(MOTOR_UP);		
 282:	81 e0       	ldi	r24, 0x01	; 1
 284:	0e 94 f7 05 	call	0xbee	; 0xbee <Display__SetState>
		break;
 288:	08 95       	ret
		
		case OVEN_OUTSIDE_UP:
			Display__SetState(MOTOR_DOWN);
 28a:	82 e0       	ldi	r24, 0x02	; 2
 28c:	0e 94 f7 05 	call	0xbee	; 0xbee <Display__SetState>
 290:	08 95       	ret

00000292 <ADC__Initialize>:
// Esta função configura somente os pinos de digital para analogico e inicializa o ADC_Buffer[]

// ********************************** 
 
void ADC__Initialize(void)
{
 292:	cf 93       	push	r28
 294:	df 93       	push	r29
	volatile ADC_REG_TYPE *adc_pt;   // tipo definido no micro.h
	adc_pt = ADC_REGISTERS;          // adc_pt aponta par ao inicio dos regs do ADC ($000078)
	
	

	Adc_Step = ADC_STEP_INIT;   // inicializa o Adc_Step em INIT
 296:	10 92 6a 01 	sts	0x016A, r1	; 0x80016a <Adc_Step>
	Sampling_Time = 0;
 29a:	10 92 6b 01 	sts	0x016B, r1	; 0x80016b <Sampling_Time>
	adc_pt->DIDR0_REG.byte =0x00;  //  nenhuma entrada analógica habilitada
 29e:	10 92 7e 00 	sts	0x007E, r1	; 0x80007e <__DATA_REGION_ORIGIN__+0x1e>
 2a2:	ce e5       	ldi	r28, 0x5E	; 94
 2a4:	d1 e0       	ldi	r29, 0x01	; 1
 2a6:	64 e2       	ldi	r22, 0x24	; 36
 2a8:	71 e0       	ldi	r23, 0x01	; 1
 2aa:	ee e1       	ldi	r30, 0x1E	; 30
 2ac:	f1 e0       	ldi	r31, 0x01	; 1
	
	for(channel = 0; channel <NUM_OF_AD_CHANNELS ; channel++)
 2ae:	80 e0       	ldi	r24, 0x00	; 0
		if(Adc_Enable_Table[channel] == ENABLED)      // se o canal é habilitado, então deixa analógico
		{
			// Configures relative input as analog input
			if(channel < NUM_OF_AD_CHANNELS) 
			   {							// CH0 to CH5 are configured in DIDR0
			   adc_pt->DIDR0_REG.byte |= ADC_BIT_SET_MASK[channel];	// configura como analógico conforme o canal enabled
 2b0:	28 e7       	ldi	r18, 0x78	; 120
 2b2:	30 e0       	ldi	r19, 0x00	; 0
	Sampling_Time = 0;
	adc_pt->DIDR0_REG.byte =0x00;  //  nenhuma entrada analógica habilitada
	
	for(channel = 0; channel <NUM_OF_AD_CHANNELS ; channel++)
	 {
		ADC_Buffer[channel] = 0;
 2b4:	19 92       	st	Y+, r1
 2b6:	19 92       	st	Y+, r1

		if(Adc_Enable_Table[channel] == ENABLED)      // se o canal é habilitado, então deixa analógico
 2b8:	db 01       	movw	r26, r22
 2ba:	9d 91       	ld	r25, X+
 2bc:	bd 01       	movw	r22, r26
 2be:	91 30       	cpi	r25, 0x01	; 1
 2c0:	51 f4       	brne	.+20     	; 0x2d6 <ADC__Initialize+0x44>
		{
			// Configures relative input as analog input
			if(channel < NUM_OF_AD_CHANNELS) 
 2c2:	86 30       	cpi	r24, 0x06	; 6
 2c4:	40 f4       	brcc	.+16     	; 0x2d6 <ADC__Initialize+0x44>
			   {							// CH0 to CH5 are configured in DIDR0
			   adc_pt->DIDR0_REG.byte |= ADC_BIT_SET_MASK[channel];	// configura como analógico conforme o canal enabled
 2c6:	d9 01       	movw	r26, r18
 2c8:	16 96       	adiw	r26, 0x06	; 6
 2ca:	4c 91       	ld	r20, X
 2cc:	16 97       	sbiw	r26, 0x06	; 6
 2ce:	90 81       	ld	r25, Z
 2d0:	94 2b       	or	r25, r20
 2d2:	16 96       	adiw	r26, 0x06	; 6
 2d4:	9c 93       	st	X, r25

	Adc_Step = ADC_STEP_INIT;   // inicializa o Adc_Step em INIT
	Sampling_Time = 0;
	adc_pt->DIDR0_REG.byte =0x00;  //  nenhuma entrada analógica habilitada
	
	for(channel = 0; channel <NUM_OF_AD_CHANNELS ; channel++)
 2d6:	8f 5f       	subi	r24, 0xFF	; 255
 2d8:	31 96       	adiw	r30, 0x01	; 1
 2da:	86 30       	cpi	r24, 0x06	; 6
 2dc:	59 f7       	brne	.-42     	; 0x2b4 <ADC__Initialize+0x22>
			   {							// CH0 to CH5 are configured in DIDR0
			   adc_pt->DIDR0_REG.byte |= ADC_BIT_SET_MASK[channel];	// configura como analógico conforme o canal enabled
			   }
		}
	 }  
}
 2de:	df 91       	pop	r29
 2e0:	cf 91       	pop	r28
 2e2:	08 95       	ret

000002e4 <ADC__Handler>:
	unsigned short int value, value_high;
	volatile ADC_REG_TYPE *adc_pt;
	adc_pt = ADC_REGISTERS;
	

	switch(Adc_Step)
 2e4:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <Adc_Step>
 2e8:	82 30       	cpi	r24, 0x02	; 2
 2ea:	81 f1       	breq	.+96     	; 0x34c <ADC__Handler+0x68>
 2ec:	28 f4       	brcc	.+10     	; 0x2f8 <ADC__Handler+0x14>
 2ee:	88 23       	and	r24, r24
 2f0:	41 f0       	breq	.+16     	; 0x302 <ADC__Handler+0x1e>
 2f2:	81 30       	cpi	r24, 0x01	; 1
 2f4:	f9 f0       	breq	.+62     	; 0x334 <ADC__Handler+0x50>
 2f6:	5f c0       	rjmp	.+190    	; 0x3b6 <ADC__Handler+0xd2>
 2f8:	83 30       	cpi	r24, 0x03	; 3
 2fa:	c1 f1       	breq	.+112    	; 0x36c <ADC__Handler+0x88>
 2fc:	84 30       	cpi	r24, 0x04	; 4
 2fe:	f1 f1       	breq	.+124    	; 0x37c <ADC__Handler+0x98>
 300:	5a c0       	rjmp	.+180    	; 0x3b6 <ADC__Handler+0xd2>
	{
	case ADC_STEP_INIT:
		Adc_Channel++;											// Selects next channel
 302:	80 91 6c 01 	lds	r24, 0x016C	; 0x80016c <Adc_Channel>
 306:	8f 5f       	subi	r24, 0xFF	; 255
		if(Adc_Channel >= NUM_OF_AD_CHANNELS)
 308:	86 30       	cpi	r24, 0x06	; 6
 30a:	18 f4       	brcc	.+6      	; 0x312 <ADC__Handler+0x2e>
	

	switch(Adc_Step)
	{
	case ADC_STEP_INIT:
		Adc_Channel++;											// Selects next channel
 30c:	80 93 6c 01 	sts	0x016C, r24	; 0x80016c <Adc_Channel>
 310:	02 c0       	rjmp	.+4      	; 0x316 <ADC__Handler+0x32>
		if(Adc_Channel >= NUM_OF_AD_CHANNELS)
		{
			Adc_Channel = AD_CH0;  // varre constantemente todas os canais
 312:	10 92 6c 01 	sts	0x016C, r1	; 0x80016c <Adc_Channel>
		}

		if(Adc_Enable_Table[Adc_Channel] == ENABLED)			// Checks if current channel is enabled
 316:	e0 91 6c 01 	lds	r30, 0x016C	; 0x80016c <Adc_Channel>
 31a:	f0 e0       	ldi	r31, 0x00	; 0
 31c:	ec 5d       	subi	r30, 0xDC	; 220
 31e:	fe 4f       	sbci	r31, 0xFE	; 254
 320:	80 81       	ld	r24, Z
 322:	81 30       	cpi	r24, 0x01	; 1
 324:	09 f0       	breq	.+2      	; 0x328 <ADC__Handler+0x44>
 326:	49 c0       	rjmp	.+146    	; 0x3ba <ADC__Handler+0xd6>
		{
			Adc_Step = ADC_STEP_SAMPLING;
 328:	80 93 6a 01 	sts	0x016A, r24	; 0x80016a <Adc_Step>
			Sampling_Time = ADC_SAMPLING_TIME;
 32c:	82 e3       	ldi	r24, 0x32	; 50
 32e:	80 93 6b 01 	sts	0x016B, r24	; 0x80016b <Sampling_Time>
 332:	08 95       	ret
		}
		break;

	case ADC_STEP_SAMPLING:
		if(Sampling_Time)
 334:	80 91 6b 01 	lds	r24, 0x016B	; 0x80016b <Sampling_Time>
 338:	88 23       	and	r24, r24
 33a:	21 f0       	breq	.+8      	; 0x344 <ADC__Handler+0x60>
		{
			Sampling_Time--;
 33c:	81 50       	subi	r24, 0x01	; 1
 33e:	80 93 6b 01 	sts	0x016B, r24	; 0x80016b <Sampling_Time>
 342:	08 95       	ret
		}
		else
		{
			Adc_Step = ADC_STEP_CONFIG_CHANNEL;	
 344:	82 e0       	ldi	r24, 0x02	; 2
 346:	80 93 6a 01 	sts	0x016A, r24	; 0x80016a <Adc_Step>
 34a:	08 95       	ret
		}
		break;

	case ADC_STEP_CONFIG_CHANNEL:
	    adc_pt->ADMUX_REG.byte |= (unsigned char)Adc_Channel;	// Configures the channel be read
 34c:	e8 e7       	ldi	r30, 0x78	; 120
 34e:	f0 e0       	ldi	r31, 0x00	; 0
 350:	94 81       	ldd	r25, Z+4	; 0x04
 352:	80 91 6c 01 	lds	r24, 0x016C	; 0x80016c <Adc_Channel>
 356:	89 2b       	or	r24, r25
 358:	84 83       	std	Z+4, r24	; 0x04
		// ADC habilitado, sem auto trigger, sem interrupção, prescaler 128
		adc_pt->ADCSRA_REG.byte =  0x87; 
 35a:	87 e8       	ldi	r24, 0x87	; 135
 35c:	82 83       	std	Z+2, r24	; 0x02
		// INICIA conversão
		adc_pt->ADCSRA_REG.bit.bit6  = 1;    //seta bit 6 (ADSC)
 35e:	82 81       	ldd	r24, Z+2	; 0x02
 360:	80 64       	ori	r24, 0x40	; 64
 362:	82 83       	std	Z+2, r24	; 0x02
		Adc_Step = ADC_STEP_WAIT_CONVERSION;					// Set next step
 364:	83 e0       	ldi	r24, 0x03	; 3
 366:	80 93 6a 01 	sts	0x016A, r24	; 0x80016a <Adc_Step>
		break;
 36a:	08 95       	ret
		
	case ADC_STEP_WAIT_CONVERSION:
		if(adc_pt->ADCSRA_REG.bit.bit6 == 0)	// Wait until conversion be completed
 36c:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
 370:	86 fd       	sbrc	r24, 6
 372:	23 c0       	rjmp	.+70     	; 0x3ba <ADC__Handler+0xd6>
		   	Adc_Step = ADC_STEP_READ_RESULT;
 374:	84 e0       	ldi	r24, 0x04	; 4
 376:	80 93 6a 01 	sts	0x016A, r24	; 0x80016a <Adc_Step>
 37a:	08 95       	ret
		break;

	case ADC_STEP_READ_RESULT:  // AQUI é feita a leitura do ADC físico!!!
	    if(adc_pt->ADMUX_REG.bit.bit5 == 1)   //8 bits
 37c:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
 380:	85 ff       	sbrs	r24, 5
 382:	03 c0       	rjmp	.+6      	; 0x38a <ADC__Handler+0xa6>
		   {
			value = (unsigned short int)((adc_pt->ADCH_REG.byte)& LO_BYTE_MASK); // 8 bits   
 384:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
 388:	30 e0       	ldi	r19, 0x00	; 0
		   }
		if(adc_pt->ADMUX_REG.bit.bit5 == 0)    // 10 bits
 38a:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
 38e:	85 fd       	sbrc	r24, 5
 390:	06 c0       	rjmp	.+12     	; 0x39e <ADC__Handler+0xba>
		   {
			value = (unsigned short int)((adc_pt->ADCL_REG.byte)& LO_BYTE_MASK);
 392:	e8 e7       	ldi	r30, 0x78	; 120
 394:	f0 e0       	ldi	r31, 0x00	; 0
 396:	20 81       	ld	r18, Z
			value_high = (unsigned short int)(adc_pt->ADCH_REG.byte <<8); 
 398:	81 81       	ldd	r24, Z+1	; 0x01
			value |= value_high;	// Reads the conversion result bytes  
 39a:	30 e0       	ldi	r19, 0x00	; 0
 39c:	38 2b       	or	r19, r24
		   }

		ADC_Buffer[Adc_Channel] = value;  // A leitura do ADC é colocado no buffer ADC_Buffer do respectivo canal.
 39e:	e0 91 6c 01 	lds	r30, 0x016C	; 0x80016c <Adc_Channel>
 3a2:	f0 e0       	ldi	r31, 0x00	; 0
 3a4:	ee 0f       	add	r30, r30
 3a6:	ff 1f       	adc	r31, r31
 3a8:	e2 5a       	subi	r30, 0xA2	; 162
 3aa:	fe 4f       	sbci	r31, 0xFE	; 254
 3ac:	31 83       	std	Z+1, r19	; 0x01
 3ae:	20 83       	st	Z, r18
		Adc_Step = ADC_STEP_INIT;
 3b0:	10 92 6a 01 	sts	0x016A, r1	; 0x80016a <Adc_Step>
		
		   //if (value >= 127)
		    //Hal__SetLed(LED_3, 0); //liga LED4
		  //else
		    //Hal__SetLed(LED_3, 1); //desliga LED4
	 	 break;
 3b4:	08 95       	ret

	default:
		Adc_Step = ADC_STEP_INIT;
 3b6:	10 92 6a 01 	sts	0x016A, r1	; 0x80016a <Adc_Step>
 3ba:	08 95       	ret

000003bc <ADC__ConfigModes>:
{
	volatile ADC_REG_TYPE *adc_pt;
	adc_pt = ADC_REGISTERS;
	
	 	// seleção da tensão de referencia:
	adc_pt->ADMUX_REG.bit.bit7 = 0;   //tensão de referencia 5V
 3bc:	e8 e7       	ldi	r30, 0x78	; 120
 3be:	f0 e0       	ldi	r31, 0x00	; 0
 3c0:	94 81       	ldd	r25, Z+4	; 0x04
 3c2:	9f 77       	andi	r25, 0x7F	; 127
 3c4:	94 83       	std	Z+4, r25	; 0x04
	adc_pt->ADMUX_REG.bit.bit6 = 1;   //tensão de referencia 5V
 3c6:	94 81       	ldd	r25, Z+4	; 0x04
 3c8:	90 64       	ori	r25, 0x40	; 64
 3ca:	94 83       	std	Z+4, r25	; 0x04
	
	if(mode < NUM_OF_MODES)
 3cc:	82 30       	cpi	r24, 0x02	; 2
 3ce:	68 f4       	brcc	.+26     	; 0x3ea <ADC__ConfigModes+0x2e>
	{
		if (mode == MODE_8BITS)
 3d0:	81 11       	cpse	r24, r1
 3d2:	04 c0       	rjmp	.+8      	; 0x3dc <ADC__ConfigModes+0x20>
		   adc_pt->ADMUX_REG.bit.bit5 = 1;  //Micro.h => ADLAR = 1, alinhado a esquerda e a leitura é no ADCH (8 bits)
 3d4:	84 81       	ldd	r24, Z+4	; 0x04
 3d6:	80 62       	ori	r24, 0x20	; 32
 3d8:	84 83       	std	Z+4, r24	; 0x04
 3da:	07 c0       	rjmp	.+14     	; 0x3ea <ADC__ConfigModes+0x2e>
		if (mode == MODE_10BITS)
 3dc:	81 30       	cpi	r24, 0x01	; 1
 3de:	29 f4       	brne	.+10     	; 0x3ea <ADC__ConfigModes+0x2e>
		   adc_pt->ADMUX_REG.bit.bit5 = 0;  //ADLAR = 0, alinhado a direita e a leitura é primeiro no ADCL e depois ADCH (10 bits)
 3e0:	e8 e7       	ldi	r30, 0x78	; 120
 3e2:	f0 e0       	ldi	r31, 0x00	; 0
 3e4:	84 81       	ldd	r24, Z+4	; 0x04
 3e6:	8f 7d       	andi	r24, 0xDF	; 223
 3e8:	84 83       	std	Z+4, r24	; 0x04
	}
		
	if(conv_type < NUM_OF_CONVERSION_TYPES)
 3ea:	62 30       	cpi	r22, 0x02	; 2
 3ec:	78 f4       	brcc	.+30     	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
	{
		if (conv_type == AD_SINGLE_CONVERSION)
 3ee:	61 11       	cpse	r22, r1
 3f0:	06 c0       	rjmp	.+12     	; 0x3fe <ADC__ConfigModes+0x42>
		   adc_pt->ADCSRA_REG.bit.bit5 = 0;      //Micro.h => ADATE = 0, uma leitura
 3f2:	e8 e7       	ldi	r30, 0x78	; 120
 3f4:	f0 e0       	ldi	r31, 0x00	; 0
 3f6:	82 81       	ldd	r24, Z+2	; 0x02
 3f8:	8f 7d       	andi	r24, 0xDF	; 223
 3fa:	82 83       	std	Z+2, r24	; 0x02
 3fc:	08 95       	ret
		if (conv_type == AD_CONTINUOUS_CONVERSION)
 3fe:	61 30       	cpi	r22, 0x01	; 1
 400:	29 f4       	brne	.+10     	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
		   adc_pt->ADCSRA_REG.bit.bit5 = 1;      //ADATE = 1, a fonte de disparo pode ser conversão continua, comparador analogico, etc 
 402:	e8 e7       	ldi	r30, 0x78	; 120
 404:	f0 e0       	ldi	r31, 0x00	; 0
 406:	82 81       	ldd	r24, Z+2	; 0x02
 408:	80 62       	ori	r24, 0x20	; 32
 40a:	82 83       	std	Z+2, r24	; 0x02
 40c:	08 95       	ret

0000040e <ADC__GetValue>:
 */


unsigned short int ADC__GetValue(AD_CHANNEL_TYPE channel)
{
	if(channel < NUM_OF_AD_CHANNELS)
 40e:	86 30       	cpi	r24, 0x06	; 6
 410:	48 f4       	brcc	.+18     	; 0x424 <ADC__GetValue+0x16>
	{
		return ADC_Buffer[channel];  // retorna valor do ADC lido no ADC_Buffer do canal solcitado!
 412:	e8 2f       	mov	r30, r24
 414:	f0 e0       	ldi	r31, 0x00	; 0
 416:	ee 0f       	add	r30, r30
 418:	ff 1f       	adc	r31, r31
 41a:	e2 5a       	subi	r30, 0xA2	; 162
 41c:	fe 4f       	sbci	r31, 0xFE	; 254
 41e:	80 81       	ld	r24, Z
 420:	91 81       	ldd	r25, Z+1	; 0x01
 422:	08 95       	ret
	}
	return 0;
 424:	80 e0       	ldi	r24, 0x00	; 0
 426:	90 e0       	ldi	r25, 0x00	; 0
}
 428:	08 95       	ret

0000042a <Gpio__PinConfig>:
	volatile GPIO_DATA_TYPE *pt_data;
	//volatile GPIO_MISC_TYPE *pt_misc;
	unsigned char set_bit_mask;
	unsigned char clr_bit_mask;
	
	set_bit_mask = GPIO_PIN_SET_MASK[pin];
 42a:	70 e0       	ldi	r23, 0x00	; 0
 42c:	fb 01       	movw	r30, r22
 42e:	ee 5c       	subi	r30, 0xCE	; 206
 430:	fe 4f       	sbci	r31, 0xFE	; 254
 432:	20 81       	ld	r18, Z
	clr_bit_mask = GPIO_PIN_CLR_MASK[pin];
	
	
	switch(port)
 434:	81 30       	cpi	r24, 0x01	; 1
 436:	31 f0       	breq	.+12     	; 0x444 <Gpio__PinConfig+0x1a>
 438:	18 f0       	brcs	.+6      	; 0x440 <Gpio__PinConfig+0x16>
 43a:	82 30       	cpi	r24, 0x02	; 2
 43c:	29 f0       	breq	.+10     	; 0x448 <Gpio__PinConfig+0x1e>
 43e:	05 c0       	rjmp	.+10     	; 0x44a <Gpio__PinConfig+0x20>
	{
	case	PORT_B:
		pt_data = PORTB;   // Está no Micro.h: #define PORTA &GPIOA_DATA   => endereço 0x0000 00000
 440:	95 b1       	in	r25, 0x05	; 5
		break;
 442:	03 c0       	rjmp	.+6      	; 0x44a <Gpio__PinConfig+0x20>
	case	PORT_C:
		pt_data = PORTC;
 444:	98 b1       	in	r25, 0x08	; 8
		break;
 446:	01 c0       	rjmp	.+2      	; 0x44a <Gpio__PinConfig+0x20>
	case	PORT_D:
		pt_data = PORTD;
 448:	9b b1       	in	r25, 0x0b	; 11
		break;
	default:
		break;
	}
if(type == OUTPUT_DIGITAL)    // setar 1 para saída
 44a:	41 30       	cpi	r20, 0x01	; 1
 44c:	69 f4       	brne	.+26     	; 0x468 <Gpio__PinConfig+0x3e>
{
	//var = pt_data->DIRECION_REG.byte;
	//BIT_SET(var,pin);      // Está no C_types.h =>  #define BIT_SET(mem,bit)    ((mem)|=(1UL<<(bit))) //This macro is used to set the bit of the data
	//pt_data->DIRECION_REG.byte = var;  
	//   OU
	pt_data = GPIO_DATA_LIST[port];		 	
 44e:	e8 2f       	mov	r30, r24
 450:	f0 e0       	ldi	r31, 0x00	; 0
 452:	ee 0f       	add	r30, r30
 454:	ff 1f       	adc	r31, r31
 456:	e0 50       	subi	r30, 0x00	; 0
 458:	ff 4f       	sbci	r31, 0xFF	; 255
 45a:	01 90       	ld	r0, Z+
 45c:	f0 81       	ld	r31, Z
 45e:	e0 2d       	mov	r30, r0
	pt_data->DIRECION_REG.byte |= set_bit_mask;	// Config Output
 460:	81 81       	ldd	r24, Z+1	; 0x01
 462:	82 2b       	or	r24, r18
 464:	81 83       	std	Z+1, r24	; 0x01
 466:	08 95       	ret
}

if(type == INPUT_DIGITAL_PULLUP)
 468:	41 11       	cpse	r20, r1
 46a:	14 c0       	rjmp	.+40     	; 0x494 <Gpio__PinConfig+0x6a>
{
	pt_data = GPIO_DATA_LIST[port];		 	
 46c:	e8 2f       	mov	r30, r24
 46e:	f0 e0       	ldi	r31, 0x00	; 0
 470:	ee 0f       	add	r30, r30
 472:	ff 1f       	adc	r31, r31
 474:	e0 50       	subi	r30, 0x00	; 0
 476:	ff 4f       	sbci	r31, 0xFF	; 255
 478:	01 90       	ld	r0, Z+
 47a:	f0 81       	ld	r31, Z
 47c:	e0 2d       	mov	r30, r0
	pt_data->DIRECION_REG.byte &= clr_bit_mask; 	// Config Input
 47e:	81 81       	ldd	r24, Z+1	; 0x01
	//volatile GPIO_MISC_TYPE *pt_misc;
	unsigned char set_bit_mask;
	unsigned char clr_bit_mask;
	
	set_bit_mask = GPIO_PIN_SET_MASK[pin];
	clr_bit_mask = GPIO_PIN_CLR_MASK[pin];
 480:	db 01       	movw	r26, r22
 482:	a6 5d       	subi	r26, 0xD6	; 214
 484:	be 4f       	sbci	r27, 0xFE	; 254
}

if(type == INPUT_DIGITAL_PULLUP)
{
	pt_data = GPIO_DATA_LIST[port];		 	
	pt_data->DIRECION_REG.byte &= clr_bit_mask; 	// Config Input
 486:	9c 91       	ld	r25, X
 488:	98 23       	and	r25, r24
 48a:	91 83       	std	Z+1, r25	; 0x01
	
	pt_data->DATA_OUT_PULL_REG.byte |= set_bit_mask;   // Config Input Pull up
 48c:	92 81       	ldd	r25, Z+2	; 0x02
 48e:	82 2f       	mov	r24, r18
 490:	89 2b       	or	r24, r25
 492:	82 83       	std	Z+2, r24	; 0x02
 494:	08 95       	ret

00000496 <Gpio__PinWrite>:
 **********************************************************************************/
void Gpio__PinWrite(GPIO_PORT port,unsigned char pin,unsigned char value)
{
	volatile GPIO_DATA_TYPE *pt_data;
	
	  if (value == 0)
 496:	41 11       	cpse	r20, r1
 498:	14 c0       	rjmp	.+40     	; 0x4c2 <Gpio__PinWrite+0x2c>
        {
        	pt_data = GPIO_DATA_LIST[port];		 	
 49a:	e8 2f       	mov	r30, r24
 49c:	f0 e0       	ldi	r31, 0x00	; 0
 49e:	ee 0f       	add	r30, r30
 4a0:	ff 1f       	adc	r31, r31
 4a2:	e0 50       	subi	r30, 0x00	; 0
 4a4:	ff 4f       	sbci	r31, 0xFF	; 255
 4a6:	a0 81       	ld	r26, Z
 4a8:	b1 81       	ldd	r27, Z+1	; 0x01
        	pt_data->DATA_OUT_PULL_REG.byte &= GPIO_PIN_CLR_MASK[pin];
 4aa:	12 96       	adiw	r26, 0x02	; 2
 4ac:	9c 91       	ld	r25, X
 4ae:	12 97       	sbiw	r26, 0x02	; 2
 4b0:	e6 2f       	mov	r30, r22
 4b2:	f0 e0       	ldi	r31, 0x00	; 0
 4b4:	e6 5d       	subi	r30, 0xD6	; 214
 4b6:	fe 4f       	sbci	r31, 0xFE	; 254
 4b8:	80 81       	ld	r24, Z
 4ba:	89 23       	and	r24, r25
 4bc:	12 96       	adiw	r26, 0x02	; 2
 4be:	8c 93       	st	X, r24
 4c0:	08 95       	ret
        }
        else
        {
        	pt_data = GPIO_DATA_LIST[port];
 4c2:	e8 2f       	mov	r30, r24
 4c4:	f0 e0       	ldi	r31, 0x00	; 0
 4c6:	ee 0f       	add	r30, r30
 4c8:	ff 1f       	adc	r31, r31
 4ca:	e0 50       	subi	r30, 0x00	; 0
 4cc:	ff 4f       	sbci	r31, 0xFF	; 255
 4ce:	a0 81       	ld	r26, Z
 4d0:	b1 81       	ldd	r27, Z+1	; 0x01
        	pt_data->DATA_OUT_PULL_REG.byte |= GPIO_PIN_SET_MASK[pin];
 4d2:	12 96       	adiw	r26, 0x02	; 2
 4d4:	9c 91       	ld	r25, X
 4d6:	12 97       	sbiw	r26, 0x02	; 2
 4d8:	e6 2f       	mov	r30, r22
 4da:	f0 e0       	ldi	r31, 0x00	; 0
 4dc:	ee 5c       	subi	r30, 0xCE	; 206
 4de:	fe 4f       	sbci	r31, 0xFE	; 254
 4e0:	80 81       	ld	r24, Z
 4e2:	89 2b       	or	r24, r25
 4e4:	12 96       	adiw	r26, 0x02	; 2
 4e6:	8c 93       	st	X, r24
 4e8:	08 95       	ret

000004ea <Gpio__PinRead>:
unsigned char Gpio__PinRead(GPIO_PORT port,unsigned char pin)
{
	volatile GPIO_DATA_TYPE *pt_data;
	unsigned char pin_state = SW_OFF;       // pin_state = OFF  não pressionado  
	
		pt_data = GPIO_DATA_LIST[port];
 4ea:	e8 2f       	mov	r30, r24
 4ec:	f0 e0       	ldi	r31, 0x00	; 0
 4ee:	ee 0f       	add	r30, r30
 4f0:	ff 1f       	adc	r31, r31
 4f2:	e0 50       	subi	r30, 0x00	; 0
 4f4:	ff 4f       	sbci	r31, 0xFF	; 255
 4f6:	01 90       	ld	r0, Z+
 4f8:	f0 81       	ld	r31, Z
 4fa:	e0 2d       	mov	r30, r0
    	if (pt_data->DATA_IN_REG.byte & GPIO_PIN_SET_MASK[pin])     // if(leitura != 0)   ou if(leitura)
 4fc:	90 81       	ld	r25, Z
 4fe:	e6 2f       	mov	r30, r22
 500:	f0 e0       	ldi	r31, 0x00	; 0
 502:	ee 5c       	subi	r30, 0xCE	; 206
 504:	fe 4f       	sbci	r31, 0xFE	; 254
           pin_state = SW_OFF;     // pin_state = SW_OFF   não acionado
        else
		   pin_state = SW_ON;
   
    return (pin_state);
 506:	80 81       	ld	r24, Z
 508:	98 23       	and	r25, r24
 50a:	81 e0       	ldi	r24, 0x01	; 1
 50c:	09 f4       	brne	.+2      	; 0x510 <Gpio__PinRead+0x26>
 50e:	80 e0       	ldi	r24, 0x00	; 0
    
}
 510:	08 95       	ret

00000512 <Pwm__SetTCFrequency>:

pwm_pt0 = TC0_REGISTERS;
pwm_pt1 = TC1_REGISTERS;
pwm_pt2 = TC2_REGISTERS;

if((frequency > 1900) && frequency  < 2100 ){
 512:	9b 01       	movw	r18, r22
 514:	2d 56       	subi	r18, 0x6D	; 109
 516:	37 40       	sbci	r19, 0x07	; 7
 518:	27 3c       	cpi	r18, 0xC7	; 199
 51a:	31 05       	cpc	r19, r1
 51c:	18 f5       	brcc	.+70     	; 0x564 <Pwm__SetTCFrequency+0x52>
	switch(tc){
 51e:	81 30       	cpi	r24, 0x01	; 1
 520:	69 f0       	breq	.+26     	; 0x53c <Pwm__SetTCFrequency+0x2a>
 522:	18 f0       	brcs	.+6      	; 0x52a <Pwm__SetTCFrequency+0x18>
 524:	82 30       	cpi	r24, 0x02	; 2
 526:	a1 f0       	breq	.+40     	; 0x550 <Pwm__SetTCFrequency+0x3e>
 528:	1d c0       	rjmp	.+58     	; 0x564 <Pwm__SetTCFrequency+0x52>
		case PWM_TC0:
		pwm_pt0->TCCR0B_REG.byte = 0b00100010;
 52a:	92 e2       	ldi	r25, 0x22	; 34
 52c:	95 bd       	out	0x25, r25	; 37
		default:
		break;
	}
}

if((frequency > 2900) && frequency  < 3100 ){
 52e:	9b 01       	movw	r18, r22
 530:	25 55       	subi	r18, 0x55	; 85
 532:	3b 40       	sbci	r19, 0x0B	; 11
 534:	27 3c       	cpi	r18, 0xC7	; 199
 536:	31 05       	cpc	r19, r1
 538:	08 f1       	brcs	.+66     	; 0x57c <Pwm__SetTCFrequency+0x6a>
 53a:	79 c0       	rjmp	.+242    	; 0x62e <Pwm__SetTCFrequency+0x11c>
	switch(tc){
		case PWM_TC0:
		pwm_pt0->TCCR0B_REG.byte = 0b00100010;
		break;
		case PWM_TC1:
		pwm_pt1->TCCR1B_REG.byte = 0b00100010;
 53c:	92 e2       	ldi	r25, 0x22	; 34
 53e:	90 93 81 00 	sts	0x0081, r25	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
		default:
		break;
	}
}

if((frequency > 2900) && frequency  < 3100 ){
 542:	9b 01       	movw	r18, r22
 544:	25 55       	subi	r18, 0x55	; 85
 546:	3b 40       	sbci	r19, 0x0B	; 11
 548:	27 3c       	cpi	r18, 0xC7	; 199
 54a:	31 05       	cpc	r19, r1
 54c:	00 f1       	brcs	.+64     	; 0x58e <Pwm__SetTCFrequency+0x7c>
 54e:	76 c0       	rjmp	.+236    	; 0x63c <Pwm__SetTCFrequency+0x12a>
		pwm_pt1->TCCR1B_REG.byte = 0b00100010;
		break;
		case PWM_TC2:
		//pwm_pt2->TCCR2A_REG.byte = 0b00100001; //MODO 1 para PWM fase corrigida,
		//pwm_pt2->TCCR2A_REG.byte = 0b00110001; //MODO 1 para PWM fase corrigida,
		pwm_pt2->TCCR2B_REG.byte = 0b00100010;
 550:	92 e2       	ldi	r25, 0x22	; 34
 552:	90 93 b1 00 	sts	0x00B1, r25	; 0x8000b1 <__DATA_REGION_ORIGIN__+0x51>
		default:
		break;
	}
}

if((frequency > 2900) && frequency  < 3100 ){
 556:	9b 01       	movw	r18, r22
 558:	25 55       	subi	r18, 0x55	; 85
 55a:	3b 40       	sbci	r19, 0x0B	; 11
 55c:	27 3c       	cpi	r18, 0xC7	; 199
 55e:	31 05       	cpc	r19, r1
 560:	00 f1       	brcs	.+64     	; 0x5a2 <Pwm__SetTCFrequency+0x90>
 562:	73 c0       	rjmp	.+230    	; 0x64a <Pwm__SetTCFrequency+0x138>
 564:	9b 01       	movw	r18, r22
 566:	25 55       	subi	r18, 0x55	; 85
 568:	3b 40       	sbci	r19, 0x0B	; 11
 56a:	27 3c       	cpi	r18, 0xC7	; 199
 56c:	31 05       	cpc	r19, r1
 56e:	18 f5       	brcc	.+70     	; 0x5b6 <Pwm__SetTCFrequency+0xa4>
	switch(tc){
 570:	81 30       	cpi	r24, 0x01	; 1
 572:	69 f0       	breq	.+26     	; 0x58e <Pwm__SetTCFrequency+0x7c>
 574:	18 f0       	brcs	.+6      	; 0x57c <Pwm__SetTCFrequency+0x6a>
 576:	82 30       	cpi	r24, 0x02	; 2
 578:	f1 f4       	brne	.+60     	; 0x5b6 <Pwm__SetTCFrequency+0xa4>
 57a:	13 c0       	rjmp	.+38     	; 0x5a2 <Pwm__SetTCFrequency+0x90>
		case PWM_TC0:
		pwm_pt0->TCCR0B_REG.byte = 0b00100011;
 57c:	93 e2       	ldi	r25, 0x23	; 35
 57e:	95 bd       	out	0x25, r25	; 37
		default:
		break;
	}
}

if((frequency > 3900) && frequency  < 4100 ){
 580:	9b 01       	movw	r18, r22
 582:	2d 53       	subi	r18, 0x3D	; 61
 584:	3f 40       	sbci	r19, 0x0F	; 15
 586:	27 3c       	cpi	r18, 0xC7	; 199
 588:	31 05       	cpc	r19, r1
 58a:	08 f1       	brcs	.+66     	; 0x5ce <Pwm__SetTCFrequency+0xbc>
 58c:	3a c0       	rjmp	.+116    	; 0x602 <Pwm__SetTCFrequency+0xf0>
	switch(tc){
		case PWM_TC0:
		pwm_pt0->TCCR0B_REG.byte = 0b00100011;
		break;
		case PWM_TC1:
		pwm_pt1->TCCR1B_REG.byte = 0b00100011;
 58e:	93 e2       	ldi	r25, 0x23	; 35
 590:	90 93 81 00 	sts	0x0081, r25	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
		default:
		break;
	}
}

if((frequency > 3900) && frequency  < 4100 ){
 594:	9b 01       	movw	r18, r22
 596:	2d 53       	subi	r18, 0x3D	; 61
 598:	3f 40       	sbci	r19, 0x0F	; 15
 59a:	27 3c       	cpi	r18, 0xC7	; 199
 59c:	31 05       	cpc	r19, r1
 59e:	f8 f0       	brcs	.+62     	; 0x5de <Pwm__SetTCFrequency+0xcc>
 5a0:	30 c0       	rjmp	.+96     	; 0x602 <Pwm__SetTCFrequency+0xf0>
		pwm_pt1->TCCR1B_REG.byte = 0b00100011;
		break;
		case PWM_TC2:
		//pwm_pt2->TCCR2A_REG.byte =  0b00100001; //MODO 1 para PWM fase corrigida,
		//pwm_pt2->TCCR2A_REG.byte = 0b00110001; //MODO 1 para PWM fase corrigida,
		pwm_pt2->TCCR2B_REG.byte = 0b00100011;
 5a2:	93 e2       	ldi	r25, 0x23	; 35
 5a4:	90 93 b1 00 	sts	0x00B1, r25	; 0x8000b1 <__DATA_REGION_ORIGIN__+0x51>
		default:
		break;
	}
}

if((frequency > 3900) && frequency  < 4100 ){
 5a8:	9b 01       	movw	r18, r22
 5aa:	2d 53       	subi	r18, 0x3D	; 61
 5ac:	3f 40       	sbci	r19, 0x0F	; 15
 5ae:	27 3c       	cpi	r18, 0xC7	; 199
 5b0:	31 05       	cpc	r19, r1
 5b2:	f0 f0       	brcs	.+60     	; 0x5f0 <Pwm__SetTCFrequency+0xde>
 5b4:	26 c0       	rjmp	.+76     	; 0x602 <Pwm__SetTCFrequency+0xf0>
 5b6:	9b 01       	movw	r18, r22
 5b8:	2d 53       	subi	r18, 0x3D	; 61
 5ba:	3f 40       	sbci	r19, 0x0F	; 15
 5bc:	27 3c       	cpi	r18, 0xC7	; 199
 5be:	31 05       	cpc	r19, r1
 5c0:	00 f5       	brcc	.+64     	; 0x602 <Pwm__SetTCFrequency+0xf0>
switch(tc){
 5c2:	81 30       	cpi	r24, 0x01	; 1
 5c4:	61 f0       	breq	.+24     	; 0x5de <Pwm__SetTCFrequency+0xcc>
 5c6:	18 f0       	brcs	.+6      	; 0x5ce <Pwm__SetTCFrequency+0xbc>
 5c8:	82 30       	cpi	r24, 0x02	; 2
 5ca:	d9 f4       	brne	.+54     	; 0x602 <Pwm__SetTCFrequency+0xf0>
 5cc:	11 c0       	rjmp	.+34     	; 0x5f0 <Pwm__SetTCFrequency+0xde>
case PWM_TC0:
   pwm_pt0->TCCR0B_REG.byte = 0x02; //prescaler = 8 dando frequencia de 4000Hz
 5ce:	82 e0       	ldi	r24, 0x02	; 2
 5d0:	85 bd       	out	0x25, r24	; 37
default:
	break;
}
}

if((frequency > 4900) && frequency  < 5100 ){
 5d2:	65 52       	subi	r22, 0x25	; 37
 5d4:	73 41       	sbci	r23, 0x13	; 19
 5d6:	67 3c       	cpi	r22, 0xC7	; 199
 5d8:	71 05       	cpc	r23, r1
 5da:	f0 f0       	brcs	.+60     	; 0x618 <Pwm__SetTCFrequency+0x106>
 5dc:	08 95       	ret
switch(tc){
case PWM_TC0:
   pwm_pt0->TCCR0B_REG.byte = 0x02; //prescaler = 8 dando frequencia de 4000Hz
   break;   
case PWM_TC1:
	pwm_pt1->TCCR1B_REG.byte = 0x02; //prescaler = 8 dando frequencia de 4000Hz
 5de:	82 e0       	ldi	r24, 0x02	; 2
 5e0:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
default:
	break;
}
}

if((frequency > 4900) && frequency  < 5100 ){
 5e4:	65 52       	subi	r22, 0x25	; 37
 5e6:	73 41       	sbci	r23, 0x13	; 19
 5e8:	67 3c       	cpi	r22, 0xC7	; 199
 5ea:	71 05       	cpc	r23, r1
 5ec:	c0 f0       	brcs	.+48     	; 0x61e <Pwm__SetTCFrequency+0x10c>
 5ee:	08 95       	ret
case PWM_TC1:
	pwm_pt1->TCCR1B_REG.byte = 0x02; //prescaler = 8 dando frequencia de 4000Hz
	break;
case PWM_TC2:
    //pwm_pt2->TCCR2A_REG.byte =  0b00100001; //MODO 1 para PWM fase corrigida,
	pwm_pt2->TCCR2B_REG.byte = 0x02; //prescaler = 8 dando frequencia de 4000Hz   	
 5f0:	82 e0       	ldi	r24, 0x02	; 2
 5f2:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__DATA_REGION_ORIGIN__+0x51>
default:
	break;
}
}

if((frequency > 4900) && frequency  < 5100 ){
 5f6:	65 52       	subi	r22, 0x25	; 37
 5f8:	73 41       	sbci	r23, 0x13	; 19
 5fa:	67 3c       	cpi	r22, 0xC7	; 199
 5fc:	71 05       	cpc	r23, r1
 5fe:	98 f0       	brcs	.+38     	; 0x626 <Pwm__SetTCFrequency+0x114>
 600:	08 95       	ret
 602:	65 52       	subi	r22, 0x25	; 37
 604:	73 41       	sbci	r23, 0x13	; 19
 606:	67 3c       	cpi	r22, 0xC7	; 199
 608:	71 05       	cpc	r23, r1
 60a:	30 f5       	brcc	.+76     	; 0x658 <Pwm__SetTCFrequency+0x146>
	switch(tc){
 60c:	81 30       	cpi	r24, 0x01	; 1
 60e:	39 f0       	breq	.+14     	; 0x61e <Pwm__SetTCFrequency+0x10c>
 610:	18 f0       	brcs	.+6      	; 0x618 <Pwm__SetTCFrequency+0x106>
 612:	82 30       	cpi	r24, 0x02	; 2
 614:	09 f5       	brne	.+66     	; 0x658 <Pwm__SetTCFrequency+0x146>
 616:	07 c0       	rjmp	.+14     	; 0x626 <Pwm__SetTCFrequency+0x114>
		case PWM_TC0:
		pwm_pt0->TCCR0B_REG.byte = 0b00100101;
 618:	85 e2       	ldi	r24, 0x25	; 37
 61a:	85 bd       	out	0x25, r24	; 37
		break;
 61c:	08 95       	ret
		case PWM_TC1:
		pwm_pt1->TCCR1B_REG.byte = 0b00100101;
 61e:	85 e2       	ldi	r24, 0x25	; 37
 620:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
		break;
 624:	08 95       	ret
		case PWM_TC2:
		//pwm_pt2->TCCR2A_REG.byte =  0b00100001; //MODO 1 para PWM fase corrigida,
		//pwm_pt2->TCCR2A_REG.byte = 0b00110001; //MODO 1 para PWM fase corrigida,
		pwm_pt2->TCCR2B_REG.byte = 0b00100101;
 626:	85 e2       	ldi	r24, 0x25	; 37
 628:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__DATA_REGION_ORIGIN__+0x51>

		default:
		break;
	}
}
}  // fim da função
 62c:	08 95       	ret
		default:
		break;
	}
}

if((frequency > 3900) && frequency  < 4100 ){
 62e:	9b 01       	movw	r18, r22
 630:	2d 53       	subi	r18, 0x3D	; 61
 632:	3f 40       	sbci	r19, 0x0F	; 15
 634:	27 3c       	cpi	r18, 0xC7	; 199
 636:	31 05       	cpc	r19, r1
 638:	50 f2       	brcs	.-108    	; 0x5ce <Pwm__SetTCFrequency+0xbc>
 63a:	e3 cf       	rjmp	.-58     	; 0x602 <Pwm__SetTCFrequency+0xf0>
 63c:	9b 01       	movw	r18, r22
 63e:	2d 53       	subi	r18, 0x3D	; 61
 640:	3f 40       	sbci	r19, 0x0F	; 15
 642:	27 3c       	cpi	r18, 0xC7	; 199
 644:	31 05       	cpc	r19, r1
 646:	58 f2       	brcs	.-106    	; 0x5de <Pwm__SetTCFrequency+0xcc>
 648:	dc cf       	rjmp	.-72     	; 0x602 <Pwm__SetTCFrequency+0xf0>
 64a:	9b 01       	movw	r18, r22
 64c:	2d 53       	subi	r18, 0x3D	; 61
 64e:	3f 40       	sbci	r19, 0x0F	; 15
 650:	27 3c       	cpi	r18, 0xC7	; 199
 652:	31 05       	cpc	r19, r1
 654:	68 f2       	brcs	.-102    	; 0x5f0 <Pwm__SetTCFrequency+0xde>
 656:	d5 cf       	rjmp	.-86     	; 0x602 <Pwm__SetTCFrequency+0xf0>
 658:	08 95       	ret

0000065a <Pwm__Initialize>:
//   Esta rotina  faz a configuração do PWM (buzzer)
//
//*********************************************************
 
// Inicialização do módulo PWM ( Buzzer está no PD3 OC2B !!)
void Pwm__Initialize(void){
 65a:	cf 93       	push	r28
 65c:	df 93       	push	r29
volatile TC2_REG_TYPE *pwm_pt2;

pwm_pt2 = TC2_REGISTERS;

// porta de  saida para buzina
bitWrite(DDRD, 3, OUTPUT_DIGITAL);
 65e:	53 9a       	sbi	0x0a, 3	; 10
//bitWrite(PORTD, 3, 0);
// saida Buzzer para OC2B
pwm_pt2->TCCR2A_REG.byte =  0b00110001; //MODO 1 para PWM fase corrigida, 
 660:	c0 eb       	ldi	r28, 0xB0	; 176
 662:	d0 e0       	ldi	r29, 0x00	; 0
 664:	81 e3       	ldi	r24, 0x31	; 49
 666:	88 83       	st	Y, r24
                       // saida  OC2B  INVERTIDA TOP = 0xFF, OC2B habilitado
//pwm_pt2->TCCR2B_REG.byte =  0b00000010; //TC2 parado

Pwm__SetTCFrequency(PWM_TC2, BUZZER_DEFAULT_FREQ);
 668:	60 e7       	ldi	r22, 0x70	; 112
 66a:	77 e1       	ldi	r23, 0x17	; 23
 66c:	82 e0       	ldi	r24, 0x02	; 2
 66e:	0e 94 89 02 	call	0x512	; 0x512 <Pwm__SetTCFrequency>
	 break;    // tem que checar para 16 bits
case PWM4:
	 pwm_pt2->OCR2A_REG.byte = (unsigned char)(255*duty/100); //considerando TOP = 255
	 break;    // tem que checar para 16 bits
case PWM5:
	pwm_pt2->OCR2B_REG.byte = (unsigned char)(255*duty/100); //considerando TOP = 255
 672:	1c 82       	std	Y+4, r1	; 0x04

Pwm__SetTCFrequency(PWM_TC2, BUZZER_DEFAULT_FREQ);
Pwm__SetDutyCycle(PWM5, BUZZER_OFF_DUTY);  //desliga o buzzer
// desligar a buzina com duty cycle igual a 0
//pwm_pt2->OCR2B_REG.byte =  0;	
}
 674:	df 91       	pop	r29
 676:	cf 91       	pop	r28
 678:	08 95       	ret

0000067a <Pwm__SetDutyCycle>:
//
//   Esta rotina configura o PWM TC num determinado 
//   ciclo de trabalho ( 0 a 100)
//
//*********************************************************
void Pwm__SetDutyCycle( PWM_ID_TYPE pwm, unsigned char duty){
 67a:	65 36       	cpi	r22, 0x65	; 101
 67c:	08 f0       	brcs	.+2      	; 0x680 <Pwm__SetDutyCycle+0x6>
 67e:	64 e6       	ldi	r22, 0x64	; 100
pwm_pt0 = TC0_REGISTERS;
pwm_pt1 = TC1_REGISTERS;
pwm_pt2 = TC2_REGISTERS;
if (duty >100)
   duty = 100;
switch (pwm){
 680:	82 30       	cpi	r24, 0x02	; 2
 682:	01 f1       	breq	.+64     	; 0x6c4 <Pwm__SetDutyCycle+0x4a>
 684:	28 f4       	brcc	.+10     	; 0x690 <Pwm__SetDutyCycle+0x16>
 686:	88 23       	and	r24, r24
 688:	49 f0       	breq	.+18     	; 0x69c <Pwm__SetDutyCycle+0x22>
 68a:	81 30       	cpi	r24, 0x01	; 1
 68c:	89 f0       	breq	.+34     	; 0x6b0 <Pwm__SetDutyCycle+0x36>
 68e:	08 95       	ret
 690:	84 30       	cpi	r24, 0x04	; 4
 692:	71 f1       	breq	.+92     	; 0x6f0 <Pwm__SetDutyCycle+0x76>
 694:	10 f1       	brcs	.+68     	; 0x6da <Pwm__SetDutyCycle+0x60>
 696:	85 30       	cpi	r24, 0x05	; 5
 698:	b1 f1       	breq	.+108    	; 0x706 <Pwm__SetDutyCycle+0x8c>
 69a:	08 95       	ret
case PWM0:
	pwm_pt0->OCR0A_REG.byte = (unsigned char)(255*duty/100); //considerando TOP = 255
 69c:	2f ef       	ldi	r18, 0xFF	; 255
 69e:	62 9f       	mul	r22, r18
 6a0:	c0 01       	movw	r24, r0
 6a2:	11 24       	eor	r1, r1
 6a4:	64 e6       	ldi	r22, 0x64	; 100
 6a6:	70 e0       	ldi	r23, 0x00	; 0
 6a8:	0e 94 ca 07 	call	0xf94	; 0xf94 <__divmodhi4>
 6ac:	67 bd       	out	0x27, r22	; 39
	break;
 6ae:	08 95       	ret
case PWM1:
	pwm_pt0->OCR0B_REG.byte = (unsigned char)(255*duty/100); //considerando TOP = 255
 6b0:	2f ef       	ldi	r18, 0xFF	; 255
 6b2:	62 9f       	mul	r22, r18
 6b4:	c0 01       	movw	r24, r0
 6b6:	11 24       	eor	r1, r1
 6b8:	64 e6       	ldi	r22, 0x64	; 100
 6ba:	70 e0       	ldi	r23, 0x00	; 0
 6bc:	0e 94 ca 07 	call	0xf94	; 0xf94 <__divmodhi4>
 6c0:	68 bd       	out	0x28, r22	; 40
	break;
 6c2:	08 95       	ret
case PWM2:
	pwm_pt1->OCR1AH_REG.byte = (unsigned char)(255*duty/100); //considerando TOP = 255
 6c4:	2f ef       	ldi	r18, 0xFF	; 255
 6c6:	62 9f       	mul	r22, r18
 6c8:	c0 01       	movw	r24, r0
 6ca:	11 24       	eor	r1, r1
 6cc:	64 e6       	ldi	r22, 0x64	; 100
 6ce:	70 e0       	ldi	r23, 0x00	; 0
 6d0:	0e 94 ca 07 	call	0xf94	; 0xf94 <__divmodhi4>
 6d4:	60 93 89 00 	sts	0x0089, r22	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
 	break;    // tem que checar para 16 bits
 6d8:	08 95       	ret
case PWM3:
	 pwm_pt1->OCR1BH_REG.byte = (unsigned char)(255*duty/100); //considerando TOP = 255
 6da:	2f ef       	ldi	r18, 0xFF	; 255
 6dc:	62 9f       	mul	r22, r18
 6de:	c0 01       	movw	r24, r0
 6e0:	11 24       	eor	r1, r1
 6e2:	64 e6       	ldi	r22, 0x64	; 100
 6e4:	70 e0       	ldi	r23, 0x00	; 0
 6e6:	0e 94 ca 07 	call	0xf94	; 0xf94 <__divmodhi4>
 6ea:	60 93 8b 00 	sts	0x008B, r22	; 0x80008b <__DATA_REGION_ORIGIN__+0x2b>
	 break;    // tem que checar para 16 bits
 6ee:	08 95       	ret
case PWM4:
	 pwm_pt2->OCR2A_REG.byte = (unsigned char)(255*duty/100); //considerando TOP = 255
 6f0:	2f ef       	ldi	r18, 0xFF	; 255
 6f2:	62 9f       	mul	r22, r18
 6f4:	c0 01       	movw	r24, r0
 6f6:	11 24       	eor	r1, r1
 6f8:	64 e6       	ldi	r22, 0x64	; 100
 6fa:	70 e0       	ldi	r23, 0x00	; 0
 6fc:	0e 94 ca 07 	call	0xf94	; 0xf94 <__divmodhi4>
 700:	60 93 b3 00 	sts	0x00B3, r22	; 0x8000b3 <__DATA_REGION_ORIGIN__+0x53>
	 break;    // tem que checar para 16 bits
 704:	08 95       	ret
case PWM5:
	pwm_pt2->OCR2B_REG.byte = (unsigned char)(255*duty/100); //considerando TOP = 255
 706:	2f ef       	ldi	r18, 0xFF	; 255
 708:	62 9f       	mul	r22, r18
 70a:	c0 01       	movw	r24, r0
 70c:	11 24       	eor	r1, r1
 70e:	64 e6       	ldi	r22, 0x64	; 100
 710:	70 e0       	ldi	r23, 0x00	; 0
 712:	0e 94 ca 07 	call	0xf94	; 0xf94 <__divmodhi4>
 716:	60 93 b4 00 	sts	0x00B4, r22	; 0x8000b4 <__DATA_REGION_ORIGIN__+0x54>
 71a:	08 95       	ret

0000071c <Timer__Initialize>:
 * 
 */
unsigned char Timer__HMSGetTime (HMS_TIMER_NAME id)
{
    return (Hms_Timers[id].Time.Sec);
}
 71c:	ef e6       	ldi	r30, 0x6F	; 111
 71e:	f1 e0       	ldi	r31, 0x01	; 1
 720:	8e e7       	ldi	r24, 0x7E	; 126
 722:	91 e0       	ldi	r25, 0x01	; 1
 724:	10 82       	st	Z, r1
 726:	12 82       	std	Z+2, r1	; 0x02
 728:	11 82       	std	Z+1, r1	; 0x01
 72a:	33 96       	adiw	r30, 0x03	; 3
 72c:	e8 17       	cp	r30, r24
 72e:	f9 07       	cpc	r31, r25
 730:	c9 f7       	brne	.-14     	; 0x724 <Timer__Initialize+0x8>
 732:	ee e7       	ldi	r30, 0x7E	; 126
 734:	f1 e0       	ldi	r31, 0x01	; 1
 736:	8a e9       	ldi	r24, 0x9A	; 154
 738:	91 e0       	ldi	r25, 0x01	; 1
 73a:	10 82       	st	Z, r1
 73c:	11 82       	std	Z+1, r1	; 0x01
 73e:	12 82       	std	Z+2, r1	; 0x02
 740:	13 82       	std	Z+3, r1	; 0x03
 742:	34 96       	adiw	r30, 0x04	; 4
 744:	e8 17       	cp	r30, r24
 746:	f9 07       	cpc	r31, r25
 748:	c1 f7       	brne	.-16     	; 0x73a <Timer__Initialize+0x1e>
 74a:	08 95       	ret

0000074c <Timer__HMSHandler>:
 74c:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <__data_end>
 750:	81 30       	cpi	r24, 0x01	; 1
 752:	41 f5       	brne	.+80     	; 0x7a4 <Timer__HMSHandler+0x58>
 754:	ee e7       	ldi	r30, 0x7E	; 126
 756:	f1 e0       	ldi	r31, 0x01	; 1
 758:	2a e9       	ldi	r18, 0x9A	; 154
 75a:	31 e0       	ldi	r19, 0x01	; 1
 75c:	4b e3       	ldi	r20, 0x3B	; 59
 75e:	80 81       	ld	r24, Z
 760:	81 30       	cpi	r24, 0x01	; 1
 762:	d1 f4       	brne	.+52     	; 0x798 <Timer__HMSHandler+0x4c>
 764:	83 81       	ldd	r24, Z+3	; 0x03
 766:	88 23       	and	r24, r24
 768:	49 f0       	breq	.+18     	; 0x77c <Timer__HMSHandler+0x30>
 76a:	81 50       	subi	r24, 0x01	; 1
 76c:	83 83       	std	Z+3, r24	; 0x03
 76e:	52 81       	ldd	r21, Z+2	; 0x02
 770:	91 81       	ldd	r25, Z+1	; 0x01
 772:	95 2b       	or	r25, r21
 774:	89 2b       	or	r24, r25
 776:	81 f4       	brne	.+32     	; 0x798 <Timer__HMSHandler+0x4c>
 778:	10 82       	st	Z, r1
 77a:	0e c0       	rjmp	.+28     	; 0x798 <Timer__HMSHandler+0x4c>
 77c:	82 81       	ldd	r24, Z+2	; 0x02
 77e:	88 23       	and	r24, r24
 780:	21 f0       	breq	.+8      	; 0x78a <Timer__HMSHandler+0x3e>
 782:	81 50       	subi	r24, 0x01	; 1
 784:	82 83       	std	Z+2, r24	; 0x02
 786:	43 83       	std	Z+3, r20	; 0x03
 788:	07 c0       	rjmp	.+14     	; 0x798 <Timer__HMSHandler+0x4c>
 78a:	81 81       	ldd	r24, Z+1	; 0x01
 78c:	88 23       	and	r24, r24
 78e:	21 f0       	breq	.+8      	; 0x798 <Timer__HMSHandler+0x4c>
 790:	81 50       	subi	r24, 0x01	; 1
 792:	81 83       	std	Z+1, r24	; 0x01
 794:	42 83       	std	Z+2, r20	; 0x02
 796:	43 83       	std	Z+3, r20	; 0x03
 798:	34 96       	adiw	r30, 0x04	; 4
 79a:	e2 17       	cp	r30, r18
 79c:	f3 07       	cpc	r31, r19
 79e:	f9 f6       	brne	.-66     	; 0x75e <Timer__HMSHandler+0x12>
 7a0:	10 92 52 01 	sts	0x0152, r1	; 0x800152 <__data_end>
 7a4:	08 95       	ret

000007a6 <Timer__HMSSet>:
 7a6:	87 30       	cpi	r24, 0x07	; 7
 7a8:	c0 f4       	brcc	.+48     	; 0x7da <Timer__HMSSet+0x34>
 7aa:	90 e0       	ldi	r25, 0x00	; 0
 7ac:	fc 01       	movw	r30, r24
 7ae:	ee 0f       	add	r30, r30
 7b0:	ff 1f       	adc	r31, r31
 7b2:	ee 0f       	add	r30, r30
 7b4:	ff 1f       	adc	r31, r31
 7b6:	e2 58       	subi	r30, 0x82	; 130
 7b8:	fe 4f       	sbci	r31, 0xFE	; 254
 7ba:	10 82       	st	Z, r1
 7bc:	61 83       	std	Z+1, r22	; 0x01
 7be:	42 83       	std	Z+2, r20	; 0x02
 7c0:	23 83       	std	Z+3, r18	; 0x03
 7c2:	24 2b       	or	r18, r20
 7c4:	62 2b       	or	r22, r18
 7c6:	49 f0       	breq	.+18     	; 0x7da <Timer__HMSSet+0x34>
 7c8:	88 0f       	add	r24, r24
 7ca:	99 1f       	adc	r25, r25
 7cc:	88 0f       	add	r24, r24
 7ce:	99 1f       	adc	r25, r25
 7d0:	fc 01       	movw	r30, r24
 7d2:	e2 58       	subi	r30, 0x82	; 130
 7d4:	fe 4f       	sbci	r31, 0xFE	; 254
 7d6:	81 e0       	ldi	r24, 0x01	; 1
 7d8:	80 83       	st	Z, r24
 7da:	08 95       	ret

000007dc <Timer__HMSGetStatus>:
 7dc:	24 e0       	ldi	r18, 0x04	; 4
 7de:	82 9f       	mul	r24, r18
 7e0:	c0 01       	movw	r24, r0
 7e2:	11 24       	eor	r1, r1
 7e4:	fc 01       	movw	r30, r24
 7e6:	e2 58       	subi	r30, 0x82	; 130
 7e8:	fe 4f       	sbci	r31, 0xFE	; 254
 7ea:	80 81       	ld	r24, Z
 7ec:	08 95       	ret

000007ee <__vector_13>:

//=====================================================================================================================
//-------------------------------------- Interruption  Functions ------------------------------------------------------------
//=====================================================================================================================
ISR(TIMER1_OVF_vect)                              //interrupção do TIMER1 (pg.158)
{   if(flag_seg == 0)
 7ee:	1f 92       	push	r1
 7f0:	0f 92       	push	r0
 7f2:	0f b6       	in	r0, 0x3f	; 63
 7f4:	0f 92       	push	r0
 7f6:	11 24       	eor	r1, r1
 7f8:	8f 93       	push	r24
 7fa:	9f 93       	push	r25
 7fc:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <__data_end>
 800:	81 11       	cpse	r24, r1
 802:	09 c0       	rjmp	.+18     	; 0x816 <__vector_13+0x28>
	    {
		TCNT1 = 62500;   //para contar a cada 250ms
 804:	84 e2       	ldi	r24, 0x24	; 36
 806:	94 ef       	ldi	r25, 0xF4	; 244
 808:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
 80c:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
		flag_seg =1;    //seta o flag indicando que passou 1 segundo   
 810:	81 e0       	ldi	r24, 0x01	; 1
 812:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <__data_end>
	    }
}
 816:	9f 91       	pop	r25
 818:	8f 91       	pop	r24
 81a:	0f 90       	pop	r0
 81c:	0f be       	out	0x3f, r0	; 63
 81e:	0f 90       	pop	r0
 820:	1f 90       	pop	r1
 822:	18 95       	reti

00000824 <Hal__SetLed>:
 *  output: Respective LED
 *  value: ON/OFF
 */
void Hal__SetLed(LED_OUTPUT_TYPE output,unsigned char value)
{
	Hal_Leds_Buffer[output] = LED_OFF;
 824:	90 e0       	ldi	r25, 0x00	; 0
	if (value == ACENDE_LED)
 826:	66 23       	and	r22, r22
 828:	31 f0       	breq	.+12     	; 0x836 <Hal__SetLed+0x12>
 *  output: Respective LED
 *  value: ON/OFF
 */
void Hal__SetLed(LED_OUTPUT_TYPE output,unsigned char value)
{
	Hal_Leds_Buffer[output] = LED_OFF;
 82a:	fc 01       	movw	r30, r24
 82c:	e5 56       	subi	r30, 0x65	; 101
 82e:	fe 4f       	sbci	r31, 0xFE	; 254
 830:	21 e0       	ldi	r18, 0x01	; 1
 832:	20 83       	st	Z, r18
 834:	08 95       	ret
	if (value == ACENDE_LED)
	   Hal_Leds_Buffer[output] = LED_ON;
 836:	fc 01       	movw	r30, r24
 838:	e5 56       	subi	r30, 0x65	; 101
 83a:	fe 4f       	sbci	r31, 0xFE	; 254
 83c:	10 82       	st	Z, r1
 83e:	08 95       	ret

00000840 <Hal__SetAllLeds>:
 *  value ON/OFF
 *  ON: To turn All LEDs ON 
 *  OFF: To turn All LEDs OFF
 */
void Hal__SetAllLeds(unsigned char value)
{
 840:	eb e9       	ldi	r30, 0x9B	; 155
 842:	f1 e0       	ldi	r31, 0x01	; 1
 844:	2f e9       	ldi	r18, 0x9F	; 159
 846:	31 e0       	ldi	r19, 0x01	; 1
	LED_OUTPUT_TYPE index;

	for(index = 0; index < NUM_OF_LEDS; index++)
		{
		Hal_Leds_Buffer[index] = LED_OFF;
 848:	91 e0       	ldi	r25, 0x01	; 1
		if (value == ACENDE_LED)
 84a:	88 23       	and	r24, r24
 84c:	11 f0       	breq	.+4      	; 0x852 <Hal__SetAllLeds+0x12>
{
	LED_OUTPUT_TYPE index;

	for(index = 0; index < NUM_OF_LEDS; index++)
		{
		Hal_Leds_Buffer[index] = LED_OFF;
 84e:	90 83       	st	Z, r25
 850:	01 c0       	rjmp	.+2      	; 0x854 <Hal__SetAllLeds+0x14>
		if (value == ACENDE_LED)
			Hal_Leds_Buffer[index] = LED_ON;
 852:	10 82       	st	Z, r1
 854:	31 96       	adiw	r30, 0x01	; 1
 */
void Hal__SetAllLeds(unsigned char value)
{
	LED_OUTPUT_TYPE index;

	for(index = 0; index < NUM_OF_LEDS; index++)
 856:	e2 17       	cp	r30, r18
 858:	f3 07       	cpc	r31, r19
 85a:	b9 f7       	brne	.-18     	; 0x84a <Hal__SetAllLeds+0xa>
		{
		Hal_Leds_Buffer[index] = LED_OFF;
		if (value == ACENDE_LED)
			Hal_Leds_Buffer[index] = LED_ON;
		}
}
 85c:	08 95       	ret

0000085e <Hal__Initialize>:
/*
 * Call this function on initialize tasks before use any function of this module
 * This function will properly configure all pins before use it
 */
void Hal__Initialize(void)
{
 85e:	0f 93       	push	r16
 860:	1f 93       	push	r17
 862:	cf 93       	push	r28
 864:	df 93       	push	r29
 866:	ce e0       	ldi	r28, 0x0E	; 14
 868:	d1 e0       	ldi	r29, 0x01	; 1
 86a:	06 e1       	ldi	r16, 0x16	; 22
 86c:	11 e0       	ldi	r17, 0x01	; 1
	
	
	// LEDs Configuration
	for(led_index = 0; led_index < NUM_OF_LEDS; led_index++)
	{
	Gpio__PinConfig(LED_GPIO[led_index].port, LED_GPIO[led_index].pin, OUTPUT_DIGITAL);
 86e:	41 e0       	ldi	r20, 0x01	; 1
 870:	69 81       	ldd	r22, Y+1	; 0x01
 872:	88 81       	ld	r24, Y
 874:	0e 94 15 02 	call	0x42a	; 0x42a <Gpio__PinConfig>
 878:	22 96       	adiw	r28, 0x02	; 2
	KEY_INPUT_TYPE key_index;
	ANALOG_INPUT_TYPE analog_index;
	
	
	// LEDs Configuration
	for(led_index = 0; led_index < NUM_OF_LEDS; led_index++)
 87a:	c0 17       	cp	r28, r16
 87c:	d1 07       	cpc	r29, r17
 87e:	b9 f7       	brne	.-18     	; 0x86e <Hal__Initialize+0x10>
 880:	c6 e0       	ldi	r28, 0x06	; 6
 882:	d1 e0       	ldi	r29, 0x01	; 1
 884:	0e e0       	ldi	r16, 0x0E	; 14
 886:	11 e0       	ldi	r17, 0x01	; 1
	
	
	// Keys Configuration
	for(key_index = 0; key_index < NUM_OF_KEYS; key_index++)
	{
	Gpio__PinConfig(KEYS_GPIO[key_index].port, KEYS_GPIO[key_index].pin, INPUT_DIGITAL_PULLUP);
 888:	40 e0       	ldi	r20, 0x00	; 0
 88a:	69 81       	ldd	r22, Y+1	; 0x01
 88c:	88 81       	ld	r24, Y
 88e:	0e 94 15 02 	call	0x42a	; 0x42a <Gpio__PinConfig>
 892:	22 96       	adiw	r28, 0x02	; 2
	Gpio__PinConfig(LED_GPIO[led_index].port, LED_GPIO[led_index].pin, OUTPUT_DIGITAL);
	}
	
	
	// Keys Configuration
	for(key_index = 0; key_index < NUM_OF_KEYS; key_index++)
 894:	c0 17       	cp	r28, r16
 896:	d1 07       	cpc	r29, r17
 898:	b9 f7       	brne	.-18     	; 0x888 <Hal__Initialize+0x2a>
	{
	Gpio__PinConfig(KEYS_GPIO[key_index].port, KEYS_GPIO[key_index].pin, INPUT_DIGITAL_PULLUP);
	}
	
	// Apaga todos os leds
	Hal__SetAllLeds(LED_OFF);   //apaga todos leds
 89a:	81 e0       	ldi	r24, 0x01	; 1
 89c:	0e 94 20 04 	call	0x840	; 0x840 <Hal__SetAllLeds>
	
	
	// Configuração do 7 segmentos
	
	bitWrite(DDRD, 4, OUTPUT_DIGITAL);
 8a0:	54 9a       	sbi	0x0a, 4	; 10
	bitWrite(DDRD, 7, OUTPUT_DIGITAL);
 8a2:	57 9a       	sbi	0x0a, 7	; 10
	bitWrite(DDRB, 0, OUTPUT_DIGITAL);
 8a4:	20 9a       	sbi	0x04, 0	; 4
	
	
	// Analog Inputs Configuration - modo de conversão e resolução e inicializa os buffers de várias leitura do ADC
	ADC__ConfigModes(MODE_10BITS,AD_SINGLE_CONVERSION);
 8a6:	60 e0       	ldi	r22, 0x00	; 0
 8a8:	81 e0       	ldi	r24, 0x01	; 1
 8aa:	0e 94 de 01 	call	0x3bc	; 0x3bc <ADC__ConfigModes>
	AD_Mux_State = MUX_INIT;
 8ae:	10 92 b7 01 	sts	0x01B7, r1	; 0x8001b7 <AD_Mux_State>
	AD_Channel = POT_INT;  // eqivalente ao canal AD0 do arduino
 8b2:	10 92 9a 01 	sts	0x019A, r1	; 0x80019a <AD_Channel>
 8b6:	e0 e4       	ldi	r30, 0x40	; 64
 8b8:	f1 e0       	ldi	r31, 0x01	; 1
 8ba:	8b ea       	ldi	r24, 0xAB	; 171
 8bc:	91 e0       	ldi	r25, 0x01	; 1
 8be:	cf eb       	ldi	r28, 0xBF	; 191
 8c0:	d1 e0       	ldi	r29, 0x01	; 1
 8c2:	68 eb       	ldi	r22, 0xB8	; 184
 8c4:	71 e0       	ldi	r23, 0x01	; 1
 8c6:	46 e4       	ldi	r20, 0x46	; 70
 8c8:	51 e0       	ldi	r21, 0x01	; 1

	for(analog_index = 0; analog_index < NUM_OF_ANALOG_INPUT; analog_index++)
	{
		if(AD_Enable_Table[analog_index] == ENABLED)
 8ca:	21 91       	ld	r18, Z+
 8cc:	21 30       	cpi	r18, 0x01	; 1
 8ce:	39 f4       	brne	.+14     	; 0x8de <Hal__Initialize+0x80>
		{
			Hal_Analog_Inputs[analog_index] = 0;   // zera o buffer de valor de cada canal
 8d0:	dc 01       	movw	r26, r24
 8d2:	1d 92       	st	X+, r1
 8d4:	1c 92       	st	X, r1
			AD_Accumulator[analog_index] = 0;
 8d6:	19 82       	std	Y+1, r1	; 0x01
 8d8:	18 82       	st	Y, r1
			AD_Counter[analog_index] = 0;
 8da:	db 01       	movw	r26, r22
 8dc:	1c 92       	st	X, r1
 8de:	02 96       	adiw	r24, 0x02	; 2
 8e0:	22 96       	adiw	r28, 0x02	; 2
 8e2:	6f 5f       	subi	r22, 0xFF	; 255
 8e4:	7f 4f       	sbci	r23, 0xFF	; 255
	// Analog Inputs Configuration - modo de conversão e resolução e inicializa os buffers de várias leitura do ADC
	ADC__ConfigModes(MODE_10BITS,AD_SINGLE_CONVERSION);
	AD_Mux_State = MUX_INIT;
	AD_Channel = POT_INT;  // eqivalente ao canal AD0 do arduino

	for(analog_index = 0; analog_index < NUM_OF_ANALOG_INPUT; analog_index++)
 8e6:	e4 17       	cp	r30, r20
 8e8:	f5 07       	cpc	r31, r21
 8ea:	79 f7       	brne	.-34     	; 0x8ca <Hal__Initialize+0x6c>
	//#if (USE_BUZZER == ENABLED)

	//Pwm__SetTCFrequency(PWM_TC2, BUZZER_DEFAULT_FREQ);
	//Pwm__SetDutyCycle(PWM5,BUZZER_DEFAULT_ON_DUTY);
	//#endif	//(USE_BUZZER == ENABLED)
	}
 8ec:	df 91       	pop	r29
 8ee:	cf 91       	pop	r28
 8f0:	1f 91       	pop	r17
 8f2:	0f 91       	pop	r16
 8f4:	08 95       	ret

000008f6 <Hal__ReadKey>:
 *  Use this function to read the status of a specific key
 *  key: desired key to be read
 *  return: TRUE if key is pressed otherwise FALSE
 */
unsigned char Hal__ReadKey(KEY_INPUT_TYPE key)
{
 8f6:	28 2f       	mov	r18, r24
	if (key < NUM_OF_KEYS)
 8f8:	84 30       	cpi	r24, 0x04	; 4
 8fa:	70 f4       	brcc	.+28     	; 0x918 <__stack+0x19>
	   {
	   if (BIT_TEST(Hal_Keys_Buffer, key) > 0)
	      return (TRUE);
 8fc:	80 91 be 01 	lds	r24, 0x01BE	; 0x8001be <Hal_Keys_Buffer>
 900:	90 e0       	ldi	r25, 0x00	; 0
 902:	a0 e0       	ldi	r26, 0x00	; 0
 904:	b0 e0       	ldi	r27, 0x00	; 0
 906:	04 c0       	rjmp	.+8      	; 0x910 <__stack+0x11>
 908:	b6 95       	lsr	r27
 90a:	a7 95       	ror	r26
 90c:	97 95       	ror	r25
 90e:	87 95       	ror	r24
 910:	2a 95       	dec	r18
 912:	d2 f7       	brpl	.-12     	; 0x908 <__stack+0x9>
 914:	81 70       	andi	r24, 0x01	; 1
 916:	08 95       	ret
	   }
	 return (FALSE);
 918:	80 e0       	ldi	r24, 0x00	; 0
}
 91a:	08 95       	ret

0000091c <Hal__WriteValtoSegment>:
 *  
 */
void Hal__WriteValtoSegment(char Segment, char *Value)
{

SevenSeg_WriteValueToSegment(Segment, Value);
 91c:	0e 94 c3 05 	call	0xb86	; 0xb86 <SevenSeg_WriteValueToSegment>
 920:	08 95       	ret

00000922 <Hal__GetAnalogInput>:
 *  Use this function to read a value ADC in the selected channel
 *  
 */
unsigned short int Hal__GetAnalogInput(ANALOG_INPUT_TYPE input)
{
if(input < NUM_OF_ANALOG_INPUT)
 922:	86 30       	cpi	r24, 0x06	; 6
 924:	48 f4       	brcc	.+18     	; 0x938 <Hal__GetAnalogInput+0x16>
   return Hal_Analog_Inputs[input];  // retorna o valor no buffer HAL_AnalogInputs do canal solicitado
 926:	e8 2f       	mov	r30, r24
 928:	f0 e0       	ldi	r31, 0x00	; 0
 92a:	ee 0f       	add	r30, r30
 92c:	ff 1f       	adc	r31, r31
 92e:	e5 55       	subi	r30, 0x55	; 85
 930:	fe 4f       	sbci	r31, 0xFE	; 254
 932:	80 81       	ld	r24, Z
 934:	91 81       	ldd	r25, Z+1	; 0x01
 936:	08 95       	ret
}
 938:	08 95       	ret

0000093a <Hal__SetBuzzer>:
 */
void Hal__SetBuzzer(unsigned char state)
{
#if (USE_BUZZER == ENABLED)

	if(state > 0)
 93a:	88 23       	and	r24, r24
 93c:	29 f0       	breq	.+10     	; 0x948 <Hal__SetBuzzer+0xe>
		{
		//BuzzerRequest = ON;
		Pwm__SetDutyCycle(PWM5,BUZZER_DEFAULT_ON_DUTY);
 93e:	62 e3       	ldi	r22, 0x32	; 50
 940:	85 e0       	ldi	r24, 0x05	; 5
 942:	0e 94 3d 03 	call	0x67a	; 0x67a <Pwm__SetDutyCycle>
 946:	08 95       	ret
		}
	else
		{
		Pwm__SetDutyCycle(PWM5,BUZZER_OFF_DUTY);
 948:	60 e0       	ldi	r22, 0x00	; 0
 94a:	85 e0       	ldi	r24, 0x05	; 5
 94c:	0e 94 3d 03 	call	0x67a	; 0x67a <Pwm__SetDutyCycle>
 950:	08 95       	ret

00000952 <Hal__SetBuzzerFreq>:
 */
void Hal__SetBuzzerFreq(unsigned short int frequency)
{
#if (USE_BUZZER == ENABLED)
	
	if(frequency >= 2000)
 952:	80 3d       	cpi	r24, 0xD0	; 208
 954:	27 e0       	ldi	r18, 0x07	; 7
 956:	92 07       	cpc	r25, r18
 958:	20 f0       	brcs	.+8      	; 0x962 <Hal__SetBuzzerFreq+0x10>
 95a:	bc 01       	movw	r22, r24
		{
		Pwm__SetTCFrequency(PWM_TC2, frequency);
 95c:	82 e0       	ldi	r24, 0x02	; 2
 95e:	0e 94 89 02 	call	0x512	; 0x512 <Pwm__SetTCFrequency>
 962:	08 95       	ret

00000964 <LEDsUpdate>:
//---------------------------------------------------------------------------------------------------------------------
/**
 *  This local function update the LEDs status
 */
void LEDsUpdate(void)
{
 964:	af 92       	push	r10
 966:	bf 92       	push	r11
 968:	cf 92       	push	r12
 96a:	df 92       	push	r13
 96c:	ef 92       	push	r14
 96e:	ff 92       	push	r15
 970:	0f 93       	push	r16
 972:	1f 93       	push	r17
 974:	cf 93       	push	r28
 976:	df 93       	push	r29
 978:	ca e4       	ldi	r28, 0x4A	; 74
 97a:	d1 e0       	ldi	r29, 0x01	; 1
 97c:	0f 2e       	mov	r0, r31
 97e:	fb e9       	ldi	r31, 0x9B	; 155
 980:	ef 2e       	mov	r14, r31
 982:	f1 e0       	ldi	r31, 0x01	; 1
 984:	ff 2e       	mov	r15, r31
 986:	f0 2d       	mov	r31, r0
 988:	0e e0       	ldi	r16, 0x0E	; 14
 98a:	11 e0       	ldi	r17, 0x01	; 1
 98c:	0f 2e       	mov	r0, r31
 98e:	fe e4       	ldi	r31, 0x4E	; 78
 990:	cf 2e       	mov	r12, r31
 992:	f1 e0       	ldi	r31, 0x01	; 1
 994:	df 2e       	mov	r13, r31
 996:	f0 2d       	mov	r31, r0
			value = LED_ON;
			if(Hal_Leds_Buffer[index] > 0)
			{
				value = LED_OFF;
			}
			Gpio__PinWrite(LED_GPIO[index].port, LED_GPIO[index].pin, value);
 998:	bb 24       	eor	r11, r11
 99a:	b3 94       	inc	r11
 99c:	a1 2c       	mov	r10, r1
	unsigned char value;
	
	//LEDs Update
	for(index = 0; index < NUM_OF_LEDS; index++)
	{
		if(Leds_Enable_Table[index] == ENABLED) // Update GPIO only if current LED is configured to be used
 99e:	89 91       	ld	r24, Y+
 9a0:	81 30       	cpi	r24, 0x01	; 1
 9a2:	59 f4       	brne	.+22     	; 0x9ba <LEDsUpdate+0x56>
 9a4:	f8 01       	movw	r30, r16
			value = LED_ON;
			if(Hal_Leds_Buffer[index] > 0)
			{
				value = LED_OFF;
			}
			Gpio__PinWrite(LED_GPIO[index].port, LED_GPIO[index].pin, value);
 9a6:	4b 2d       	mov	r20, r11
 9a8:	d7 01       	movw	r26, r14
 9aa:	8c 91       	ld	r24, X
 9ac:	81 11       	cpse	r24, r1
 9ae:	01 c0       	rjmp	.+2      	; 0x9b2 <LEDsUpdate+0x4e>
 9b0:	4a 2d       	mov	r20, r10
 9b2:	61 81       	ldd	r22, Z+1	; 0x01
 9b4:	80 81       	ld	r24, Z
 9b6:	0e 94 4b 02 	call	0x496	; 0x496 <Gpio__PinWrite>
 9ba:	bf ef       	ldi	r27, 0xFF	; 255
 9bc:	eb 1a       	sub	r14, r27
 9be:	fb 0a       	sbc	r15, r27
 9c0:	0e 5f       	subi	r16, 0xFE	; 254
 9c2:	1f 4f       	sbci	r17, 0xFF	; 255
{
	unsigned char index;
	unsigned char value;
	
	//LEDs Update
	for(index = 0; index < NUM_OF_LEDS; index++)
 9c4:	cc 15       	cp	r28, r12
 9c6:	dd 05       	cpc	r29, r13
 9c8:	51 f7       	brne	.-44     	; 0x99e <LEDsUpdate+0x3a>
				value = LED_OFF;
			}
			Gpio__PinWrite(LED_GPIO[index].port, LED_GPIO[index].pin, value);
		}
	}
}
 9ca:	df 91       	pop	r29
 9cc:	cf 91       	pop	r28
 9ce:	1f 91       	pop	r17
 9d0:	0f 91       	pop	r16
 9d2:	ff 90       	pop	r15
 9d4:	ef 90       	pop	r14
 9d6:	df 90       	pop	r13
 9d8:	cf 90       	pop	r12
 9da:	bf 90       	pop	r11
 9dc:	af 90       	pop	r10
 9de:	08 95       	ret

000009e0 <KeysRead>:
/**
 *  This local function reads the keys input and update the Hal_Keys_Buffer
 */

void KeysRead(void)
{
 9e0:	8f 92       	push	r8
 9e2:	9f 92       	push	r9
 9e4:	af 92       	push	r10
 9e6:	bf 92       	push	r11
 9e8:	df 92       	push	r13
 9ea:	ef 92       	push	r14
 9ec:	ff 92       	push	r15
 9ee:	0f 93       	push	r16
 9f0:	1f 93       	push	r17
 9f2:	cf 93       	push	r28
 9f4:	df 93       	push	r29
 9f6:	0f 2e       	mov	r0, r31
 9f8:	f6 e4       	ldi	r31, 0x46	; 70
 9fa:	ef 2e       	mov	r14, r31
 9fc:	f1 e0       	ldi	r31, 0x01	; 1
 9fe:	ff 2e       	mov	r15, r31
 a00:	f0 2d       	mov	r31, r0
 a02:	06 e0       	ldi	r16, 0x06	; 6
 a04:	11 e0       	ldi	r17, 0x01	; 1
 a06:	c0 e0       	ldi	r28, 0x00	; 0
 a08:	d0 e0       	ldi	r29, 0x00	; 0
			{
				BIT_SET(Hal_Keys_Buffer,key_index);
			}
			else
			{
				BIT_CLR(Hal_Keys_Buffer,key_index);
 a0a:	81 2c       	mov	r8, r1
 a0c:	91 2c       	mov	r9, r1
 a0e:	54 01       	movw	r10, r8
 a10:	83 94       	inc	r8
	KEY_INPUT_TYPE key_index;
	unsigned char value;
	
	for(key_index = KEY_0; key_index < NUM_OF_KEYS; key_index++)
	{
		if(Keys_Enable_Table[key_index] == ENABLED)
 a12:	f7 01       	movw	r30, r14
 a14:	81 91       	ld	r24, Z+
 a16:	7f 01       	movw	r14, r30
 a18:	81 30       	cpi	r24, 0x01	; 1
 a1a:	39 f5       	brne	.+78     	; 0xa6a <KeysRead+0x8a>
		{
			value = Gpio__PinRead(KEYS_GPIO[key_index].port, KEYS_GPIO[key_index].pin);
 a1c:	f8 01       	movw	r30, r16
 a1e:	61 81       	ldd	r22, Z+1	; 0x01
 a20:	80 81       	ld	r24, Z
 a22:	0e 94 75 02 	call	0x4ea	; 0x4ea <Gpio__PinRead>
			if(value == KEY_PRESSED)
 a26:	81 11       	cpse	r24, r1
 a28:	10 c0       	rjmp	.+32     	; 0xa4a <KeysRead+0x6a>
			{
				BIT_SET(Hal_Keys_Buffer,key_index);
 a2a:	d5 01       	movw	r26, r10
 a2c:	c4 01       	movw	r24, r8
 a2e:	0c 2e       	mov	r0, r28
 a30:	04 c0       	rjmp	.+8      	; 0xa3a <KeysRead+0x5a>
 a32:	88 0f       	add	r24, r24
 a34:	99 1f       	adc	r25, r25
 a36:	aa 1f       	adc	r26, r26
 a38:	bb 1f       	adc	r27, r27
 a3a:	0a 94       	dec	r0
 a3c:	d2 f7       	brpl	.-12     	; 0xa32 <KeysRead+0x52>
 a3e:	20 91 be 01 	lds	r18, 0x01BE	; 0x8001be <Hal_Keys_Buffer>
 a42:	82 2b       	or	r24, r18
 a44:	80 93 be 01 	sts	0x01BE, r24	; 0x8001be <Hal_Keys_Buffer>
 a48:	10 c0       	rjmp	.+32     	; 0xa6a <KeysRead+0x8a>
			}
			else
			{
				BIT_CLR(Hal_Keys_Buffer,key_index);
 a4a:	d5 01       	movw	r26, r10
 a4c:	c4 01       	movw	r24, r8
 a4e:	0c 2e       	mov	r0, r28
 a50:	04 c0       	rjmp	.+8      	; 0xa5a <KeysRead+0x7a>
 a52:	88 0f       	add	r24, r24
 a54:	99 1f       	adc	r25, r25
 a56:	aa 1f       	adc	r26, r26
 a58:	bb 1f       	adc	r27, r27
 a5a:	0a 94       	dec	r0
 a5c:	d2 f7       	brpl	.-12     	; 0xa52 <KeysRead+0x72>
 a5e:	80 95       	com	r24
 a60:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <Hal_Keys_Buffer>
 a64:	89 23       	and	r24, r25
 a66:	80 93 be 01 	sts	0x01BE, r24	; 0x8001be <Hal_Keys_Buffer>
 a6a:	21 96       	adiw	r28, 0x01	; 1
 a6c:	0e 5f       	subi	r16, 0xFE	; 254
 a6e:	1f 4f       	sbci	r17, 0xFF	; 255
{
	//Keys read
	KEY_INPUT_TYPE key_index;
	unsigned char value;
	
	for(key_index = KEY_0; key_index < NUM_OF_KEYS; key_index++)
 a70:	c4 30       	cpi	r28, 0x04	; 4
 a72:	d1 05       	cpc	r29, r1
 a74:	71 f6       	brne	.-100    	; 0xa12 <KeysRead+0x32>

			}
		}
	}

}
 a76:	df 91       	pop	r29
 a78:	cf 91       	pop	r28
 a7a:	1f 91       	pop	r17
 a7c:	0f 91       	pop	r16
 a7e:	ff 90       	pop	r15
 a80:	ef 90       	pop	r14
 a82:	df 90       	pop	r13
 a84:	bf 90       	pop	r11
 a86:	af 90       	pop	r10
 a88:	9f 90       	pop	r9
 a8a:	8f 90       	pop	r8
 a8c:	08 95       	ret

00000a8e <Hal__FastHandler>:
 *  This function shall run in background in the main loop 
 *  Call rate: 1ms, 5ms, 10ms, ...PARA GPIO
 */
void Hal__FastHandler(void)
{
	LEDsUpdate();
 a8e:	0e 94 b2 04 	call	0x964	; 0x964 <LEDsUpdate>
	KeysRead();
 a92:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <KeysRead>
 a96:	08 95       	ret

00000a98 <ADProcess>:
 *  This local function reads the analog input and update the buffer Hal_Analog_inputs[]
    ROTINA ONDE SÃO FEITAS AS VÁRIAS LEITURAS DE AMOSTRAGEM (NUM_AD_SAMPLES) E DEPOIS TIRADO A MÉDIA DOS  VALORES
****/

void ADProcess(void)
{
 a98:	cf 93       	push	r28
 a9a:	df 93       	push	r29
switch (AD_Mux_State)
 a9c:	80 91 b7 01 	lds	r24, 0x01B7	; 0x8001b7 <AD_Mux_State>
 aa0:	81 30       	cpi	r24, 0x01	; 1
 aa2:	19 f0       	breq	.+6      	; 0xaaa <ADProcess+0x12>
 aa4:	83 30       	cpi	r24, 0x03	; 3
 aa6:	31 f0       	breq	.+12     	; 0xab4 <ADProcess+0x1c>
 aa8:	5d c0       	rjmp	.+186    	; 0xb64 <ADProcess+0xcc>
  {
  case MUX_INIT:
    break;
  case MUX_AD_CONFIG:
    ADC__ConfigModes(MODE_10BITS,AD_SINGLE_CONVERSION);
 aaa:	60 e0       	ldi	r22, 0x00	; 0
 aac:	81 e0       	ldi	r24, 0x01	; 1
 aae:	0e 94 de 01 	call	0x3bc	; 0x3bc <ADC__ConfigModes>
    break;
 ab2:	58 c0       	rjmp	.+176    	; 0xb64 <ADProcess+0xcc>
  case MUX_DUMMY_STATE_1: //=> This state is placed in order to assure the raising time for ADC reading
    break;
  case MUX_AD_READ:
      if(AD_Enable_Table[AD_Channel] == ENABLED)
 ab4:	c0 91 9a 01 	lds	r28, 0x019A	; 0x80019a <AD_Channel>
 ab8:	d0 e0       	ldi	r29, 0x00	; 0
 aba:	fe 01       	movw	r30, r28
 abc:	e0 5c       	subi	r30, 0xC0	; 192
 abe:	fe 4f       	sbci	r31, 0xFE	; 254
 ac0:	80 81       	ld	r24, Z
 ac2:	81 30       	cpi	r24, 0x01	; 1
 ac4:	09 f0       	breq	.+2      	; 0xac8 <ADProcess+0x30>
 ac6:	44 c0       	rjmp	.+136    	; 0xb50 <ADProcess+0xb8>
         {
         if(AD_Counter[AD_Channel] < NUM_AD_SAMPLES)
 ac8:	fe 01       	movw	r30, r28
 aca:	e8 54       	subi	r30, 0x48	; 72
 acc:	fe 4f       	sbci	r31, 0xFE	; 254
 ace:	80 81       	ld	r24, Z
 ad0:	88 30       	cpi	r24, 0x08	; 8
 ad2:	38 f5       	brcc	.+78     	; 0xb22 <ADProcess+0x8a>
             {
             AD_Sample[AD_Channel] = ADC__GetValue(AD_Channel_Table[AD_Channel]);
 ad4:	fe 01       	movw	r30, r28
 ad6:	e6 5c       	subi	r30, 0xC6	; 198
 ad8:	fe 4f       	sbci	r31, 0xFE	; 254
 ada:	80 81       	ld	r24, Z
 adc:	0e 94 07 02 	call	0x40e	; 0x40e <ADC__GetValue>
 ae0:	cc 0f       	add	r28, r28
 ae2:	dd 1f       	adc	r29, r29
 ae4:	c1 56       	subi	r28, 0x61	; 97
 ae6:	de 4f       	sbci	r29, 0xFE	; 254
 ae8:	99 83       	std	Y+1, r25	; 0x01
 aea:	88 83       	st	Y, r24
             AD_Accumulator[AD_Channel] += AD_Sample[AD_Channel];
 aec:	e0 91 9a 01 	lds	r30, 0x019A	; 0x80019a <AD_Channel>
 af0:	f0 e0       	ldi	r31, 0x00	; 0
 af2:	cf 01       	movw	r24, r30
 af4:	88 0f       	add	r24, r24
 af6:	99 1f       	adc	r25, r25
 af8:	dc 01       	movw	r26, r24
 afa:	a1 54       	subi	r26, 0x41	; 65
 afc:	be 4f       	sbci	r27, 0xFE	; 254
 afe:	ec 01       	movw	r28, r24
 b00:	c1 56       	subi	r28, 0x61	; 97
 b02:	de 4f       	sbci	r29, 0xFE	; 254
 b04:	2d 91       	ld	r18, X+
 b06:	3c 91       	ld	r19, X
 b08:	11 97       	sbiw	r26, 0x01	; 1
 b0a:	88 81       	ld	r24, Y
 b0c:	99 81       	ldd	r25, Y+1	; 0x01
 b0e:	82 0f       	add	r24, r18
 b10:	93 1f       	adc	r25, r19
 b12:	8d 93       	st	X+, r24
 b14:	9c 93       	st	X, r25
             AD_Counter[AD_Channel]++;
 b16:	e8 54       	subi	r30, 0x48	; 72
 b18:	fe 4f       	sbci	r31, 0xFE	; 254
 b1a:	80 81       	ld	r24, Z
 b1c:	8f 5f       	subi	r24, 0xFF	; 255
 b1e:	80 83       	st	Z, r24
 b20:	17 c0       	rjmp	.+46     	; 0xb50 <ADProcess+0xb8>
             }
         else
            {  // O Buffer Hal_Analog_Inputs[] é AQUI atualizado!
            Hal_Analog_Inputs[AD_Channel] = (unsigned short int)(AD_Accumulator[AD_Channel]/NUM_AD_SAMPLES);
 b22:	fe 01       	movw	r30, r28
 b24:	ee 0f       	add	r30, r30
 b26:	ff 1f       	adc	r31, r31
 b28:	df 01       	movw	r26, r30
 b2a:	a5 55       	subi	r26, 0x55	; 85
 b2c:	be 4f       	sbci	r27, 0xFE	; 254
 b2e:	e1 54       	subi	r30, 0x41	; 65
 b30:	fe 4f       	sbci	r31, 0xFE	; 254
 b32:	80 81       	ld	r24, Z
 b34:	91 81       	ldd	r25, Z+1	; 0x01
 b36:	96 95       	lsr	r25
 b38:	87 95       	ror	r24
 b3a:	96 95       	lsr	r25
 b3c:	87 95       	ror	r24
 b3e:	96 95       	lsr	r25
 b40:	87 95       	ror	r24
 b42:	8d 93       	st	X+, r24
 b44:	9c 93       	st	X, r25
            AD_Accumulator[AD_Channel] = 0;
 b46:	11 82       	std	Z+1, r1	; 0x01
 b48:	10 82       	st	Z, r1
            AD_Counter[AD_Channel] = 0;
 b4a:	c8 54       	subi	r28, 0x48	; 72
 b4c:	de 4f       	sbci	r29, 0xFE	; 254
 b4e:	18 82       	st	Y, r1
            }
          } 
       AD_Channel++;
 b50:	80 91 9a 01 	lds	r24, 0x019A	; 0x80019a <AD_Channel>
 b54:	8f 5f       	subi	r24, 0xFF	; 255
       if(AD_Channel >= NUM_OF_ANALOG_INPUT)
 b56:	86 30       	cpi	r24, 0x06	; 6
 b58:	18 f4       	brcc	.+6      	; 0xb60 <ADProcess+0xc8>
            Hal_Analog_Inputs[AD_Channel] = (unsigned short int)(AD_Accumulator[AD_Channel]/NUM_AD_SAMPLES);
            AD_Accumulator[AD_Channel] = 0;
            AD_Counter[AD_Channel] = 0;
            }
          } 
       AD_Channel++;
 b5a:	80 93 9a 01 	sts	0x019A, r24	; 0x80019a <AD_Channel>
 b5e:	02 c0       	rjmp	.+4      	; 0xb64 <ADProcess+0xcc>
       if(AD_Channel >= NUM_OF_ANALOG_INPUT)
         {
         AD_Channel = 0;
 b60:	10 92 9a 01 	sts	0x019A, r1	; 0x80019a <AD_Channel>
       break;
  default:
       break;
  }

AD_Mux_State++;                                // Ticking the state machine.
 b64:	80 91 b7 01 	lds	r24, 0x01B7	; 0x8001b7 <AD_Mux_State>
 b68:	8f 5f       	subi	r24, 0xFF	; 255

if (AD_Mux_State >= NUM_MUX_STEPS)
 b6a:	84 30       	cpi	r24, 0x04	; 4
 b6c:	18 f4       	brcc	.+6      	; 0xb74 <ADProcess+0xdc>
       break;
  default:
       break;
  }

AD_Mux_State++;                                // Ticking the state machine.
 b6e:	80 93 b7 01 	sts	0x01B7, r24	; 0x8001b7 <AD_Mux_State>
 b72:	03 c0       	rjmp	.+6      	; 0xb7a <ADProcess+0xe2>

if (AD_Mux_State >= NUM_MUX_STEPS)
  {
  AD_Mux_State = MUX_AD_CONFIG;
 b74:	81 e0       	ldi	r24, 0x01	; 1
 b76:	80 93 b7 01 	sts	0x01B7, r24	; 0x8001b7 <AD_Mux_State>
  }
 b7a:	df 91       	pop	r29
 b7c:	cf 91       	pop	r28
 b7e:	08 95       	ret

00000b80 <Hal__BackgroundHandler>:
 *  This function shall run in background in the main loop 
 *  Call rate: 1ms, 5ms, 10ms, ...PARA ADC
 */
void Hal__BackgroundHandler(void)
{
 ADProcess();	
 b80:	0e 94 4c 05 	call	0xa98	; 0xa98 <ADProcess>
 b84:	08 95       	ret

00000b86 <SevenSeg_WriteValueToSegment>:
const char SEGMENT_SELECT[] = {0xF1,0xF2,0xF4,0xF8};


/* Write a value to one of the 4 digits of the display */
void SevenSeg_WriteValueToSegment(char Segment, char *Value)
{
 b86:	fb 01       	movw	r30, r22
	bitClear(PORTD, 4);
 b88:	5c 98       	cbi	0x0b, 4	; 11
 b8a:	47 e0       	ldi	r20, 0x07	; 7
 b8c:	50 e0       	ldi	r21, 0x00	; 0

	for (uint8_t i = 0; i < 8; i++)  {
		bitWrite(PORTB, 0, !!((*Value) & (1 << (7 - i))));
 b8e:	20 81       	ld	r18, Z
 b90:	30 e0       	ldi	r19, 0x00	; 0
 b92:	04 2e       	mov	r0, r20
 b94:	02 c0       	rjmp	.+4      	; 0xb9a <SevenSeg_WriteValueToSegment+0x14>
 b96:	35 95       	asr	r19
 b98:	27 95       	ror	r18
 b9a:	0a 94       	dec	r0
 b9c:	e2 f7       	brpl	.-8      	; 0xb96 <SevenSeg_WriteValueToSegment+0x10>
 b9e:	20 ff       	sbrs	r18, 0
 ba0:	02 c0       	rjmp	.+4      	; 0xba6 <SevenSeg_WriteValueToSegment+0x20>
 ba2:	28 9a       	sbi	0x05, 0	; 5
 ba4:	01 c0       	rjmp	.+2      	; 0xba8 <SevenSeg_WriteValueToSegment+0x22>
 ba6:	28 98       	cbi	0x05, 0	; 5
		bitSet(PORTD, 7);
 ba8:	5f 9a       	sbi	0x0b, 7	; 11
		bitClear(PORTD, 7);
 baa:	5f 98       	cbi	0x0b, 7	; 11
 bac:	41 50       	subi	r20, 0x01	; 1
 bae:	51 09       	sbc	r21, r1
 bb0:	70 f7       	brcc	.-36     	; 0xb8e <SevenSeg_WriteValueToSegment+0x8>
 bb2:	27 e0       	ldi	r18, 0x07	; 7
 bb4:	30 e0       	ldi	r19, 0x00	; 0
	}

	for (uint8_t i = 0; i < 8; i++)  {
		bitWrite(PORTB, 0, !!(SEGMENT_SELECT[Segment] & (1 << (7 - i))));
 bb6:	e8 2f       	mov	r30, r24
 bb8:	f0 e0       	ldi	r31, 0x00	; 0
 bba:	e2 5b       	subi	r30, 0xB2	; 178
 bbc:	fe 4f       	sbci	r31, 0xFE	; 254
 bbe:	40 81       	ld	r20, Z
 bc0:	50 e0       	ldi	r21, 0x00	; 0
 bc2:	ca 01       	movw	r24, r20
 bc4:	02 2e       	mov	r0, r18
 bc6:	02 c0       	rjmp	.+4      	; 0xbcc <SevenSeg_WriteValueToSegment+0x46>
 bc8:	95 95       	asr	r25
 bca:	87 95       	ror	r24
 bcc:	0a 94       	dec	r0
 bce:	e2 f7       	brpl	.-8      	; 0xbc8 <SevenSeg_WriteValueToSegment+0x42>
 bd0:	80 ff       	sbrs	r24, 0
 bd2:	02 c0       	rjmp	.+4      	; 0xbd8 <SevenSeg_WriteValueToSegment+0x52>
 bd4:	28 9a       	sbi	0x05, 0	; 5
 bd6:	01 c0       	rjmp	.+2      	; 0xbda <SevenSeg_WriteValueToSegment+0x54>
 bd8:	28 98       	cbi	0x05, 0	; 5
		bitSet(PORTD, 7);
 bda:	5f 9a       	sbi	0x0b, 7	; 11
		bitClear(PORTD, 7);
 bdc:	5f 98       	cbi	0x0b, 7	; 11
 bde:	21 50       	subi	r18, 0x01	; 1
 be0:	31 09       	sbc	r19, r1
 be2:	78 f7       	brcc	.-34     	; 0xbc2 <SevenSeg_WriteValueToSegment+0x3c>
	}

	bitSet(PORTD, 4);
 be4:	5c 9a       	sbi	0x0b, 4	; 11
 be6:	08 95       	ret

00000be8 <Display__Initialize>:
/**
 *  
 */
void Display__Initialize(void)
{
	Oven_Display_State = STOPED; //Inicialmente o elevador encontra-se parado
 be8:	10 92 cd 01 	sts	0x01CD, r1	; 0x8001cd <Oven_Display_State>
 bec:	08 95       	ret

00000bee <Display__SetState>:
/**
 *  
 */
void Display__SetState(OVEN_DISPLAY_STATE_TYPE state)
{
	if(state < NUM_OF_OVEN_STATES)
 bee:	85 30       	cpi	r24, 0x05	; 5
 bf0:	10 f4       	brcc	.+4      	; 0xbf6 <Display__SetState+0x8>
	{
		Oven_Display_State = state;
 bf2:	80 93 cd 01 	sts	0x01CD, r24	; 0x8001cd <Oven_Display_State>
 bf6:	08 95       	ret

00000bf8 <UpdateDisplayLeds>:
 *  Atualiza  Leds 
 */
void UpdateDisplayLeds(void)
{
	unsigned short int ad_value;
	switch(Oven_Display_State)
 bf8:	80 91 cd 01 	lds	r24, 0x01CD	; 0x8001cd <Oven_Display_State>
 bfc:	82 30       	cpi	r24, 0x02	; 2
 bfe:	29 f1       	breq	.+74     	; 0xc4a <UpdateDisplayLeds+0x52>
 c00:	28 f4       	brcc	.+10     	; 0xc0c <UpdateDisplayLeds+0x14>
 c02:	88 23       	and	r24, r24
 c04:	41 f0       	breq	.+16     	; 0xc16 <UpdateDisplayLeds+0x1e>
 c06:	81 30       	cpi	r24, 0x01	; 1
 c08:	99 f0       	breq	.+38     	; 0xc30 <UpdateDisplayLeds+0x38>
 c0a:	08 95       	ret
 c0c:	83 30       	cpi	r24, 0x03	; 3
 c0e:	51 f1       	breq	.+84     	; 0xc64 <UpdateDisplayLeds+0x6c>
 c10:	84 30       	cpi	r24, 0x04	; 4
 c12:	a9 f1       	breq	.+106    	; 0xc7e <UpdateDisplayLeds+0x86>
 c14:	08 95       	ret
	{
		case STOPED:
			Hal__SetLed(LED_0, APAGA_LED);
 c16:	61 e0       	ldi	r22, 0x01	; 1
 c18:	80 e0       	ldi	r24, 0x00	; 0
 c1a:	0e 94 12 04 	call	0x824	; 0x824 <Hal__SetLed>
			Hal__SetLed(LED_1, APAGA_LED);
 c1e:	61 e0       	ldi	r22, 0x01	; 1
 c20:	81 e0       	ldi	r24, 0x01	; 1
 c22:	0e 94 12 04 	call	0x824	; 0x824 <Hal__SetLed>
			Hal__SetLed(LED_2, ACENDE_LED);
 c26:	60 e0       	ldi	r22, 0x00	; 0
 c28:	82 e0       	ldi	r24, 0x02	; 2
 c2a:	0e 94 12 04 	call	0x824	; 0x824 <Hal__SetLed>
	    break;
 c2e:	08 95       	ret
		
		case MOTOR_UP:
			Hal__SetLed(LED_0, ACENDE_LED);
 c30:	60 e0       	ldi	r22, 0x00	; 0
 c32:	80 e0       	ldi	r24, 0x00	; 0
 c34:	0e 94 12 04 	call	0x824	; 0x824 <Hal__SetLed>
			Hal__SetLed(LED_1, APAGA_LED);
 c38:	61 e0       	ldi	r22, 0x01	; 1
 c3a:	81 e0       	ldi	r24, 0x01	; 1
 c3c:	0e 94 12 04 	call	0x824	; 0x824 <Hal__SetLed>
			Hal__SetLed(LED_2, ACENDE_LED);
 c40:	60 e0       	ldi	r22, 0x00	; 0
 c42:	82 e0       	ldi	r24, 0x02	; 2
 c44:	0e 94 12 04 	call	0x824	; 0x824 <Hal__SetLed>
	    break;
 c48:	08 95       	ret
		
		case MOTOR_DOWN:
			Hal__SetLed(LED_0, APAGA_LED);
 c4a:	61 e0       	ldi	r22, 0x01	; 1
 c4c:	80 e0       	ldi	r24, 0x00	; 0
 c4e:	0e 94 12 04 	call	0x824	; 0x824 <Hal__SetLed>
			Hal__SetLed(LED_1, ACENDE_LED);
 c52:	60 e0       	ldi	r22, 0x00	; 0
 c54:	81 e0       	ldi	r24, 0x01	; 1
 c56:	0e 94 12 04 	call	0x824	; 0x824 <Hal__SetLed>
			Hal__SetLed(LED_2, ACENDE_LED);
 c5a:	60 e0       	ldi	r22, 0x00	; 0
 c5c:	82 e0       	ldi	r24, 0x02	; 2
 c5e:	0e 94 12 04 	call	0x824	; 0x824 <Hal__SetLed>
		break;
 c62:	08 95       	ret
		
		case DOOR_OPEN:
			Hal__SetLed(LED_0, APAGA_LED);
 c64:	61 e0       	ldi	r22, 0x01	; 1
 c66:	80 e0       	ldi	r24, 0x00	; 0
 c68:	0e 94 12 04 	call	0x824	; 0x824 <Hal__SetLed>
			Hal__SetLed(LED_1, APAGA_LED);
 c6c:	61 e0       	ldi	r22, 0x01	; 1
 c6e:	81 e0       	ldi	r24, 0x01	; 1
 c70:	0e 94 12 04 	call	0x824	; 0x824 <Hal__SetLed>
			Hal__SetLed(LED_2, APAGA_LED);
 c74:	61 e0       	ldi	r22, 0x01	; 1
 c76:	82 e0       	ldi	r24, 0x02	; 2
 c78:	0e 94 12 04 	call	0x824	; 0x824 <Hal__SetLed>
		break;
 c7c:	08 95       	ret
		case DOOR_CLOSE:
			Hal__SetLed(LED_0, APAGA_LED);
 c7e:	61 e0       	ldi	r22, 0x01	; 1
 c80:	80 e0       	ldi	r24, 0x00	; 0
 c82:	0e 94 12 04 	call	0x824	; 0x824 <Hal__SetLed>
			Hal__SetLed(LED_1, APAGA_LED);
 c86:	61 e0       	ldi	r22, 0x01	; 1
 c88:	81 e0       	ldi	r24, 0x01	; 1
 c8a:	0e 94 12 04 	call	0x824	; 0x824 <Hal__SetLed>
			Hal__SetLed(LED_2, ACENDE_LED);
 c8e:	60 e0       	ldi	r22, 0x00	; 0
 c90:	82 e0       	ldi	r24, 0x02	; 2
 c92:	0e 94 12 04 	call	0x824	; 0x824 <Hal__SetLed>
 c96:	08 95       	ret

00000c98 <ReadDisplayKeys>:
 */
void ReadDisplayKeys(void)
{
        unsigned char leitura;
		
		Display_Keys_Map = KEY_NONE;
 c98:	8a ea       	ldi	r24, 0xAA	; 170
 c9a:	80 93 cc 01 	sts	0x01CC, r24	; 0x8001cc <Display_Keys_Map>
       		   	
		leitura = Hal__ReadKey(KEY_0);
 c9e:	80 e0       	ldi	r24, 0x00	; 0
 ca0:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <Hal__ReadKey>
		if(leitura  == TRUE)
 ca4:	81 30       	cpi	r24, 0x01	; 1
 ca6:	11 f4       	brne	.+4      	; 0xcac <ReadDisplayKeys+0x14>
		{
			Display_Keys_Map = KEY_GROUND_FLOOR;
 ca8:	10 92 cc 01 	sts	0x01CC, r1	; 0x8001cc <Display_Keys_Map>
		}
		leitura = Hal__ReadKey(KEY_1);
 cac:	81 e0       	ldi	r24, 0x01	; 1
 cae:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <Hal__ReadKey>
		if(leitura == TRUE)
 cb2:	81 30       	cpi	r24, 0x01	; 1
 cb4:	11 f4       	brne	.+4      	; 0xcba <ReadDisplayKeys+0x22>
		{
			Display_Keys_Map = KEY_FIRST_FLOOR;
 cb6:	80 93 cc 01 	sts	0x01CC, r24	; 0x8001cc <Display_Keys_Map>
		}
		leitura = Hal__ReadKey(KEY_2);
 cba:	82 e0       	ldi	r24, 0x02	; 2
 cbc:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <Hal__ReadKey>
		if(leitura == TRUE)
 cc0:	81 30       	cpi	r24, 0x01	; 1
 cc2:	19 f4       	brne	.+6      	; 0xcca <ReadDisplayKeys+0x32>
		{
			Display_Keys_Map =  KEY_NEXT_FLOOR;
 cc4:	82 e0       	ldi	r24, 0x02	; 2
 cc6:	80 93 cc 01 	sts	0x01CC, r24	; 0x8001cc <Display_Keys_Map>
 cca:	08 95       	ret

00000ccc <Display__GetEvent>:
}

KEY_SOLICITATION_TYPE Display__GetEvent(void)
{
	KEY_SOLICITATION_TYPE event;
	ReadDisplayKeys();    // Lê as chaves e coloca valor na variável global Display_Keys_Map
 ccc:	0e 94 4c 06 	call	0xc98	; 0xc98 <ReadDisplayKeys>
	event = Display_Keys_Map;
	return (event);
	
}
 cd0:	80 91 cc 01 	lds	r24, 0x01CC	; 0x8001cc <Display_Keys_Map>
 cd4:	08 95       	ret

00000cd6 <UpdateDisplaySevenSeg>:
{
	char i;
	char *p_digito;
	unsigned short int current_floor;
	
	current_floor = PositionSensor__GetMeters(POSITION_SENSOR_1);
 cd6:	80 e0       	ldi	r24, 0x00	; 0
 cd8:	0e 94 af 06 	call	0xd5e	; 0xd5e <PositionSensor__GetMeters>
	if(POSITION_GROUND_MAX >= current_floor)
 cdc:	85 3f       	cpi	r24, 0xF5	; 245
 cde:	91 40       	sbci	r25, 0x01	; 1
 ce0:	b8 f4       	brcc	.+46     	; 0xd10 <UpdateDisplaySevenSeg+0x3a>
	{
		Segment_Floor_State = GROUND_FLOOR;
 ce2:	10 92 cb 01 	sts	0x01CB, r1	; 0x8001cb <Segment_Floor_State>
	switch(Segment_Floor_State)
	{
	case GROUND_FLOOR:
		p_digito = &GROUD_DIGIT[0];
		for (i = 0; i< NUM_OF_SEG; i++, p_digito++)
		Hal__WriteValtoSegment(i, p_digito);
 ce6:	6a e1       	ldi	r22, 0x1A	; 26
 ce8:	71 e0       	ldi	r23, 0x01	; 1
 cea:	80 e0       	ldi	r24, 0x00	; 0
 cec:	0e 94 8e 04 	call	0x91c	; 0x91c <Hal__WriteValtoSegment>
 cf0:	6b e1       	ldi	r22, 0x1B	; 27
 cf2:	71 e0       	ldi	r23, 0x01	; 1
 cf4:	81 e0       	ldi	r24, 0x01	; 1
 cf6:	0e 94 8e 04 	call	0x91c	; 0x91c <Hal__WriteValtoSegment>
 cfa:	6c e1       	ldi	r22, 0x1C	; 28
 cfc:	71 e0       	ldi	r23, 0x01	; 1
 cfe:	82 e0       	ldi	r24, 0x02	; 2
 d00:	0e 94 8e 04 	call	0x91c	; 0x91c <Hal__WriteValtoSegment>
 d04:	6d e1       	ldi	r22, 0x1D	; 29
 d06:	71 e0       	ldi	r23, 0x01	; 1
 d08:	83 e0       	ldi	r24, 0x03	; 3
 d0a:	0e 94 8e 04 	call	0x91c	; 0x91c <Hal__WriteValtoSegment>
 d0e:	08 95       	ret
	{
		Segment_Floor_State = GROUND_FLOOR;
	}
	else
	{
		Segment_Floor_State = FIRST_FLOOR;
 d10:	81 e0       	ldi	r24, 0x01	; 1
 d12:	80 93 cb 01 	sts	0x01CB, r24	; 0x8001cb <Segment_Floor_State>
		Hal__WriteValtoSegment(i, p_digito);
	break;
	case FIRST_FLOOR:
		p_digito = &FIRST_DIGIT[0];
		for (i = 0; i< NUM_OF_SEG; i++, p_digito++)
		Hal__WriteValtoSegment(i, p_digito);
 d16:	66 e1       	ldi	r22, 0x16	; 22
 d18:	71 e0       	ldi	r23, 0x01	; 1
 d1a:	80 e0       	ldi	r24, 0x00	; 0
 d1c:	0e 94 8e 04 	call	0x91c	; 0x91c <Hal__WriteValtoSegment>
 d20:	67 e1       	ldi	r22, 0x17	; 23
 d22:	71 e0       	ldi	r23, 0x01	; 1
 d24:	81 e0       	ldi	r24, 0x01	; 1
 d26:	0e 94 8e 04 	call	0x91c	; 0x91c <Hal__WriteValtoSegment>
 d2a:	68 e1       	ldi	r22, 0x18	; 24
 d2c:	71 e0       	ldi	r23, 0x01	; 1
 d2e:	82 e0       	ldi	r24, 0x02	; 2
 d30:	0e 94 8e 04 	call	0x91c	; 0x91c <Hal__WriteValtoSegment>
 d34:	69 e1       	ldi	r22, 0x19	; 25
 d36:	71 e0       	ldi	r23, 0x01	; 1
 d38:	83 e0       	ldi	r24, 0x03	; 3
 d3a:	0e 94 8e 04 	call	0x91c	; 0x91c <Hal__WriteValtoSegment>
 d3e:	08 95       	ret

00000d40 <PositionSensor__Initialize>:
{
	POSITION_SENSOR_TYPE sensor_id;

	for (sensor_id = 0; sensor_id < NUM_OF_POSITION_SENSOR; sensor_id++)
	{
		Position[sensor_id] = 0;
 d40:	ee ec       	ldi	r30, 0xCE	; 206
 d42:	f1 e0       	ldi	r31, 0x01	; 1
 d44:	11 82       	std	Z+1, r1	; 0x01
 d46:	10 82       	st	Z, r1
 d48:	13 82       	std	Z+3, r1	; 0x03
 d4a:	12 82       	std	Z+2, r1	; 0x02
 d4c:	08 95       	ret

00000d4e <PositionSensor__ConversionHandler>:
	
	for (sensor_id = 0; sensor_id < NUM_OF_POSITION_SENSOR; sensor_id++)
	{
		if(PositionSensor_Enable_Table[sensor_id] == ENABLED)
		{
			ad_value = Hal__GetAnalogInput(PositionSensorTable[sensor_id]); //ad_value em valor digital
 d4e:	80 e0       	ldi	r24, 0x00	; 0
 d50:	0e 94 91 04 	call	0x922	; 0x922 <Hal__GetAnalogInput>
			Position[sensor_id] = ad_value;
 d54:	90 93 cf 01 	sts	0x01CF, r25	; 0x8001cf <Position+0x1>
 d58:	80 93 ce 01 	sts	0x01CE, r24	; 0x8001ce <Position>
 d5c:	08 95       	ret

00000d5e <PositionSensor__GetMeters>:
}

//---------------------------------------------------------------------------------------------------------------------
unsigned short int PositionSensor__GetMeters(POSITION_SENSOR_TYPE sensor_id)
{
	if (sensor_id < NUM_OF_POSITION_SENSOR)
 d5e:	82 30       	cpi	r24, 0x02	; 2
 d60:	48 f4       	brcc	.+18     	; 0xd74 <PositionSensor__GetMeters+0x16>
	{
		return Position[sensor_id];
 d62:	e8 2f       	mov	r30, r24
 d64:	f0 e0       	ldi	r31, 0x00	; 0
 d66:	ee 0f       	add	r30, r30
 d68:	ff 1f       	adc	r31, r31
 d6a:	e2 53       	subi	r30, 0x32	; 50
 d6c:	fe 4f       	sbci	r31, 0xFE	; 254
 d6e:	80 81       	ld	r24, Z
 d70:	91 81       	ldd	r25, Z+1	; 0x01
 d72:	08 95       	ret
	}
	else
	{
		return 0;
 d74:	80 e0       	ldi	r24, 0x00	; 0
 d76:	90 e0       	ldi	r25, 0x00	; 0
	}
	
 d78:	08 95       	ret

00000d7a <Sounds__Initialize>:
//
//*********************************************************
 SOUNDS_TYPE Sounds__GetSounds( void)
{
	return (PlaySound);
}
 d7a:	83 e0       	ldi	r24, 0x03	; 3
 d7c:	80 93 d2 01 	sts	0x01D2, r24	; 0x8001d2 <PlaySound>
 d80:	10 92 d4 01 	sts	0x01D4, r1	; 0x8001d4 <PowerON_Sound_Step>
 d84:	10 92 d5 01 	sts	0x01D5, r1	; 0x8001d5 <Key_Press_Sound_Step>
 d88:	81 e0       	ldi	r24, 0x01	; 1
 d8a:	80 93 d3 01 	sts	0x01D3, r24	; 0x8001d3 <End_Cycle_Sound_Step>
 d8e:	08 95       	ret

00000d90 <Sounds__PlaySounds>:
 d90:	84 30       	cpi	r24, 0x04	; 4
 d92:	20 f0       	brcs	.+8      	; 0xd9c <Sounds__PlaySounds+0xc>
 d94:	83 e0       	ldi	r24, 0x03	; 3
 d96:	80 93 d2 01 	sts	0x01D2, r24	; 0x8001d2 <PlaySound>
 d9a:	08 95       	ret
 d9c:	80 93 d2 01 	sts	0x01D2, r24	; 0x8001d2 <PlaySound>
 da0:	08 95       	ret

00000da2 <PowerOnSoundHandler>:

SOUND_STATUS PowerOnSoundHandler(void)
{
SOUND_STATUS status;
status = SOUND_PLAYING;
Hal__SetBuzzerFreq(5000);
 da2:	88 e8       	ldi	r24, 0x88	; 136
 da4:	93 e1       	ldi	r25, 0x13	; 19
 da6:	0e 94 a9 04 	call	0x952	; 0x952 <Hal__SetBuzzerFreq>

switch (PowerON_Sound_Step)
 daa:	80 91 d4 01 	lds	r24, 0x01D4	; 0x8001d4 <PowerON_Sound_Step>
 dae:	82 30       	cpi	r24, 0x02	; 2
 db0:	71 f1       	breq	.+92     	; 0xe0e <PowerOnSoundHandler+0x6c>
 db2:	28 f4       	brcc	.+10     	; 0xdbe <PowerOnSoundHandler+0x1c>
 db4:	88 23       	and	r24, r24
 db6:	59 f0       	breq	.+22     	; 0xdce <PowerOnSoundHandler+0x2c>
 db8:	81 30       	cpi	r24, 0x01	; 1
 dba:	b1 f0       	breq	.+44     	; 0xde8 <PowerOnSoundHandler+0x46>
 dbc:	6c c0       	rjmp	.+216    	; 0xe96 <PowerOnSoundHandler+0xf4>
 dbe:	84 30       	cpi	r24, 0x04	; 4
 dc0:	09 f4       	brne	.+2      	; 0xdc4 <PowerOnSoundHandler+0x22>
 dc2:	4b c0       	rjmp	.+150    	; 0xe5a <PowerOnSoundHandler+0xb8>
 dc4:	b8 f1       	brcs	.+110    	; 0xe34 <PowerOnSoundHandler+0x92>
 dc6:	85 30       	cpi	r24, 0x05	; 5
 dc8:	09 f4       	brne	.+2      	; 0xdcc <PowerOnSoundHandler+0x2a>
 dca:	5a c0       	rjmp	.+180    	; 0xe80 <PowerOnSoundHandler+0xde>
 dcc:	64 c0       	rjmp	.+200    	; 0xe96 <PowerOnSoundHandler+0xf4>
{
case POWER_ON_SOUND_STEP1:
	Hal__SetBuzzer(ON);  // aqui entra
 dce:	81 e0       	ldi	r24, 0x01	; 1
 dd0:	0e 94 9d 04 	call	0x93a	; 0x93a <Hal__SetBuzzer>
	//_delay_ms(2000);
    Timer__HMSSet(TIMER_HMS_POWER_ON_SOUND, 0,0,1);
 dd4:	21 e0       	ldi	r18, 0x01	; 1
 dd6:	40 e0       	ldi	r20, 0x00	; 0
 dd8:	60 e0       	ldi	r22, 0x00	; 0
 dda:	82 e0       	ldi	r24, 0x02	; 2
 ddc:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <Timer__HMSSet>
	PowerON_Sound_Step = POWER_ON_SOUND_STEP2;
 de0:	81 e0       	ldi	r24, 0x01	; 1
 de2:	80 93 d4 01 	sts	0x01D4, r24	; 0x8001d4 <PowerON_Sound_Step>
	break;
 de6:	08 95       	ret

case POWER_ON_SOUND_STEP2:
	if(Timer__HMSGetStatus(TIMER_HMS_POWER_ON_SOUND) == TIMER_EXPIRED)
 de8:	82 e0       	ldi	r24, 0x02	; 2
 dea:	0e 94 ee 03 	call	0x7dc	; 0x7dc <Timer__HMSGetStatus>
 dee:	81 11       	cpse	r24, r1
 df0:	56 c0       	rjmp	.+172    	; 0xe9e <PowerOnSoundHandler+0xfc>
		{
		Timer__HMSSet(TIMER_HMS_POWER_ON_SOUND, 0,0,1);	
 df2:	21 e0       	ldi	r18, 0x01	; 1
 df4:	40 e0       	ldi	r20, 0x00	; 0
 df6:	60 e0       	ldi	r22, 0x00	; 0
 df8:	82 e0       	ldi	r24, 0x02	; 2
 dfa:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <Timer__HMSSet>
		//	Hal__SetBuzzer(ON);    // não entra aqui  !!!
		//_delay_ms(2000);
		PowerON_Sound_Step = POWER_ON_SOUND_STEP3;
 dfe:	82 e0       	ldi	r24, 0x02	; 2
 e00:	80 93 d4 01 	sts	0x01D4, r24	; 0x8001d4 <PowerON_Sound_Step>
		Hal__SetBuzzer(OFF);
 e04:	80 e0       	ldi	r24, 0x00	; 0
 e06:	0e 94 9d 04 	call	0x93a	; 0x93a <Hal__SetBuzzer>


SOUND_STATUS PowerOnSoundHandler(void)
{
SOUND_STATUS status;
status = SOUND_PLAYING;
 e0a:	81 e0       	ldi	r24, 0x01	; 1
 e0c:	08 95       	ret
		Hal__SetBuzzer(OFF);
		}
	break;  

case POWER_ON_SOUND_STEP3:
	if(Timer__HMSGetStatus(TIMER_HMS_POWER_ON_SOUND) == TIMER_EXPIRED)
 e0e:	82 e0       	ldi	r24, 0x02	; 2
 e10:	0e 94 ee 03 	call	0x7dc	; 0x7dc <Timer__HMSGetStatus>
 e14:	81 11       	cpse	r24, r1
 e16:	45 c0       	rjmp	.+138    	; 0xea2 <PowerOnSoundHandler+0x100>
		{
	    Timer__HMSSet(TIMER_HMS_POWER_ON_SOUND, 0,0,1);
 e18:	21 e0       	ldi	r18, 0x01	; 1
 e1a:	40 e0       	ldi	r20, 0x00	; 0
 e1c:	60 e0       	ldi	r22, 0x00	; 0
 e1e:	82 e0       	ldi	r24, 0x02	; 2
 e20:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <Timer__HMSSet>
		PowerON_Sound_Step = POWER_ON_SOUND_STEP4;
 e24:	83 e0       	ldi	r24, 0x03	; 3
 e26:	80 93 d4 01 	sts	0x01D4, r24	; 0x8001d4 <PowerON_Sound_Step>
		//Hal__SetBuzzerFreq(4000);   //mudar frequencia do PWM
		Hal__SetBuzzer(ON);
 e2a:	81 e0       	ldi	r24, 0x01	; 1
 e2c:	0e 94 9d 04 	call	0x93a	; 0x93a <Hal__SetBuzzer>


SOUND_STATUS PowerOnSoundHandler(void)
{
SOUND_STATUS status;
status = SOUND_PLAYING;
 e30:	81 e0       	ldi	r24, 0x01	; 1
 e32:	08 95       	ret
		//_delay_ms(2000);
	    }
	break;
	
case POWER_ON_SOUND_STEP4:
	if(Timer__HMSGetStatus(TIMER_HMS_POWER_ON_SOUND) == TIMER_EXPIRED)
 e34:	82 e0       	ldi	r24, 0x02	; 2
 e36:	0e 94 ee 03 	call	0x7dc	; 0x7dc <Timer__HMSGetStatus>
 e3a:	81 11       	cpse	r24, r1
 e3c:	34 c0       	rjmp	.+104    	; 0xea6 <PowerOnSoundHandler+0x104>
		{
	    Timer__HMSSet(TIMER_HMS_POWER_ON_SOUND, 0,0,1);
 e3e:	21 e0       	ldi	r18, 0x01	; 1
 e40:	40 e0       	ldi	r20, 0x00	; 0
 e42:	60 e0       	ldi	r22, 0x00	; 0
 e44:	82 e0       	ldi	r24, 0x02	; 2
 e46:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <Timer__HMSSet>
		PowerON_Sound_Step = POWER_ON_SOUND_STEP5;
 e4a:	84 e0       	ldi	r24, 0x04	; 4
 e4c:	80 93 d4 01 	sts	0x01D4, r24	; 0x8001d4 <PowerON_Sound_Step>
		Hal__SetBuzzer(OFF);
 e50:	80 e0       	ldi	r24, 0x00	; 0
 e52:	0e 94 9d 04 	call	0x93a	; 0x93a <Hal__SetBuzzer>


SOUND_STATUS PowerOnSoundHandler(void)
{
SOUND_STATUS status;
status = SOUND_PLAYING;
 e56:	81 e0       	ldi	r24, 0x01	; 1
 e58:	08 95       	ret
		//_delay_ms(2000);
		}
	break;
	
case POWER_ON_SOUND_STEP5:
	if(Timer__HMSGetStatus(TIMER_HMS_POWER_ON_SOUND) == TIMER_EXPIRED)
 e5a:	82 e0       	ldi	r24, 0x02	; 2
 e5c:	0e 94 ee 03 	call	0x7dc	; 0x7dc <Timer__HMSGetStatus>
 e60:	81 11       	cpse	r24, r1
 e62:	23 c0       	rjmp	.+70     	; 0xeaa <PowerOnSoundHandler+0x108>
		{
	    Timer__HMSSet(TIMER_HMS_POWER_ON_SOUND, 0,0,1);
 e64:	21 e0       	ldi	r18, 0x01	; 1
 e66:	40 e0       	ldi	r20, 0x00	; 0
 e68:	60 e0       	ldi	r22, 0x00	; 0
 e6a:	82 e0       	ldi	r24, 0x02	; 2
 e6c:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <Timer__HMSSet>
		PowerON_Sound_Step = POWER_ON_SOUND_STEP6;
 e70:	85 e0       	ldi	r24, 0x05	; 5
 e72:	80 93 d4 01 	sts	0x01D4, r24	; 0x8001d4 <PowerON_Sound_Step>
		//Hal__SetBuzzerFreq(4000);
		Hal__SetBuzzer(ON);
 e76:	81 e0       	ldi	r24, 0x01	; 1
 e78:	0e 94 9d 04 	call	0x93a	; 0x93a <Hal__SetBuzzer>


SOUND_STATUS PowerOnSoundHandler(void)
{
SOUND_STATUS status;
status = SOUND_PLAYING;
 e7c:	81 e0       	ldi	r24, 0x01	; 1
 e7e:	08 95       	ret
		//_delay_ms(2000);
		}
	break;
	
case POWER_ON_SOUND_STEP6:
	if(Timer__HMSGetStatus(TIMER_HMS_POWER_ON_SOUND) == TIMER_EXPIRED)
 e80:	82 e0       	ldi	r24, 0x02	; 2
 e82:	0e 94 ee 03 	call	0x7dc	; 0x7dc <Timer__HMSGetStatus>
 e86:	81 11       	cpse	r24, r1
 e88:	12 c0       	rjmp	.+36     	; 0xeae <PowerOnSoundHandler+0x10c>
		{
		PowerON_Sound_Step = POWER_ON_SOUND_STEP1;
 e8a:	10 92 d4 01 	sts	0x01D4, r1	; 0x8001d4 <PowerON_Sound_Step>
		Hal__SetBuzzer(OFF);
 e8e:	0e 94 9d 04 	call	0x93a	; 0x93a <Hal__SetBuzzer>
		//Hal__SetLed(LED_1, LED_OFF);
		status = SOUND_DONE;
 e92:	80 e0       	ldi	r24, 0x00	; 0
 e94:	08 95       	ret
		}
	break;

default:
	PowerON_Sound_Step = POWER_ON_SOUND_STEP1;
 e96:	10 92 d4 01 	sts	0x01D4, r1	; 0x8001d4 <PowerON_Sound_Step>
	status = SOUND_DONE;
 e9a:	80 e0       	ldi	r24, 0x00	; 0
	break;
 e9c:	08 95       	ret


SOUND_STATUS PowerOnSoundHandler(void)
{
SOUND_STATUS status;
status = SOUND_PLAYING;
 e9e:	81 e0       	ldi	r24, 0x01	; 1
 ea0:	08 95       	ret
 ea2:	81 e0       	ldi	r24, 0x01	; 1
 ea4:	08 95       	ret
 ea6:	81 e0       	ldi	r24, 0x01	; 1
 ea8:	08 95       	ret
 eaa:	81 e0       	ldi	r24, 0x01	; 1
 eac:	08 95       	ret
 eae:	81 e0       	ldi	r24, 0x01	; 1
	PowerON_Sound_Step = POWER_ON_SOUND_STEP1;
	status = SOUND_DONE;
	break;
}
return status;
}
 eb0:	08 95       	ret

00000eb2 <KeyPressSoundHandler>:
{
SOUND_STATUS status;
status = SOUND_PLAYING;
//Hal__SetBuzzerFreq(4000);
	
switch(Key_Press_Sound_Step)
 eb2:	80 91 d5 01 	lds	r24, 0x01D5	; 0x8001d5 <Key_Press_Sound_Step>
 eb6:	88 23       	and	r24, r24
 eb8:	19 f0       	breq	.+6      	; 0xec0 <KeyPressSoundHandler+0xe>
 eba:	81 30       	cpi	r24, 0x01	; 1
 ebc:	71 f0       	breq	.+28     	; 0xeda <KeyPressSoundHandler+0x28>
 ebe:	18 c0       	rjmp	.+48     	; 0xef0 <KeyPressSoundHandler+0x3e>
	{
	case KEY_PRESS_SOUND_STEP1:
		Timer__HMSSet(TIMER_HMS_KEY_PRESS_SOUND, 0,0,1);
 ec0:	21 e0       	ldi	r18, 0x01	; 1
 ec2:	40 e0       	ldi	r20, 0x00	; 0
 ec4:	60 e0       	ldi	r22, 0x00	; 0
 ec6:	83 e0       	ldi	r24, 0x03	; 3
 ec8:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <Timer__HMSSet>
		Hal__SetBuzzer(ON);
 ecc:	81 e0       	ldi	r24, 0x01	; 1
 ece:	0e 94 9d 04 	call	0x93a	; 0x93a <Hal__SetBuzzer>
		Key_Press_Sound_Step = KEY_PRESS_SOUND_STEP2;
 ed2:	81 e0       	ldi	r24, 0x01	; 1
 ed4:	80 93 d5 01 	sts	0x01D5, r24	; 0x8001d5 <Key_Press_Sound_Step>
		break;
 ed8:	08 95       	ret

	case KEY_PRESS_SOUND_STEP2:
		if(Timer__HMSGetStatus(TIMER_HMS_KEY_PRESS_SOUND) == TIMER_EXPIRED)
 eda:	83 e0       	ldi	r24, 0x03	; 3
 edc:	0e 94 ee 03 	call	0x7dc	; 0x7dc <Timer__HMSGetStatus>
 ee0:	81 11       	cpse	r24, r1
 ee2:	0a c0       	rjmp	.+20     	; 0xef8 <KeyPressSoundHandler+0x46>
		{
			Hal__SetBuzzer(OFF);
 ee4:	0e 94 9d 04 	call	0x93a	; 0x93a <Hal__SetBuzzer>
			Key_Press_Sound_Step = KEY_PRESS_SOUND_STEP1;
 ee8:	10 92 d5 01 	sts	0x01D5, r1	; 0x8001d5 <Key_Press_Sound_Step>
			status = SOUND_DONE;
 eec:	80 e0       	ldi	r24, 0x00	; 0
 eee:	08 95       	ret
		}
		break;
	default:
		Key_Press_Sound_Step = KEY_PRESS_SOUND_STEP1;
 ef0:	10 92 d5 01 	sts	0x01D5, r1	; 0x8001d5 <Key_Press_Sound_Step>
		status = SOUND_DONE;
 ef4:	80 e0       	ldi	r24, 0x00	; 0
		break;
 ef6:	08 95       	ret

//---------------------------------------------------------------------------------------------------------------------
SOUND_STATUS KeyPressSoundHandler(void)
{
SOUND_STATUS status;
status = SOUND_PLAYING;
 ef8:	81 e0       	ldi	r24, 0x01	; 1
		status = SOUND_DONE;
		break;
	}
	
return status;
}
 efa:	08 95       	ret

00000efc <EndCycleSoundHandler>:
{
SOUND_STATUS status;
status = SOUND_PLAYING;
//Hal__SetBuzzerFreq(4000);
	
switch(End_Cycle_Sound_Step)
 efc:	80 91 d3 01 	lds	r24, 0x01D3	; 0x8001d3 <End_Cycle_Sound_Step>
 f00:	88 23       	and	r24, r24
 f02:	79 f0       	breq	.+30     	; 0xf22 <EndCycleSoundHandler+0x26>
 f04:	81 30       	cpi	r24, 0x01	; 1
 f06:	c9 f4       	brne	.+50     	; 0xf3a <EndCycleSoundHandler+0x3e>
	{
	case END_CYCLE_SOUND_STEP_ON:
		Timer__HMSSet(TIMER_HMS_END_CYCLE_SOUND, 0,0,3);
 f08:	23 e0       	ldi	r18, 0x03	; 3
 f0a:	40 e0       	ldi	r20, 0x00	; 0
 f0c:	60 e0       	ldi	r22, 0x00	; 0
 f0e:	84 e0       	ldi	r24, 0x04	; 4
 f10:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <Timer__HMSSet>
		Hal__SetBuzzer(ON);
 f14:	81 e0       	ldi	r24, 0x01	; 1
 f16:	0e 94 9d 04 	call	0x93a	; 0x93a <Hal__SetBuzzer>
		//_delay_ms(2000);
		End_Cycle_Sound_Step = END_CYCLE_SOUND_STEP_OFF;
 f1a:	10 92 d3 01 	sts	0x01D3, r1	; 0x8001d3 <End_Cycle_Sound_Step>
*/

SOUND_STATUS EndCycleSoundHandler(void)
{
SOUND_STATUS status;
status = SOUND_PLAYING;
 f1e:	81 e0       	ldi	r24, 0x01	; 1
	case END_CYCLE_SOUND_STEP_ON:
		Timer__HMSSet(TIMER_HMS_END_CYCLE_SOUND, 0,0,3);
		Hal__SetBuzzer(ON);
		//_delay_ms(2000);
		End_Cycle_Sound_Step = END_CYCLE_SOUND_STEP_OFF;
		break;
 f20:	08 95       	ret

	case END_CYCLE_SOUND_STEP_OFF:
	//Hal__SetBuzzer(ON);
	//_delay_ms(2000);
		if(Timer__HMSGetStatus(TIMER_HMS_END_CYCLE_SOUND) == TIMER_EXPIRED)
 f22:	84 e0       	ldi	r24, 0x04	; 4
 f24:	0e 94 ee 03 	call	0x7dc	; 0x7dc <Timer__HMSGetStatus>
 f28:	81 11       	cpse	r24, r1
 f2a:	0c c0       	rjmp	.+24     	; 0xf44 <EndCycleSoundHandler+0x48>
			{
			Hal__SetBuzzer(OFF);
 f2c:	0e 94 9d 04 	call	0x93a	; 0x93a <Hal__SetBuzzer>
			End_Cycle_Sound_Step = END_CYCLE_SOUND_STEP_ON;
 f30:	81 e0       	ldi	r24, 0x01	; 1
 f32:	80 93 d3 01 	sts	0x01D3, r24	; 0x8001d3 <End_Cycle_Sound_Step>
			status = SOUND_DONE;
 f36:	80 e0       	ldi	r24, 0x00	; 0
 f38:	08 95       	ret
			}
		break;
	default:
		End_Cycle_Sound_Step = END_CYCLE_SOUND_STEP_ON;
 f3a:	81 e0       	ldi	r24, 0x01	; 1
 f3c:	80 93 d3 01 	sts	0x01D3, r24	; 0x8001d3 <End_Cycle_Sound_Step>
		status = SOUND_DONE;
 f40:	80 e0       	ldi	r24, 0x00	; 0
		break;
 f42:	08 95       	ret
*/

SOUND_STATUS EndCycleSoundHandler(void)
{
SOUND_STATUS status;
status = SOUND_PLAYING;
 f44:	81 e0       	ldi	r24, 0x01	; 1
		status = SOUND_DONE;
		break;
	}
	
return status;
 f46:	08 95       	ret

00000f48 <Sounds__Background>:
//
//*********************************************************
 
void Sounds__Background(void)
{
switch (PlaySound)
 f48:	80 91 d2 01 	lds	r24, 0x01D2	; 0x8001d2 <PlaySound>
 f4c:	81 30       	cpi	r24, 0x01	; 1
 f4e:	71 f0       	breq	.+28     	; 0xf6c <Sounds__Background+0x24>
 f50:	28 f0       	brcs	.+10     	; 0xf5c <Sounds__Background+0x14>
 f52:	82 30       	cpi	r24, 0x02	; 2
 f54:	99 f0       	breq	.+38     	; 0xf7c <Sounds__Background+0x34>
 f56:	83 30       	cpi	r24, 0x03	; 3
 f58:	c9 f0       	breq	.+50     	; 0xf8c <Sounds__Background+0x44>
 f5a:	08 95       	ret
	{
	case SOUND_POWER_ON:
		if(PowerOnSoundHandler() == SOUND_DONE)
 f5c:	0e 94 d1 06 	call	0xda2	; 0xda2 <PowerOnSoundHandler>
 f60:	81 11       	cpse	r24, r1
 f62:	17 c0       	rjmp	.+46     	; 0xf92 <Sounds__Background+0x4a>
			{
			PlaySound = PLAY_NO_SOUND;
 f64:	83 e0       	ldi	r24, 0x03	; 3
 f66:	80 93 d2 01 	sts	0x01D2, r24	; 0x8001d2 <PlaySound>
 f6a:	08 95       	ret
			}
		break;

	case SOUND_KEY_PRESS:
		if(KeyPressSoundHandler() == SOUND_DONE)
 f6c:	0e 94 59 07 	call	0xeb2	; 0xeb2 <KeyPressSoundHandler>
 f70:	81 11       	cpse	r24, r1
 f72:	0f c0       	rjmp	.+30     	; 0xf92 <Sounds__Background+0x4a>
			{
			//	Hal__SetAllLeds(LED_ON);  // depuração
			PlaySound = PLAY_NO_SOUND;    
 f74:	83 e0       	ldi	r24, 0x03	; 3
 f76:	80 93 d2 01 	sts	0x01D2, r24	; 0x8001d2 <PlaySound>
 f7a:	08 95       	ret
			}
		break;

	case SOUND_END_CYCLE:
		if(EndCycleSoundHandler() == SOUND_DONE)
 f7c:	0e 94 7e 07 	call	0xefc	; 0xefc <EndCycleSoundHandler>
 f80:	81 11       	cpse	r24, r1
 f82:	07 c0       	rjmp	.+14     	; 0xf92 <Sounds__Background+0x4a>
			{
			PlaySound = PLAY_NO_SOUND;  
 f84:	83 e0       	ldi	r24, 0x03	; 3
 f86:	80 93 d2 01 	sts	0x01D2, r24	; 0x8001d2 <PlaySound>
 f8a:	08 95       	ret
			}
		break;
	
	case PLAY_NO_SOUND:
		Hal__SetBuzzer(OFF);
 f8c:	80 e0       	ldi	r24, 0x00	; 0
 f8e:	0e 94 9d 04 	call	0x93a	; 0x93a <Hal__SetBuzzer>
 f92:	08 95       	ret

00000f94 <__divmodhi4>:
 f94:	97 fb       	bst	r25, 7
 f96:	07 2e       	mov	r0, r23
 f98:	16 f4       	brtc	.+4      	; 0xf9e <__divmodhi4+0xa>
 f9a:	00 94       	com	r0
 f9c:	07 d0       	rcall	.+14     	; 0xfac <__divmodhi4_neg1>
 f9e:	77 fd       	sbrc	r23, 7
 fa0:	09 d0       	rcall	.+18     	; 0xfb4 <__divmodhi4_neg2>
 fa2:	0e 94 de 07 	call	0xfbc	; 0xfbc <__udivmodhi4>
 fa6:	07 fc       	sbrc	r0, 7
 fa8:	05 d0       	rcall	.+10     	; 0xfb4 <__divmodhi4_neg2>
 faa:	3e f4       	brtc	.+14     	; 0xfba <__divmodhi4_exit>

00000fac <__divmodhi4_neg1>:
 fac:	90 95       	com	r25
 fae:	81 95       	neg	r24
 fb0:	9f 4f       	sbci	r25, 0xFF	; 255
 fb2:	08 95       	ret

00000fb4 <__divmodhi4_neg2>:
 fb4:	70 95       	com	r23
 fb6:	61 95       	neg	r22
 fb8:	7f 4f       	sbci	r23, 0xFF	; 255

00000fba <__divmodhi4_exit>:
 fba:	08 95       	ret

00000fbc <__udivmodhi4>:
 fbc:	aa 1b       	sub	r26, r26
 fbe:	bb 1b       	sub	r27, r27
 fc0:	51 e1       	ldi	r21, 0x11	; 17
 fc2:	07 c0       	rjmp	.+14     	; 0xfd2 <__udivmodhi4_ep>

00000fc4 <__udivmodhi4_loop>:
 fc4:	aa 1f       	adc	r26, r26
 fc6:	bb 1f       	adc	r27, r27
 fc8:	a6 17       	cp	r26, r22
 fca:	b7 07       	cpc	r27, r23
 fcc:	10 f0       	brcs	.+4      	; 0xfd2 <__udivmodhi4_ep>
 fce:	a6 1b       	sub	r26, r22
 fd0:	b7 0b       	sbc	r27, r23

00000fd2 <__udivmodhi4_ep>:
 fd2:	88 1f       	adc	r24, r24
 fd4:	99 1f       	adc	r25, r25
 fd6:	5a 95       	dec	r21
 fd8:	a9 f7       	brne	.-22     	; 0xfc4 <__udivmodhi4_loop>
 fda:	80 95       	com	r24
 fdc:	90 95       	com	r25
 fde:	bc 01       	movw	r22, r24
 fe0:	cd 01       	movw	r24, r26
 fe2:	08 95       	ret

00000fe4 <_exit>:
 fe4:	f8 94       	cli

00000fe6 <__stop_program>:
 fe6:	ff cf       	rjmp	.-2      	; 0xfe6 <__stop_program>
