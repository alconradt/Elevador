
Elevador.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000052  00800100  00001008  0000109c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001008  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000088  00800152  00800152  000010ee  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000010ee  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001120  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000328  00000000  00000000  00001160  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000038dd  00000000  00000000  00001488  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001556  00000000  00000000  00004d65  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000019f6  00000000  00000000  000062bb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000059c  00000000  00000000  00007cb4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000017d6  00000000  00000000  00008250  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000ec7  00000000  00000000  00009a26  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000258  00000000  00000000  0000a8ed  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 f1 03 	jmp	0x7e2	; 0x7e2 <__vector_13>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e8 e0       	ldi	r30, 0x08	; 8
      7c:	f0 e1       	ldi	r31, 0x10	; 16
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	a2 35       	cpi	r26, 0x52	; 82
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	21 e0       	ldi	r18, 0x01	; 1
      8c:	a2 e5       	ldi	r26, 0x52	; 82
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	aa 3d       	cpi	r26, 0xDA	; 218
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 9b 00 	call	0x136	; 0x136 <main>
      9e:	0c 94 02 08 	jmp	0x1004	; 0x1004 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <Appl__Initialize>:
//=====================================================================================================================


void Appl__Initialize(void)
{
	User_Action = EVENTS_NO_EVENT;
      a6:	8f ef       	ldi	r24, 0xFF	; 255
      a8:	80 93 54 01 	sts	0x0154, r24	; 0x800154 <User_Action>
	Timer_Counter = TIME_IN_50MS_BASE;
      ac:	84 e1       	ldi	r24, 0x14	; 20
      ae:	80 93 55 01 	sts	0x0155, r24	; 0x800155 <Timer_Counter>
      b2:	08 95       	ret

000000b4 <Appl__Handler>:
}

void Appl__Handler(void)
{
	User_Action = Display__GetEvent();
      b4:	0e 94 4c 06 	call	0xc98	; 0xc98 <Display__GetEvent>
      b8:	80 93 54 01 	sts	0x0154, r24	; 0x800154 <User_Action>
	if (User_Action != EVENTS_NO_EVENT)
      bc:	8f 3f       	cpi	r24, 0xFF	; 255
      be:	d1 f1       	breq	.+116    	; 0x134 <Appl__Handler+0x80>
	{
		switch(User_Action)
      c0:	81 30       	cpi	r24, 0x01	; 1
      c2:	89 f0       	breq	.+34     	; 0xe6 <Appl__Handler+0x32>
      c4:	18 f0       	brcs	.+6      	; 0xcc <Appl__Handler+0x18>
      c6:	82 30       	cpi	r24, 0x02	; 2
      c8:	d9 f0       	breq	.+54     	; 0x100 <Appl__Handler+0x4c>
      ca:	08 95       	ret
		{
			case KEY_GROUND_FLOOR:
				Hal__SetBuzzerFreq(4000);
      cc:	80 ea       	ldi	r24, 0xA0	; 160
      ce:	9f e0       	ldi	r25, 0x0F	; 15
      d0:	0e 94 a3 04 	call	0x946	; 0x946 <Hal__SetBuzzerFreq>
				Sounds__PlaySounds(SOUND_KEY_PRESS);
      d4:	81 e0       	ldi	r24, 0x01	; 1
      d6:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <Sounds__PlaySounds>
				Floor_position = GROUND_STATE;
      da:	10 92 53 01 	sts	0x0153, r1	; 0x800153 <Floor_position>
				OvenPosition__SetSolicitation(GROUND);
      de:	80 e0       	ldi	r24, 0x00	; 0
      e0:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <OvenPosition__SetSolicitation>
			break;
      e4:	08 95       	ret
		
			case KEY_FIRST_FLOOR:
				Hal__SetBuzzerFreq(4000);
      e6:	80 ea       	ldi	r24, 0xA0	; 160
      e8:	9f e0       	ldi	r25, 0x0F	; 15
      ea:	0e 94 a3 04 	call	0x946	; 0x946 <Hal__SetBuzzerFreq>
				Sounds__PlaySounds(SOUND_KEY_PRESS);
      ee:	81 e0       	ldi	r24, 0x01	; 1
      f0:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <Sounds__PlaySounds>
				Floor_position = FIRST_STATE;
      f4:	81 e0       	ldi	r24, 0x01	; 1
      f6:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <Floor_position>
				OvenPosition__SetSolicitation(FIRST);
      fa:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <OvenPosition__SetSolicitation>
			break;
      fe:	08 95       	ret
			
			case KEY_NEXT_FLOOR:
				Hal__SetBuzzerFreq(4000);
     100:	80 ea       	ldi	r24, 0xA0	; 160
     102:	9f e0       	ldi	r25, 0x0F	; 15
     104:	0e 94 a3 04 	call	0x946	; 0x946 <Hal__SetBuzzerFreq>
				Sounds__PlaySounds(SOUND_KEY_PRESS);
     108:	81 e0       	ldi	r24, 0x01	; 1
     10a:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <Sounds__PlaySounds>
				if (Floor_position == GROUND_STATE)
     10e:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <Floor_position>
     112:	81 11       	cpse	r24, r1
     114:	06 c0       	rjmp	.+12     	; 0x122 <Appl__Handler+0x6e>
				{
					PortSensor__Movie(CLOSED);
     116:	81 e0       	ldi	r24, 0x01	; 1
     118:	0e 94 8c 06 	call	0xd18	; 0xd18 <PortSensor__Movie>
					OvenPosition__SetSolicitation(FIRST);
     11c:	81 e0       	ldi	r24, 0x01	; 1
     11e:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <OvenPosition__SetSolicitation>
				}
				if (Floor_position == FIRST_STATE)
     122:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <Floor_position>
     126:	81 30       	cpi	r24, 0x01	; 1
     128:	29 f4       	brne	.+10     	; 0x134 <Appl__Handler+0x80>
				{
					PortSensor__Movie(CLOSED);
     12a:	0e 94 8c 06 	call	0xd18	; 0xd18 <PortSensor__Movie>
					OvenPosition__SetSolicitation(GROUND);
     12e:	80 e0       	ldi	r24, 0x00	; 0
     130:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <OvenPosition__SetSolicitation>
     134:	08 95       	ret

00000136 <main>:
//-------------------------------------- Public Functions -------------------------------------------------------------
//=====================================================================================================================

void main(void)
{
	Slot = SLOT_1;
     136:	10 92 58 01 	sts	0x0158, r1	; 0x800158 <Slot>
	
	TCCR1A = 0;                        //confira timer para operação normal pinos OC1A e OC1B desconectados
     13a:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
	TCCR1B = 0;                        //limpa registrador
     13e:	e1 e8       	ldi	r30, 0x81	; 129
     140:	f0 e0       	ldi	r31, 0x00	; 0
     142:	10 82       	st	Z, r1
	TCCR1B |= (1<<CS10)|(1 << CS12);   // configura prescaler para 1024: CS12 = 1 e CS10 = 1
     144:	80 81       	ld	r24, Z
     146:	85 60       	ori	r24, 0x05	; 5
     148:	80 83       	st	Z, r24
	
	TCNT1 = 0xC2F7;      //para contar a cada 1s
     14a:	87 ef       	ldi	r24, 0xF7	; 247
     14c:	92 ec       	ldi	r25, 0xC2	; 194
     14e:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     152:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
	//TCNT1 = 0xC2F7;                    //inicia timer com valor para que estouro ocorra em 1 segundo
	//TCNT1 = 34186;                   // Para contar 2s=> 65536 - 31330
	// 65536-(16MHz/1024/1Hz) =  65536 - 15.625 = 49911(0xC2F7)=> 15.625 é o período desejado.
	// Usa-se a diferença porque o contador é crescente e estoura de 0xffff a 0.
	TIMSK1 |= (1 << TOIE1);
     156:	ef e6       	ldi	r30, 0x6F	; 111
     158:	f0 e0       	ldi	r31, 0x00	; 0
     15a:	80 81       	ld	r24, Z
     15c:	81 60       	ori	r24, 0x01	; 1
     15e:	80 83       	st	Z, r24
	sei();
     160:	78 94       	sei
	
	
	// Functions Initialization
	INITIALIZE_TASKS();
     162:	0e 94 43 01 	call	0x286	; 0x286 <ADC__Initialize>
     166:	0e 94 27 03 	call	0x64e	; 0x64e <Pwm__Initialize>
     16a:	0e 94 29 04 	call	0x852	; 0x852 <Hal__Initialize>
     16e:	0e 94 ee 05 	call	0xbdc	; 0xbdc <Display__Initialize>
     172:	0e 94 88 03 	call	0x710	; 0x710 <Timer__Initialize>
     176:	0e 94 cd 06 	call	0xd9a	; 0xd9a <Sounds__Initialize>
     17a:	0e 94 b0 06 	call	0xd60	; 0xd60 <PositionSensor__Initialize>
     17e:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <OvenPositionControl__Initialize>
     182:	0e 94 53 00 	call	0xa6	; 0xa6 <Appl__Initialize>

			default:
			  Slot = SLOT_1;
			  break;
	       }
	Slot++;
     186:	c1 e0       	ldi	r28, 0x01	; 1
	INITIALIZE_TASKS();
		
	//Main Loop
	for(;;)
	{
		ALL_SLOTS_TASKS();
     188:	0e 94 a0 03 	call	0x740	; 0x740 <Timer__HMSHandler>
     18c:	0e 94 41 05 	call	0xa82	; 0xa82 <Hal__FastHandler>
		switch(Slot)
     190:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <Slot>
     194:	82 30       	cpi	r24, 0x02	; 2
     196:	99 f0       	breq	.+38     	; 0x1be <main+0x88>
     198:	28 f4       	brcc	.+10     	; 0x1a4 <main+0x6e>
     19a:	88 23       	and	r24, r24
     19c:	41 f0       	breq	.+16     	; 0x1ae <main+0x78>
     19e:	81 30       	cpi	r24, 0x01	; 1
     1a0:	59 f0       	breq	.+22     	; 0x1b8 <main+0x82>
     1a2:	1a c0       	rjmp	.+52     	; 0x1d8 <main+0xa2>
     1a4:	83 30       	cpi	r24, 0x03	; 3
     1a6:	81 f0       	breq	.+32     	; 0x1c8 <main+0x92>
     1a8:	84 30       	cpi	r24, 0x04	; 4
     1aa:	89 f0       	breq	.+34     	; 0x1ce <main+0x98>
     1ac:	15 c0       	rjmp	.+42     	; 0x1d8 <main+0xa2>
		   {
			case SLOT_1:
			   SLOT_1_TASKS();
     1ae:	0e 94 b4 07 	call	0xf68	; 0xf68 <Sounds__Background>
     1b2:	0e 94 ba 05 	call	0xb74	; 0xb74 <Hal__BackgroundHandler>
			   break;
     1b6:	13 c0       	rjmp	.+38     	; 0x1de <main+0xa8>

			case SLOT_2:
			   SLOT_2_TASKS();
     1b8:	0e 94 5a 00 	call	0xb4	; 0xb4 <Appl__Handler>
			   break;
     1bc:	10 c0       	rjmp	.+32     	; 0x1de <main+0xa8>

			case SLOT_3:
			  SLOT_3_TASKS();
     1be:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <ADC__Handler>
     1c2:	0e 94 b7 06 	call	0xd6e	; 0xd6e <PositionSensor__ConversionHandler>
			  break;
     1c6:	0b c0       	rjmp	.+22     	; 0x1de <main+0xa8>

			case SLOT_4:
			  SLOT_4_TASKS();
     1c8:	0e 94 21 01 	call	0x242	; 0x242 <OvenPositionControl__Handler>
			  break;
     1cc:	08 c0       	rjmp	.+16     	; 0x1de <main+0xa8>

			case SLOT_5:
			  SLOT_5_TASKS();
     1ce:	0e 94 51 06 	call	0xca2	; 0xca2 <UpdateDisplaySevenSeg>
     1d2:	0e 94 f6 05 	call	0xbec	; 0xbec <UpdateDisplayLeds>
			  break;
     1d6:	03 c0       	rjmp	.+6      	; 0x1de <main+0xa8>

			default:
			  Slot = SLOT_1;
			  break;
	       }
	Slot++;
     1d8:	c0 93 58 01 	sts	0x0158, r28	; 0x800158 <Slot>
     1dc:	d5 cf       	rjmp	.-86     	; 0x188 <main+0x52>
     1de:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <Slot>
     1e2:	8f 5f       	subi	r24, 0xFF	; 255
     1e4:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <Slot>
	if(Slot >= NUM_OF_MAIN_SLOTS)
     1e8:	85 30       	cpi	r24, 0x05	; 5
     1ea:	70 f2       	brcs	.-100    	; 0x188 <main+0x52>
		Slot = SLOT_1;
     1ec:	10 92 58 01 	sts	0x0158, r1	; 0x800158 <Slot>
     1f0:	cb cf       	rjmp	.-106    	; 0x188 <main+0x52>

000001f2 <OvenPositionControl__Initialize>:


//---------------------------------------------------------------------------------------------------------------------
void OvenPositionControl__Initialize(void)
{
	Oven_PositionControl_State = OVEN_OFF;
     1f2:	10 92 5a 01 	sts	0x015A, r1	; 0x80015a <Oven_PositionControl_State>
     1f6:	08 95       	ret

000001f8 <OvenPosition__SetSolicitation>:
}

void OvenPosition__SetSolicitation(OVEN_POSITION_CONTROL_SOLICITATION_TYPE state)
{
	Oven_PositionControl_Solicitation = state;
     1f8:	80 93 5b 01 	sts	0x015B, r24	; 0x80015b <Oven_PositionControl_Solicitation>
	
	current_position = PositionSensor__GetMeters(POSITION_SENSOR_1);
     1fc:	80 e0       	ldi	r24, 0x00	; 0
     1fe:	0e 94 bf 06 	call	0xd7e	; 0xd7e <PositionSensor__GetMeters>
     202:	90 93 5d 01 	sts	0x015D, r25	; 0x80015d <current_position+0x1>
     206:	80 93 5c 01 	sts	0x015C, r24	; 0x80015c <current_position>
	if(Oven_PositionControl_Solicitation == GROUND)
     20a:	20 91 5b 01 	lds	r18, 0x015B	; 0x80015b <Oven_PositionControl_Solicitation>
     20e:	21 11       	cpse	r18, r1
     210:	0b c0       	rjmp	.+22     	; 0x228 <OvenPosition__SetSolicitation+0x30>
	{
		if(POSITION_GROUND_MAX >= current_position)
     212:	85 3f       	cpi	r24, 0xF5	; 245
     214:	91 40       	sbci	r25, 0x01	; 1
     216:	20 f4       	brcc	.+8      	; 0x220 <OvenPosition__SetSolicitation+0x28>
		{
			Oven_PositionControl_State = OVEN_INSIDE;
     218:	81 e0       	ldi	r24, 0x01	; 1
     21a:	80 93 5a 01 	sts	0x015A, r24	; 0x80015a <Oven_PositionControl_State>
     21e:	08 95       	ret
		}
		else
		{
			Oven_PositionControl_State = OVEN_OUTSIDE_UP;
     220:	83 e0       	ldi	r24, 0x03	; 3
     222:	80 93 5a 01 	sts	0x015A, r24	; 0x80015a <Oven_PositionControl_State>
     226:	08 95       	ret
		}
	}
	if(Oven_PositionControl_Solicitation == FIRST)
     228:	21 30       	cpi	r18, 0x01	; 1
     22a:	51 f4       	brne	.+20     	; 0x240 <OvenPosition__SetSolicitation+0x48>
	{	
		if(current_position >= POSITION_FIRST_MIN)
     22c:	85 3f       	cpi	r24, 0xF5	; 245
     22e:	91 40       	sbci	r25, 0x01	; 1
     230:	20 f0       	brcs	.+8      	; 0x23a <OvenPosition__SetSolicitation+0x42>
		{
			Oven_PositionControl_State = OVEN_INSIDE;
     232:	81 e0       	ldi	r24, 0x01	; 1
     234:	80 93 5a 01 	sts	0x015A, r24	; 0x80015a <Oven_PositionControl_State>
     238:	08 95       	ret
		}
		else
		{
			Oven_PositionControl_State = OVEN_OUTSIDE_DOWN;
     23a:	82 e0       	ldi	r24, 0x02	; 2
     23c:	80 93 5a 01 	sts	0x015A, r24	; 0x80015a <Oven_PositionControl_State>
     240:	08 95       	ret

00000242 <OvenPositionControl__Handler>:
	}
}

void OvenPositionControl__Handler(void)
{
	OvenPosition__SetSolicitation(Oven_PositionControl_Solicitation);
     242:	80 91 5b 01 	lds	r24, 0x015B	; 0x80015b <Oven_PositionControl_Solicitation>
     246:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <OvenPosition__SetSolicitation>
	switch(Oven_PositionControl_State)
     24a:	80 91 5a 01 	lds	r24, 0x015A	; 0x80015a <Oven_PositionControl_State>
     24e:	82 30       	cpi	r24, 0x02	; 2
     250:	91 f0       	breq	.+36     	; 0x276 <OvenPositionControl__Handler+0x34>
     252:	83 30       	cpi	r24, 0x03	; 3
     254:	a1 f0       	breq	.+40     	; 0x27e <OvenPositionControl__Handler+0x3c>
     256:	81 30       	cpi	r24, 0x01	; 1
     258:	a9 f4       	brne	.+42     	; 0x284 <OvenPositionControl__Handler+0x42>
	{
		case OVEN_INSIDE:
			Display__SetState(STOPED);
     25a:	80 e0       	ldi	r24, 0x00	; 0
     25c:	0e 94 f1 05 	call	0xbe2	; 0xbe2 <Display__SetState>
			PortSensor__Movie(OPEN);
     260:	80 e0       	ldi	r24, 0x00	; 0
     262:	0e 94 8c 06 	call	0xd18	; 0xd18 <PortSensor__Movie>
			if (Door_state = SECOND_OPEN)
     266:	81 e0       	ldi	r24, 0x01	; 1
     268:	80 93 59 01 	sts	0x0159, r24	; 0x800159 <Door_state>
			{
				PortSensor__Movie(CLOSED);
     26c:	0e 94 8c 06 	call	0xd18	; 0xd18 <PortSensor__Movie>
			}
			else
			{
				Door_state = SECOND_OPEN;
			}
			Oven_PositionControl_State = OVEN_OFF;
     270:	10 92 5a 01 	sts	0x015A, r1	; 0x80015a <Oven_PositionControl_State>
		break;
     274:	08 95       	ret
		
		case OVEN_OUTSIDE_DOWN:
			Display__SetState(MOTOR_UP);		
     276:	81 e0       	ldi	r24, 0x01	; 1
     278:	0e 94 f1 05 	call	0xbe2	; 0xbe2 <Display__SetState>
		break;
     27c:	08 95       	ret
		
		case OVEN_OUTSIDE_UP:
			Display__SetState(MOTOR_DOWN);
     27e:	82 e0       	ldi	r24, 0x02	; 2
     280:	0e 94 f1 05 	call	0xbe2	; 0xbe2 <Display__SetState>
     284:	08 95       	ret

00000286 <ADC__Initialize>:
// Esta função configura somente os pinos de digital para analogico e inicializa o ADC_Buffer[]

// ********************************** 
 
void ADC__Initialize(void)
{
     286:	cf 93       	push	r28
     288:	df 93       	push	r29
	volatile ADC_REG_TYPE *adc_pt;   // tipo definido no micro.h
	adc_pt = ADC_REGISTERS;          // adc_pt aponta par ao inicio dos regs do ADC ($000078)
	
	

	Adc_Step = ADC_STEP_INIT;   // inicializa o Adc_Step em INIT
     28a:	10 92 6a 01 	sts	0x016A, r1	; 0x80016a <Adc_Step>
	Sampling_Time = 0;
     28e:	10 92 6b 01 	sts	0x016B, r1	; 0x80016b <Sampling_Time>
	adc_pt->DIDR0_REG.byte =0x00;  //  nenhuma entrada analógica habilitada
     292:	10 92 7e 00 	sts	0x007E, r1	; 0x80007e <__DATA_REGION_ORIGIN__+0x1e>
     296:	ce e5       	ldi	r28, 0x5E	; 94
     298:	d1 e0       	ldi	r29, 0x01	; 1
     29a:	64 e2       	ldi	r22, 0x24	; 36
     29c:	71 e0       	ldi	r23, 0x01	; 1
     29e:	ee e1       	ldi	r30, 0x1E	; 30
     2a0:	f1 e0       	ldi	r31, 0x01	; 1
	
	for(channel = 0; channel <NUM_OF_AD_CHANNELS ; channel++)
     2a2:	80 e0       	ldi	r24, 0x00	; 0
		if(Adc_Enable_Table[channel] == ENABLED)      // se o canal é habilitado, então deixa analógico
		{
			// Configures relative input as analog input
			if(channel < NUM_OF_AD_CHANNELS) 
			   {							// CH0 to CH5 are configured in DIDR0
			   adc_pt->DIDR0_REG.byte |= ADC_BIT_SET_MASK[channel];	// configura como analógico conforme o canal enabled
     2a4:	28 e7       	ldi	r18, 0x78	; 120
     2a6:	30 e0       	ldi	r19, 0x00	; 0
	Sampling_Time = 0;
	adc_pt->DIDR0_REG.byte =0x00;  //  nenhuma entrada analógica habilitada
	
	for(channel = 0; channel <NUM_OF_AD_CHANNELS ; channel++)
	 {
		ADC_Buffer[channel] = 0;
     2a8:	19 92       	st	Y+, r1
     2aa:	19 92       	st	Y+, r1

		if(Adc_Enable_Table[channel] == ENABLED)      // se o canal é habilitado, então deixa analógico
     2ac:	db 01       	movw	r26, r22
     2ae:	9d 91       	ld	r25, X+
     2b0:	bd 01       	movw	r22, r26
     2b2:	91 30       	cpi	r25, 0x01	; 1
     2b4:	51 f4       	brne	.+20     	; 0x2ca <ADC__Initialize+0x44>
		{
			// Configures relative input as analog input
			if(channel < NUM_OF_AD_CHANNELS) 
     2b6:	86 30       	cpi	r24, 0x06	; 6
     2b8:	40 f4       	brcc	.+16     	; 0x2ca <ADC__Initialize+0x44>
			   {							// CH0 to CH5 are configured in DIDR0
			   adc_pt->DIDR0_REG.byte |= ADC_BIT_SET_MASK[channel];	// configura como analógico conforme o canal enabled
     2ba:	d9 01       	movw	r26, r18
     2bc:	16 96       	adiw	r26, 0x06	; 6
     2be:	4c 91       	ld	r20, X
     2c0:	16 97       	sbiw	r26, 0x06	; 6
     2c2:	90 81       	ld	r25, Z
     2c4:	94 2b       	or	r25, r20
     2c6:	16 96       	adiw	r26, 0x06	; 6
     2c8:	9c 93       	st	X, r25

	Adc_Step = ADC_STEP_INIT;   // inicializa o Adc_Step em INIT
	Sampling_Time = 0;
	adc_pt->DIDR0_REG.byte =0x00;  //  nenhuma entrada analógica habilitada
	
	for(channel = 0; channel <NUM_OF_AD_CHANNELS ; channel++)
     2ca:	8f 5f       	subi	r24, 0xFF	; 255
     2cc:	31 96       	adiw	r30, 0x01	; 1
     2ce:	86 30       	cpi	r24, 0x06	; 6
     2d0:	59 f7       	brne	.-42     	; 0x2a8 <ADC__Initialize+0x22>
			   {							// CH0 to CH5 are configured in DIDR0
			   adc_pt->DIDR0_REG.byte |= ADC_BIT_SET_MASK[channel];	// configura como analógico conforme o canal enabled
			   }
		}
	 }  
}
     2d2:	df 91       	pop	r29
     2d4:	cf 91       	pop	r28
     2d6:	08 95       	ret

000002d8 <ADC__Handler>:
	unsigned short int value, value_high;
	volatile ADC_REG_TYPE *adc_pt;
	adc_pt = ADC_REGISTERS;
	

	switch(Adc_Step)
     2d8:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <Adc_Step>
     2dc:	82 30       	cpi	r24, 0x02	; 2
     2de:	81 f1       	breq	.+96     	; 0x340 <ADC__Handler+0x68>
     2e0:	28 f4       	brcc	.+10     	; 0x2ec <ADC__Handler+0x14>
     2e2:	88 23       	and	r24, r24
     2e4:	41 f0       	breq	.+16     	; 0x2f6 <ADC__Handler+0x1e>
     2e6:	81 30       	cpi	r24, 0x01	; 1
     2e8:	f9 f0       	breq	.+62     	; 0x328 <ADC__Handler+0x50>
     2ea:	5f c0       	rjmp	.+190    	; 0x3aa <ADC__Handler+0xd2>
     2ec:	83 30       	cpi	r24, 0x03	; 3
     2ee:	c1 f1       	breq	.+112    	; 0x360 <ADC__Handler+0x88>
     2f0:	84 30       	cpi	r24, 0x04	; 4
     2f2:	f1 f1       	breq	.+124    	; 0x370 <ADC__Handler+0x98>
     2f4:	5a c0       	rjmp	.+180    	; 0x3aa <ADC__Handler+0xd2>
	{
	case ADC_STEP_INIT:
		Adc_Channel++;											// Selects next channel
     2f6:	80 91 6c 01 	lds	r24, 0x016C	; 0x80016c <Adc_Channel>
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
		if(Adc_Channel >= NUM_OF_AD_CHANNELS)
     2fc:	86 30       	cpi	r24, 0x06	; 6
     2fe:	18 f4       	brcc	.+6      	; 0x306 <ADC__Handler+0x2e>
	

	switch(Adc_Step)
	{
	case ADC_STEP_INIT:
		Adc_Channel++;											// Selects next channel
     300:	80 93 6c 01 	sts	0x016C, r24	; 0x80016c <Adc_Channel>
     304:	02 c0       	rjmp	.+4      	; 0x30a <ADC__Handler+0x32>
		if(Adc_Channel >= NUM_OF_AD_CHANNELS)
		{
			Adc_Channel = AD_CH0;  // varre constantemente todas os canais
     306:	10 92 6c 01 	sts	0x016C, r1	; 0x80016c <Adc_Channel>
		}

		if(Adc_Enable_Table[Adc_Channel] == ENABLED)			// Checks if current channel is enabled
     30a:	e0 91 6c 01 	lds	r30, 0x016C	; 0x80016c <Adc_Channel>
     30e:	f0 e0       	ldi	r31, 0x00	; 0
     310:	ec 5d       	subi	r30, 0xDC	; 220
     312:	fe 4f       	sbci	r31, 0xFE	; 254
     314:	80 81       	ld	r24, Z
     316:	81 30       	cpi	r24, 0x01	; 1
     318:	09 f0       	breq	.+2      	; 0x31c <ADC__Handler+0x44>
     31a:	49 c0       	rjmp	.+146    	; 0x3ae <ADC__Handler+0xd6>
		{
			Adc_Step = ADC_STEP_SAMPLING;
     31c:	80 93 6a 01 	sts	0x016A, r24	; 0x80016a <Adc_Step>
			Sampling_Time = ADC_SAMPLING_TIME;
     320:	82 e3       	ldi	r24, 0x32	; 50
     322:	80 93 6b 01 	sts	0x016B, r24	; 0x80016b <Sampling_Time>
     326:	08 95       	ret
		}
		break;

	case ADC_STEP_SAMPLING:
		if(Sampling_Time)
     328:	80 91 6b 01 	lds	r24, 0x016B	; 0x80016b <Sampling_Time>
     32c:	88 23       	and	r24, r24
     32e:	21 f0       	breq	.+8      	; 0x338 <ADC__Handler+0x60>
		{
			Sampling_Time--;
     330:	81 50       	subi	r24, 0x01	; 1
     332:	80 93 6b 01 	sts	0x016B, r24	; 0x80016b <Sampling_Time>
     336:	08 95       	ret
		}
		else
		{
			Adc_Step = ADC_STEP_CONFIG_CHANNEL;	
     338:	82 e0       	ldi	r24, 0x02	; 2
     33a:	80 93 6a 01 	sts	0x016A, r24	; 0x80016a <Adc_Step>
     33e:	08 95       	ret
		}
		break;

	case ADC_STEP_CONFIG_CHANNEL:
	    adc_pt->ADMUX_REG.byte |= (unsigned char)Adc_Channel;	// Configures the channel be read
     340:	e8 e7       	ldi	r30, 0x78	; 120
     342:	f0 e0       	ldi	r31, 0x00	; 0
     344:	94 81       	ldd	r25, Z+4	; 0x04
     346:	80 91 6c 01 	lds	r24, 0x016C	; 0x80016c <Adc_Channel>
     34a:	89 2b       	or	r24, r25
     34c:	84 83       	std	Z+4, r24	; 0x04
		// ADC habilitado, sem auto trigger, sem interrupção, prescaler 128
		adc_pt->ADCSRA_REG.byte =  0x87; 
     34e:	87 e8       	ldi	r24, 0x87	; 135
     350:	82 83       	std	Z+2, r24	; 0x02
		// INICIA conversão
		adc_pt->ADCSRA_REG.bit.bit6  = 1;    //seta bit 6 (ADSC)
     352:	82 81       	ldd	r24, Z+2	; 0x02
     354:	80 64       	ori	r24, 0x40	; 64
     356:	82 83       	std	Z+2, r24	; 0x02
		Adc_Step = ADC_STEP_WAIT_CONVERSION;					// Set next step
     358:	83 e0       	ldi	r24, 0x03	; 3
     35a:	80 93 6a 01 	sts	0x016A, r24	; 0x80016a <Adc_Step>
		break;
     35e:	08 95       	ret
		
	case ADC_STEP_WAIT_CONVERSION:
		if(adc_pt->ADCSRA_REG.bit.bit6 == 0)	// Wait until conversion be completed
     360:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
     364:	86 fd       	sbrc	r24, 6
     366:	23 c0       	rjmp	.+70     	; 0x3ae <ADC__Handler+0xd6>
		   	Adc_Step = ADC_STEP_READ_RESULT;
     368:	84 e0       	ldi	r24, 0x04	; 4
     36a:	80 93 6a 01 	sts	0x016A, r24	; 0x80016a <Adc_Step>
     36e:	08 95       	ret
		break;

	case ADC_STEP_READ_RESULT:  // AQUI é feita a leitura do ADC físico!!!
	    if(adc_pt->ADMUX_REG.bit.bit5 == 1)   //8 bits
     370:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
     374:	85 ff       	sbrs	r24, 5
     376:	03 c0       	rjmp	.+6      	; 0x37e <ADC__Handler+0xa6>
		   {
			value = (unsigned short int)((adc_pt->ADCH_REG.byte)& LO_BYTE_MASK); // 8 bits   
     378:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
     37c:	30 e0       	ldi	r19, 0x00	; 0
		   }
		if(adc_pt->ADMUX_REG.bit.bit5 == 0)    // 10 bits
     37e:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
     382:	85 fd       	sbrc	r24, 5
     384:	06 c0       	rjmp	.+12     	; 0x392 <ADC__Handler+0xba>
		   {
			value = (unsigned short int)((adc_pt->ADCL_REG.byte)& LO_BYTE_MASK);
     386:	e8 e7       	ldi	r30, 0x78	; 120
     388:	f0 e0       	ldi	r31, 0x00	; 0
     38a:	20 81       	ld	r18, Z
			value_high = (unsigned short int)(adc_pt->ADCH_REG.byte <<8); 
     38c:	81 81       	ldd	r24, Z+1	; 0x01
			value |= value_high;	// Reads the conversion result bytes  
     38e:	30 e0       	ldi	r19, 0x00	; 0
     390:	38 2b       	or	r19, r24
		   }

		ADC_Buffer[Adc_Channel] = value;  // A leitura do ADC é colocado no buffer ADC_Buffer do respectivo canal.
     392:	e0 91 6c 01 	lds	r30, 0x016C	; 0x80016c <Adc_Channel>
     396:	f0 e0       	ldi	r31, 0x00	; 0
     398:	ee 0f       	add	r30, r30
     39a:	ff 1f       	adc	r31, r31
     39c:	e2 5a       	subi	r30, 0xA2	; 162
     39e:	fe 4f       	sbci	r31, 0xFE	; 254
     3a0:	31 83       	std	Z+1, r19	; 0x01
     3a2:	20 83       	st	Z, r18
		Adc_Step = ADC_STEP_INIT;
     3a4:	10 92 6a 01 	sts	0x016A, r1	; 0x80016a <Adc_Step>
		
		   //if (value >= 127)
		    //Hal__SetLed(LED_3, 0); //liga LED4
		  //else
		    //Hal__SetLed(LED_3, 1); //desliga LED4
	 	 break;
     3a8:	08 95       	ret

	default:
		Adc_Step = ADC_STEP_INIT;
     3aa:	10 92 6a 01 	sts	0x016A, r1	; 0x80016a <Adc_Step>
     3ae:	08 95       	ret

000003b0 <ADC__ConfigModes>:
{
	volatile ADC_REG_TYPE *adc_pt;
	adc_pt = ADC_REGISTERS;
	
	 	// seleção da tensão de referencia:
	adc_pt->ADMUX_REG.bit.bit7 = 0;   //tensão de referencia 5V
     3b0:	e8 e7       	ldi	r30, 0x78	; 120
     3b2:	f0 e0       	ldi	r31, 0x00	; 0
     3b4:	94 81       	ldd	r25, Z+4	; 0x04
     3b6:	9f 77       	andi	r25, 0x7F	; 127
     3b8:	94 83       	std	Z+4, r25	; 0x04
	adc_pt->ADMUX_REG.bit.bit6 = 1;   //tensão de referencia 5V
     3ba:	94 81       	ldd	r25, Z+4	; 0x04
     3bc:	90 64       	ori	r25, 0x40	; 64
     3be:	94 83       	std	Z+4, r25	; 0x04
	
	if(mode < NUM_OF_MODES)
     3c0:	82 30       	cpi	r24, 0x02	; 2
     3c2:	68 f4       	brcc	.+26     	; 0x3de <ADC__ConfigModes+0x2e>
	{
		if (mode == MODE_8BITS)
     3c4:	81 11       	cpse	r24, r1
     3c6:	04 c0       	rjmp	.+8      	; 0x3d0 <ADC__ConfigModes+0x20>
		   adc_pt->ADMUX_REG.bit.bit5 = 1;  //Micro.h => ADLAR = 1, alinhado a esquerda e a leitura é no ADCH (8 bits)
     3c8:	84 81       	ldd	r24, Z+4	; 0x04
     3ca:	80 62       	ori	r24, 0x20	; 32
     3cc:	84 83       	std	Z+4, r24	; 0x04
     3ce:	07 c0       	rjmp	.+14     	; 0x3de <ADC__ConfigModes+0x2e>
		if (mode == MODE_10BITS)
     3d0:	81 30       	cpi	r24, 0x01	; 1
     3d2:	29 f4       	brne	.+10     	; 0x3de <ADC__ConfigModes+0x2e>
		   adc_pt->ADMUX_REG.bit.bit5 = 0;  //ADLAR = 0, alinhado a direita e a leitura é primeiro no ADCL e depois ADCH (10 bits)
     3d4:	e8 e7       	ldi	r30, 0x78	; 120
     3d6:	f0 e0       	ldi	r31, 0x00	; 0
     3d8:	84 81       	ldd	r24, Z+4	; 0x04
     3da:	8f 7d       	andi	r24, 0xDF	; 223
     3dc:	84 83       	std	Z+4, r24	; 0x04
	}
		
	if(conv_type < NUM_OF_CONVERSION_TYPES)
     3de:	62 30       	cpi	r22, 0x02	; 2
     3e0:	78 f4       	brcc	.+30     	; 0x400 <__LOCK_REGION_LENGTH__>
	{
		if (conv_type == AD_SINGLE_CONVERSION)
     3e2:	61 11       	cpse	r22, r1
     3e4:	06 c0       	rjmp	.+12     	; 0x3f2 <ADC__ConfigModes+0x42>
		   adc_pt->ADCSRA_REG.bit.bit5 = 0;      //Micro.h => ADATE = 0, uma leitura
     3e6:	e8 e7       	ldi	r30, 0x78	; 120
     3e8:	f0 e0       	ldi	r31, 0x00	; 0
     3ea:	82 81       	ldd	r24, Z+2	; 0x02
     3ec:	8f 7d       	andi	r24, 0xDF	; 223
     3ee:	82 83       	std	Z+2, r24	; 0x02
     3f0:	08 95       	ret
		if (conv_type == AD_CONTINUOUS_CONVERSION)
     3f2:	61 30       	cpi	r22, 0x01	; 1
     3f4:	29 f4       	brne	.+10     	; 0x400 <__LOCK_REGION_LENGTH__>
		   adc_pt->ADCSRA_REG.bit.bit5 = 1;      //ADATE = 1, a fonte de disparo pode ser conversão continua, comparador analogico, etc 
     3f6:	e8 e7       	ldi	r30, 0x78	; 120
     3f8:	f0 e0       	ldi	r31, 0x00	; 0
     3fa:	82 81       	ldd	r24, Z+2	; 0x02
     3fc:	80 62       	ori	r24, 0x20	; 32
     3fe:	82 83       	std	Z+2, r24	; 0x02
     400:	08 95       	ret

00000402 <ADC__GetValue>:
 */


unsigned short int ADC__GetValue(AD_CHANNEL_TYPE channel)
{
	if(channel < NUM_OF_AD_CHANNELS)
     402:	86 30       	cpi	r24, 0x06	; 6
     404:	48 f4       	brcc	.+18     	; 0x418 <ADC__GetValue+0x16>
	{
		return ADC_Buffer[channel];  // retorna valor do ADC lido no ADC_Buffer do canal solcitado!
     406:	e8 2f       	mov	r30, r24
     408:	f0 e0       	ldi	r31, 0x00	; 0
     40a:	ee 0f       	add	r30, r30
     40c:	ff 1f       	adc	r31, r31
     40e:	e2 5a       	subi	r30, 0xA2	; 162
     410:	fe 4f       	sbci	r31, 0xFE	; 254
     412:	80 81       	ld	r24, Z
     414:	91 81       	ldd	r25, Z+1	; 0x01
     416:	08 95       	ret
	}
	return 0;
     418:	80 e0       	ldi	r24, 0x00	; 0
     41a:	90 e0       	ldi	r25, 0x00	; 0
}
     41c:	08 95       	ret

0000041e <Gpio__PinConfig>:
	volatile GPIO_DATA_TYPE *pt_data;
	//volatile GPIO_MISC_TYPE *pt_misc;
	unsigned char set_bit_mask;
	unsigned char clr_bit_mask;
	
	set_bit_mask = GPIO_PIN_SET_MASK[pin];
     41e:	70 e0       	ldi	r23, 0x00	; 0
     420:	fb 01       	movw	r30, r22
     422:	ee 5c       	subi	r30, 0xCE	; 206
     424:	fe 4f       	sbci	r31, 0xFE	; 254
     426:	20 81       	ld	r18, Z
	clr_bit_mask = GPIO_PIN_CLR_MASK[pin];
	
	
	switch(port)
     428:	81 30       	cpi	r24, 0x01	; 1
     42a:	31 f0       	breq	.+12     	; 0x438 <Gpio__PinConfig+0x1a>
     42c:	18 f0       	brcs	.+6      	; 0x434 <Gpio__PinConfig+0x16>
     42e:	82 30       	cpi	r24, 0x02	; 2
     430:	29 f0       	breq	.+10     	; 0x43c <Gpio__PinConfig+0x1e>
     432:	05 c0       	rjmp	.+10     	; 0x43e <Gpio__PinConfig+0x20>
	{
	case	PORT_B:
		pt_data = PORTB;   // Está no Micro.h: #define PORTA &GPIOA_DATA   => endereço 0x0000 00000
     434:	95 b1       	in	r25, 0x05	; 5
		break;
     436:	03 c0       	rjmp	.+6      	; 0x43e <Gpio__PinConfig+0x20>
	case	PORT_C:
		pt_data = PORTC;
     438:	98 b1       	in	r25, 0x08	; 8
		break;
     43a:	01 c0       	rjmp	.+2      	; 0x43e <Gpio__PinConfig+0x20>
	case	PORT_D:
		pt_data = PORTD;
     43c:	9b b1       	in	r25, 0x0b	; 11
		break;
	default:
		break;
	}
if(type == OUTPUT_DIGITAL)    // setar 1 para saída
     43e:	41 30       	cpi	r20, 0x01	; 1
     440:	69 f4       	brne	.+26     	; 0x45c <Gpio__PinConfig+0x3e>
{
	//var = pt_data->DIRECION_REG.byte;
	//BIT_SET(var,pin);      // Está no C_types.h =>  #define BIT_SET(mem,bit)    ((mem)|=(1UL<<(bit))) //This macro is used to set the bit of the data
	//pt_data->DIRECION_REG.byte = var;  
	//   OU
	pt_data = GPIO_DATA_LIST[port];		 	
     442:	e8 2f       	mov	r30, r24
     444:	f0 e0       	ldi	r31, 0x00	; 0
     446:	ee 0f       	add	r30, r30
     448:	ff 1f       	adc	r31, r31
     44a:	e0 50       	subi	r30, 0x00	; 0
     44c:	ff 4f       	sbci	r31, 0xFF	; 255
     44e:	01 90       	ld	r0, Z+
     450:	f0 81       	ld	r31, Z
     452:	e0 2d       	mov	r30, r0
	pt_data->DIRECION_REG.byte |= set_bit_mask;	// Config Output
     454:	81 81       	ldd	r24, Z+1	; 0x01
     456:	82 2b       	or	r24, r18
     458:	81 83       	std	Z+1, r24	; 0x01
     45a:	08 95       	ret
}

if(type == INPUT_DIGITAL_PULLUP)
     45c:	41 11       	cpse	r20, r1
     45e:	14 c0       	rjmp	.+40     	; 0x488 <Gpio__PinConfig+0x6a>
{
	pt_data = GPIO_DATA_LIST[port];		 	
     460:	e8 2f       	mov	r30, r24
     462:	f0 e0       	ldi	r31, 0x00	; 0
     464:	ee 0f       	add	r30, r30
     466:	ff 1f       	adc	r31, r31
     468:	e0 50       	subi	r30, 0x00	; 0
     46a:	ff 4f       	sbci	r31, 0xFF	; 255
     46c:	01 90       	ld	r0, Z+
     46e:	f0 81       	ld	r31, Z
     470:	e0 2d       	mov	r30, r0
	pt_data->DIRECION_REG.byte &= clr_bit_mask; 	// Config Input
     472:	81 81       	ldd	r24, Z+1	; 0x01
	//volatile GPIO_MISC_TYPE *pt_misc;
	unsigned char set_bit_mask;
	unsigned char clr_bit_mask;
	
	set_bit_mask = GPIO_PIN_SET_MASK[pin];
	clr_bit_mask = GPIO_PIN_CLR_MASK[pin];
     474:	db 01       	movw	r26, r22
     476:	a6 5d       	subi	r26, 0xD6	; 214
     478:	be 4f       	sbci	r27, 0xFE	; 254
}

if(type == INPUT_DIGITAL_PULLUP)
{
	pt_data = GPIO_DATA_LIST[port];		 	
	pt_data->DIRECION_REG.byte &= clr_bit_mask; 	// Config Input
     47a:	9c 91       	ld	r25, X
     47c:	98 23       	and	r25, r24
     47e:	91 83       	std	Z+1, r25	; 0x01
	
	pt_data->DATA_OUT_PULL_REG.byte |= set_bit_mask;   // Config Input Pull up
     480:	92 81       	ldd	r25, Z+2	; 0x02
     482:	82 2f       	mov	r24, r18
     484:	89 2b       	or	r24, r25
     486:	82 83       	std	Z+2, r24	; 0x02
     488:	08 95       	ret

0000048a <Gpio__PinWrite>:
 **********************************************************************************/
void Gpio__PinWrite(GPIO_PORT port,unsigned char pin,unsigned char value)
{
	volatile GPIO_DATA_TYPE *pt_data;
	
	  if (value == 0)
     48a:	41 11       	cpse	r20, r1
     48c:	14 c0       	rjmp	.+40     	; 0x4b6 <Gpio__PinWrite+0x2c>
        {
        	pt_data = GPIO_DATA_LIST[port];		 	
     48e:	e8 2f       	mov	r30, r24
     490:	f0 e0       	ldi	r31, 0x00	; 0
     492:	ee 0f       	add	r30, r30
     494:	ff 1f       	adc	r31, r31
     496:	e0 50       	subi	r30, 0x00	; 0
     498:	ff 4f       	sbci	r31, 0xFF	; 255
     49a:	a0 81       	ld	r26, Z
     49c:	b1 81       	ldd	r27, Z+1	; 0x01
        	pt_data->DATA_OUT_PULL_REG.byte &= GPIO_PIN_CLR_MASK[pin];
     49e:	12 96       	adiw	r26, 0x02	; 2
     4a0:	9c 91       	ld	r25, X
     4a2:	12 97       	sbiw	r26, 0x02	; 2
     4a4:	e6 2f       	mov	r30, r22
     4a6:	f0 e0       	ldi	r31, 0x00	; 0
     4a8:	e6 5d       	subi	r30, 0xD6	; 214
     4aa:	fe 4f       	sbci	r31, 0xFE	; 254
     4ac:	80 81       	ld	r24, Z
     4ae:	89 23       	and	r24, r25
     4b0:	12 96       	adiw	r26, 0x02	; 2
     4b2:	8c 93       	st	X, r24
     4b4:	08 95       	ret
        }
        else
        {
        	pt_data = GPIO_DATA_LIST[port];
     4b6:	e8 2f       	mov	r30, r24
     4b8:	f0 e0       	ldi	r31, 0x00	; 0
     4ba:	ee 0f       	add	r30, r30
     4bc:	ff 1f       	adc	r31, r31
     4be:	e0 50       	subi	r30, 0x00	; 0
     4c0:	ff 4f       	sbci	r31, 0xFF	; 255
     4c2:	a0 81       	ld	r26, Z
     4c4:	b1 81       	ldd	r27, Z+1	; 0x01
        	pt_data->DATA_OUT_PULL_REG.byte |= GPIO_PIN_SET_MASK[pin];
     4c6:	12 96       	adiw	r26, 0x02	; 2
     4c8:	9c 91       	ld	r25, X
     4ca:	12 97       	sbiw	r26, 0x02	; 2
     4cc:	e6 2f       	mov	r30, r22
     4ce:	f0 e0       	ldi	r31, 0x00	; 0
     4d0:	ee 5c       	subi	r30, 0xCE	; 206
     4d2:	fe 4f       	sbci	r31, 0xFE	; 254
     4d4:	80 81       	ld	r24, Z
     4d6:	89 2b       	or	r24, r25
     4d8:	12 96       	adiw	r26, 0x02	; 2
     4da:	8c 93       	st	X, r24
     4dc:	08 95       	ret

000004de <Gpio__PinRead>:
unsigned char Gpio__PinRead(GPIO_PORT port,unsigned char pin)
{
	volatile GPIO_DATA_TYPE *pt_data;
	unsigned char pin_state = SW_OFF;       // pin_state = OFF  não pressionado  
	
		pt_data = GPIO_DATA_LIST[port];
     4de:	e8 2f       	mov	r30, r24
     4e0:	f0 e0       	ldi	r31, 0x00	; 0
     4e2:	ee 0f       	add	r30, r30
     4e4:	ff 1f       	adc	r31, r31
     4e6:	e0 50       	subi	r30, 0x00	; 0
     4e8:	ff 4f       	sbci	r31, 0xFF	; 255
     4ea:	01 90       	ld	r0, Z+
     4ec:	f0 81       	ld	r31, Z
     4ee:	e0 2d       	mov	r30, r0
    	if (pt_data->DATA_IN_REG.byte & GPIO_PIN_SET_MASK[pin])     // if(leitura != 0)   ou if(leitura)
     4f0:	90 81       	ld	r25, Z
     4f2:	e6 2f       	mov	r30, r22
     4f4:	f0 e0       	ldi	r31, 0x00	; 0
     4f6:	ee 5c       	subi	r30, 0xCE	; 206
     4f8:	fe 4f       	sbci	r31, 0xFE	; 254
           pin_state = SW_OFF;     // pin_state = SW_OFF   não acionado
        else
		   pin_state = SW_ON;
   
    return (pin_state);
     4fa:	80 81       	ld	r24, Z
     4fc:	98 23       	and	r25, r24
     4fe:	81 e0       	ldi	r24, 0x01	; 1
     500:	09 f4       	brne	.+2      	; 0x504 <Gpio__PinRead+0x26>
     502:	80 e0       	ldi	r24, 0x00	; 0
    
}
     504:	08 95       	ret

00000506 <Pwm__SetTCFrequency>:

pwm_pt0 = TC0_REGISTERS;
pwm_pt1 = TC1_REGISTERS;
pwm_pt2 = TC2_REGISTERS;

if((frequency > 1900) && frequency  < 2100 ){
     506:	9b 01       	movw	r18, r22
     508:	2d 56       	subi	r18, 0x6D	; 109
     50a:	37 40       	sbci	r19, 0x07	; 7
     50c:	27 3c       	cpi	r18, 0xC7	; 199
     50e:	31 05       	cpc	r19, r1
     510:	18 f5       	brcc	.+70     	; 0x558 <Pwm__SetTCFrequency+0x52>
	switch(tc){
     512:	81 30       	cpi	r24, 0x01	; 1
     514:	69 f0       	breq	.+26     	; 0x530 <Pwm__SetTCFrequency+0x2a>
     516:	18 f0       	brcs	.+6      	; 0x51e <Pwm__SetTCFrequency+0x18>
     518:	82 30       	cpi	r24, 0x02	; 2
     51a:	a1 f0       	breq	.+40     	; 0x544 <Pwm__SetTCFrequency+0x3e>
     51c:	1d c0       	rjmp	.+58     	; 0x558 <Pwm__SetTCFrequency+0x52>
		case PWM_TC0:
		pwm_pt0->TCCR0B_REG.byte = 0b00100010;
     51e:	92 e2       	ldi	r25, 0x22	; 34
     520:	95 bd       	out	0x25, r25	; 37
		default:
		break;
	}
}

if((frequency > 2900) && frequency  < 3100 ){
     522:	9b 01       	movw	r18, r22
     524:	25 55       	subi	r18, 0x55	; 85
     526:	3b 40       	sbci	r19, 0x0B	; 11
     528:	27 3c       	cpi	r18, 0xC7	; 199
     52a:	31 05       	cpc	r19, r1
     52c:	08 f1       	brcs	.+66     	; 0x570 <Pwm__SetTCFrequency+0x6a>
     52e:	79 c0       	rjmp	.+242    	; 0x622 <Pwm__SetTCFrequency+0x11c>
	switch(tc){
		case PWM_TC0:
		pwm_pt0->TCCR0B_REG.byte = 0b00100010;
		break;
		case PWM_TC1:
		pwm_pt1->TCCR1B_REG.byte = 0b00100010;
     530:	92 e2       	ldi	r25, 0x22	; 34
     532:	90 93 81 00 	sts	0x0081, r25	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
		default:
		break;
	}
}

if((frequency > 2900) && frequency  < 3100 ){
     536:	9b 01       	movw	r18, r22
     538:	25 55       	subi	r18, 0x55	; 85
     53a:	3b 40       	sbci	r19, 0x0B	; 11
     53c:	27 3c       	cpi	r18, 0xC7	; 199
     53e:	31 05       	cpc	r19, r1
     540:	00 f1       	brcs	.+64     	; 0x582 <Pwm__SetTCFrequency+0x7c>
     542:	76 c0       	rjmp	.+236    	; 0x630 <Pwm__SetTCFrequency+0x12a>
		pwm_pt1->TCCR1B_REG.byte = 0b00100010;
		break;
		case PWM_TC2:
		//pwm_pt2->TCCR2A_REG.byte = 0b00100001; //MODO 1 para PWM fase corrigida,
		//pwm_pt2->TCCR2A_REG.byte = 0b00110001; //MODO 1 para PWM fase corrigida,
		pwm_pt2->TCCR2B_REG.byte = 0b00100010;
     544:	92 e2       	ldi	r25, 0x22	; 34
     546:	90 93 b1 00 	sts	0x00B1, r25	; 0x8000b1 <__DATA_REGION_ORIGIN__+0x51>
		default:
		break;
	}
}

if((frequency > 2900) && frequency  < 3100 ){
     54a:	9b 01       	movw	r18, r22
     54c:	25 55       	subi	r18, 0x55	; 85
     54e:	3b 40       	sbci	r19, 0x0B	; 11
     550:	27 3c       	cpi	r18, 0xC7	; 199
     552:	31 05       	cpc	r19, r1
     554:	00 f1       	brcs	.+64     	; 0x596 <Pwm__SetTCFrequency+0x90>
     556:	73 c0       	rjmp	.+230    	; 0x63e <Pwm__SetTCFrequency+0x138>
     558:	9b 01       	movw	r18, r22
     55a:	25 55       	subi	r18, 0x55	; 85
     55c:	3b 40       	sbci	r19, 0x0B	; 11
     55e:	27 3c       	cpi	r18, 0xC7	; 199
     560:	31 05       	cpc	r19, r1
     562:	18 f5       	brcc	.+70     	; 0x5aa <Pwm__SetTCFrequency+0xa4>
	switch(tc){
     564:	81 30       	cpi	r24, 0x01	; 1
     566:	69 f0       	breq	.+26     	; 0x582 <Pwm__SetTCFrequency+0x7c>
     568:	18 f0       	brcs	.+6      	; 0x570 <Pwm__SetTCFrequency+0x6a>
     56a:	82 30       	cpi	r24, 0x02	; 2
     56c:	f1 f4       	brne	.+60     	; 0x5aa <Pwm__SetTCFrequency+0xa4>
     56e:	13 c0       	rjmp	.+38     	; 0x596 <Pwm__SetTCFrequency+0x90>
		case PWM_TC0:
		pwm_pt0->TCCR0B_REG.byte = 0b00100011;
     570:	93 e2       	ldi	r25, 0x23	; 35
     572:	95 bd       	out	0x25, r25	; 37
		default:
		break;
	}
}

if((frequency > 3900) && frequency  < 4100 ){
     574:	9b 01       	movw	r18, r22
     576:	2d 53       	subi	r18, 0x3D	; 61
     578:	3f 40       	sbci	r19, 0x0F	; 15
     57a:	27 3c       	cpi	r18, 0xC7	; 199
     57c:	31 05       	cpc	r19, r1
     57e:	08 f1       	brcs	.+66     	; 0x5c2 <Pwm__SetTCFrequency+0xbc>
     580:	3a c0       	rjmp	.+116    	; 0x5f6 <Pwm__SetTCFrequency+0xf0>
	switch(tc){
		case PWM_TC0:
		pwm_pt0->TCCR0B_REG.byte = 0b00100011;
		break;
		case PWM_TC1:
		pwm_pt1->TCCR1B_REG.byte = 0b00100011;
     582:	93 e2       	ldi	r25, 0x23	; 35
     584:	90 93 81 00 	sts	0x0081, r25	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
		default:
		break;
	}
}

if((frequency > 3900) && frequency  < 4100 ){
     588:	9b 01       	movw	r18, r22
     58a:	2d 53       	subi	r18, 0x3D	; 61
     58c:	3f 40       	sbci	r19, 0x0F	; 15
     58e:	27 3c       	cpi	r18, 0xC7	; 199
     590:	31 05       	cpc	r19, r1
     592:	f8 f0       	brcs	.+62     	; 0x5d2 <Pwm__SetTCFrequency+0xcc>
     594:	30 c0       	rjmp	.+96     	; 0x5f6 <Pwm__SetTCFrequency+0xf0>
		pwm_pt1->TCCR1B_REG.byte = 0b00100011;
		break;
		case PWM_TC2:
		//pwm_pt2->TCCR2A_REG.byte =  0b00100001; //MODO 1 para PWM fase corrigida,
		//pwm_pt2->TCCR2A_REG.byte = 0b00110001; //MODO 1 para PWM fase corrigida,
		pwm_pt2->TCCR2B_REG.byte = 0b00100011;
     596:	93 e2       	ldi	r25, 0x23	; 35
     598:	90 93 b1 00 	sts	0x00B1, r25	; 0x8000b1 <__DATA_REGION_ORIGIN__+0x51>
		default:
		break;
	}
}

if((frequency > 3900) && frequency  < 4100 ){
     59c:	9b 01       	movw	r18, r22
     59e:	2d 53       	subi	r18, 0x3D	; 61
     5a0:	3f 40       	sbci	r19, 0x0F	; 15
     5a2:	27 3c       	cpi	r18, 0xC7	; 199
     5a4:	31 05       	cpc	r19, r1
     5a6:	f0 f0       	brcs	.+60     	; 0x5e4 <Pwm__SetTCFrequency+0xde>
     5a8:	26 c0       	rjmp	.+76     	; 0x5f6 <Pwm__SetTCFrequency+0xf0>
     5aa:	9b 01       	movw	r18, r22
     5ac:	2d 53       	subi	r18, 0x3D	; 61
     5ae:	3f 40       	sbci	r19, 0x0F	; 15
     5b0:	27 3c       	cpi	r18, 0xC7	; 199
     5b2:	31 05       	cpc	r19, r1
     5b4:	00 f5       	brcc	.+64     	; 0x5f6 <Pwm__SetTCFrequency+0xf0>
switch(tc){
     5b6:	81 30       	cpi	r24, 0x01	; 1
     5b8:	61 f0       	breq	.+24     	; 0x5d2 <Pwm__SetTCFrequency+0xcc>
     5ba:	18 f0       	brcs	.+6      	; 0x5c2 <Pwm__SetTCFrequency+0xbc>
     5bc:	82 30       	cpi	r24, 0x02	; 2
     5be:	d9 f4       	brne	.+54     	; 0x5f6 <Pwm__SetTCFrequency+0xf0>
     5c0:	11 c0       	rjmp	.+34     	; 0x5e4 <Pwm__SetTCFrequency+0xde>
case PWM_TC0:
   pwm_pt0->TCCR0B_REG.byte = 0x02; //prescaler = 8 dando frequencia de 4000Hz
     5c2:	82 e0       	ldi	r24, 0x02	; 2
     5c4:	85 bd       	out	0x25, r24	; 37
default:
	break;
}
}

if((frequency > 4900) && frequency  < 5100 ){
     5c6:	65 52       	subi	r22, 0x25	; 37
     5c8:	73 41       	sbci	r23, 0x13	; 19
     5ca:	67 3c       	cpi	r22, 0xC7	; 199
     5cc:	71 05       	cpc	r23, r1
     5ce:	f0 f0       	brcs	.+60     	; 0x60c <Pwm__SetTCFrequency+0x106>
     5d0:	08 95       	ret
switch(tc){
case PWM_TC0:
   pwm_pt0->TCCR0B_REG.byte = 0x02; //prescaler = 8 dando frequencia de 4000Hz
   break;   
case PWM_TC1:
	pwm_pt1->TCCR1B_REG.byte = 0x02; //prescaler = 8 dando frequencia de 4000Hz
     5d2:	82 e0       	ldi	r24, 0x02	; 2
     5d4:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
default:
	break;
}
}

if((frequency > 4900) && frequency  < 5100 ){
     5d8:	65 52       	subi	r22, 0x25	; 37
     5da:	73 41       	sbci	r23, 0x13	; 19
     5dc:	67 3c       	cpi	r22, 0xC7	; 199
     5de:	71 05       	cpc	r23, r1
     5e0:	c0 f0       	brcs	.+48     	; 0x612 <Pwm__SetTCFrequency+0x10c>
     5e2:	08 95       	ret
case PWM_TC1:
	pwm_pt1->TCCR1B_REG.byte = 0x02; //prescaler = 8 dando frequencia de 4000Hz
	break;
case PWM_TC2:
    //pwm_pt2->TCCR2A_REG.byte =  0b00100001; //MODO 1 para PWM fase corrigida,
	pwm_pt2->TCCR2B_REG.byte = 0x02; //prescaler = 8 dando frequencia de 4000Hz   	
     5e4:	82 e0       	ldi	r24, 0x02	; 2
     5e6:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__DATA_REGION_ORIGIN__+0x51>
default:
	break;
}
}

if((frequency > 4900) && frequency  < 5100 ){
     5ea:	65 52       	subi	r22, 0x25	; 37
     5ec:	73 41       	sbci	r23, 0x13	; 19
     5ee:	67 3c       	cpi	r22, 0xC7	; 199
     5f0:	71 05       	cpc	r23, r1
     5f2:	98 f0       	brcs	.+38     	; 0x61a <Pwm__SetTCFrequency+0x114>
     5f4:	08 95       	ret
     5f6:	65 52       	subi	r22, 0x25	; 37
     5f8:	73 41       	sbci	r23, 0x13	; 19
     5fa:	67 3c       	cpi	r22, 0xC7	; 199
     5fc:	71 05       	cpc	r23, r1
     5fe:	30 f5       	brcc	.+76     	; 0x64c <Pwm__SetTCFrequency+0x146>
	switch(tc){
     600:	81 30       	cpi	r24, 0x01	; 1
     602:	39 f0       	breq	.+14     	; 0x612 <Pwm__SetTCFrequency+0x10c>
     604:	18 f0       	brcs	.+6      	; 0x60c <Pwm__SetTCFrequency+0x106>
     606:	82 30       	cpi	r24, 0x02	; 2
     608:	09 f5       	brne	.+66     	; 0x64c <Pwm__SetTCFrequency+0x146>
     60a:	07 c0       	rjmp	.+14     	; 0x61a <Pwm__SetTCFrequency+0x114>
		case PWM_TC0:
		pwm_pt0->TCCR0B_REG.byte = 0b00100101;
     60c:	85 e2       	ldi	r24, 0x25	; 37
     60e:	85 bd       	out	0x25, r24	; 37
		break;
     610:	08 95       	ret
		case PWM_TC1:
		pwm_pt1->TCCR1B_REG.byte = 0b00100101;
     612:	85 e2       	ldi	r24, 0x25	; 37
     614:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
		break;
     618:	08 95       	ret
		case PWM_TC2:
		//pwm_pt2->TCCR2A_REG.byte =  0b00100001; //MODO 1 para PWM fase corrigida,
		//pwm_pt2->TCCR2A_REG.byte = 0b00110001; //MODO 1 para PWM fase corrigida,
		pwm_pt2->TCCR2B_REG.byte = 0b00100101;
     61a:	85 e2       	ldi	r24, 0x25	; 37
     61c:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__DATA_REGION_ORIGIN__+0x51>

		default:
		break;
	}
}
}  // fim da função
     620:	08 95       	ret
		default:
		break;
	}
}

if((frequency > 3900) && frequency  < 4100 ){
     622:	9b 01       	movw	r18, r22
     624:	2d 53       	subi	r18, 0x3D	; 61
     626:	3f 40       	sbci	r19, 0x0F	; 15
     628:	27 3c       	cpi	r18, 0xC7	; 199
     62a:	31 05       	cpc	r19, r1
     62c:	50 f2       	brcs	.-108    	; 0x5c2 <Pwm__SetTCFrequency+0xbc>
     62e:	e3 cf       	rjmp	.-58     	; 0x5f6 <Pwm__SetTCFrequency+0xf0>
     630:	9b 01       	movw	r18, r22
     632:	2d 53       	subi	r18, 0x3D	; 61
     634:	3f 40       	sbci	r19, 0x0F	; 15
     636:	27 3c       	cpi	r18, 0xC7	; 199
     638:	31 05       	cpc	r19, r1
     63a:	58 f2       	brcs	.-106    	; 0x5d2 <Pwm__SetTCFrequency+0xcc>
     63c:	dc cf       	rjmp	.-72     	; 0x5f6 <Pwm__SetTCFrequency+0xf0>
     63e:	9b 01       	movw	r18, r22
     640:	2d 53       	subi	r18, 0x3D	; 61
     642:	3f 40       	sbci	r19, 0x0F	; 15
     644:	27 3c       	cpi	r18, 0xC7	; 199
     646:	31 05       	cpc	r19, r1
     648:	68 f2       	brcs	.-102    	; 0x5e4 <Pwm__SetTCFrequency+0xde>
     64a:	d5 cf       	rjmp	.-86     	; 0x5f6 <Pwm__SetTCFrequency+0xf0>
     64c:	08 95       	ret

0000064e <Pwm__Initialize>:
//   Esta rotina  faz a configuração do PWM (buzzer)
//
//*********************************************************
 
// Inicialização do módulo PWM ( Buzzer está no PD3 OC2B !!)
void Pwm__Initialize(void){
     64e:	cf 93       	push	r28
     650:	df 93       	push	r29
volatile TC2_REG_TYPE *pwm_pt2;

pwm_pt2 = TC2_REGISTERS;

// porta de  saida para buzina
bitWrite(DDRD, 3, OUTPUT_DIGITAL);
     652:	53 9a       	sbi	0x0a, 3	; 10
//bitWrite(PORTD, 3, 0);
// saida Buzzer para OC2B
pwm_pt2->TCCR2A_REG.byte =  0b00110001; //MODO 1 para PWM fase corrigida, 
     654:	c0 eb       	ldi	r28, 0xB0	; 176
     656:	d0 e0       	ldi	r29, 0x00	; 0
     658:	81 e3       	ldi	r24, 0x31	; 49
     65a:	88 83       	st	Y, r24
                       // saida  OC2B  INVERTIDA TOP = 0xFF, OC2B habilitado
//pwm_pt2->TCCR2B_REG.byte =  0b00000010; //TC2 parado

Pwm__SetTCFrequency(PWM_TC2, BUZZER_DEFAULT_FREQ);
     65c:	60 e7       	ldi	r22, 0x70	; 112
     65e:	77 e1       	ldi	r23, 0x17	; 23
     660:	82 e0       	ldi	r24, 0x02	; 2
     662:	0e 94 83 02 	call	0x506	; 0x506 <Pwm__SetTCFrequency>
	 break;    // tem que checar para 16 bits
case PWM4:
	 pwm_pt2->OCR2A_REG.byte = (unsigned char)(255*duty/100); //considerando TOP = 255
	 break;    // tem que checar para 16 bits
case PWM5:
	pwm_pt2->OCR2B_REG.byte = (unsigned char)(255*duty/100); //considerando TOP = 255
     666:	1c 82       	std	Y+4, r1	; 0x04

Pwm__SetTCFrequency(PWM_TC2, BUZZER_DEFAULT_FREQ);
Pwm__SetDutyCycle(PWM5, BUZZER_OFF_DUTY);  //desliga o buzzer
// desligar a buzina com duty cycle igual a 0
//pwm_pt2->OCR2B_REG.byte =  0;	
}
     668:	df 91       	pop	r29
     66a:	cf 91       	pop	r28
     66c:	08 95       	ret

0000066e <Pwm__SetDutyCycle>:
//
//   Esta rotina configura o PWM TC num determinado 
//   ciclo de trabalho ( 0 a 100)
//
//*********************************************************
void Pwm__SetDutyCycle( PWM_ID_TYPE pwm, unsigned char duty){
     66e:	65 36       	cpi	r22, 0x65	; 101
     670:	08 f0       	brcs	.+2      	; 0x674 <Pwm__SetDutyCycle+0x6>
     672:	64 e6       	ldi	r22, 0x64	; 100
pwm_pt0 = TC0_REGISTERS;
pwm_pt1 = TC1_REGISTERS;
pwm_pt2 = TC2_REGISTERS;
if (duty >100)
   duty = 100;
switch (pwm){
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	01 f1       	breq	.+64     	; 0x6b8 <Pwm__SetDutyCycle+0x4a>
     678:	28 f4       	brcc	.+10     	; 0x684 <Pwm__SetDutyCycle+0x16>
     67a:	88 23       	and	r24, r24
     67c:	49 f0       	breq	.+18     	; 0x690 <Pwm__SetDutyCycle+0x22>
     67e:	81 30       	cpi	r24, 0x01	; 1
     680:	89 f0       	breq	.+34     	; 0x6a4 <Pwm__SetDutyCycle+0x36>
     682:	08 95       	ret
     684:	84 30       	cpi	r24, 0x04	; 4
     686:	71 f1       	breq	.+92     	; 0x6e4 <Pwm__SetDutyCycle+0x76>
     688:	10 f1       	brcs	.+68     	; 0x6ce <Pwm__SetDutyCycle+0x60>
     68a:	85 30       	cpi	r24, 0x05	; 5
     68c:	b1 f1       	breq	.+108    	; 0x6fa <Pwm__SetDutyCycle+0x8c>
     68e:	08 95       	ret
case PWM0:
	pwm_pt0->OCR0A_REG.byte = (unsigned char)(255*duty/100); //considerando TOP = 255
     690:	2f ef       	ldi	r18, 0xFF	; 255
     692:	62 9f       	mul	r22, r18
     694:	c0 01       	movw	r24, r0
     696:	11 24       	eor	r1, r1
     698:	64 e6       	ldi	r22, 0x64	; 100
     69a:	70 e0       	ldi	r23, 0x00	; 0
     69c:	0e 94 da 07 	call	0xfb4	; 0xfb4 <__divmodhi4>
     6a0:	67 bd       	out	0x27, r22	; 39
	break;
     6a2:	08 95       	ret
case PWM1:
	pwm_pt0->OCR0B_REG.byte = (unsigned char)(255*duty/100); //considerando TOP = 255
     6a4:	2f ef       	ldi	r18, 0xFF	; 255
     6a6:	62 9f       	mul	r22, r18
     6a8:	c0 01       	movw	r24, r0
     6aa:	11 24       	eor	r1, r1
     6ac:	64 e6       	ldi	r22, 0x64	; 100
     6ae:	70 e0       	ldi	r23, 0x00	; 0
     6b0:	0e 94 da 07 	call	0xfb4	; 0xfb4 <__divmodhi4>
     6b4:	68 bd       	out	0x28, r22	; 40
	break;
     6b6:	08 95       	ret
case PWM2:
	pwm_pt1->OCR1AH_REG.byte = (unsigned char)(255*duty/100); //considerando TOP = 255
     6b8:	2f ef       	ldi	r18, 0xFF	; 255
     6ba:	62 9f       	mul	r22, r18
     6bc:	c0 01       	movw	r24, r0
     6be:	11 24       	eor	r1, r1
     6c0:	64 e6       	ldi	r22, 0x64	; 100
     6c2:	70 e0       	ldi	r23, 0x00	; 0
     6c4:	0e 94 da 07 	call	0xfb4	; 0xfb4 <__divmodhi4>
     6c8:	60 93 89 00 	sts	0x0089, r22	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
 	break;    // tem que checar para 16 bits
     6cc:	08 95       	ret
case PWM3:
	 pwm_pt1->OCR1BH_REG.byte = (unsigned char)(255*duty/100); //considerando TOP = 255
     6ce:	2f ef       	ldi	r18, 0xFF	; 255
     6d0:	62 9f       	mul	r22, r18
     6d2:	c0 01       	movw	r24, r0
     6d4:	11 24       	eor	r1, r1
     6d6:	64 e6       	ldi	r22, 0x64	; 100
     6d8:	70 e0       	ldi	r23, 0x00	; 0
     6da:	0e 94 da 07 	call	0xfb4	; 0xfb4 <__divmodhi4>
     6de:	60 93 8b 00 	sts	0x008B, r22	; 0x80008b <__DATA_REGION_ORIGIN__+0x2b>
	 break;    // tem que checar para 16 bits
     6e2:	08 95       	ret
case PWM4:
	 pwm_pt2->OCR2A_REG.byte = (unsigned char)(255*duty/100); //considerando TOP = 255
     6e4:	2f ef       	ldi	r18, 0xFF	; 255
     6e6:	62 9f       	mul	r22, r18
     6e8:	c0 01       	movw	r24, r0
     6ea:	11 24       	eor	r1, r1
     6ec:	64 e6       	ldi	r22, 0x64	; 100
     6ee:	70 e0       	ldi	r23, 0x00	; 0
     6f0:	0e 94 da 07 	call	0xfb4	; 0xfb4 <__divmodhi4>
     6f4:	60 93 b3 00 	sts	0x00B3, r22	; 0x8000b3 <__DATA_REGION_ORIGIN__+0x53>
	 break;    // tem que checar para 16 bits
     6f8:	08 95       	ret
case PWM5:
	pwm_pt2->OCR2B_REG.byte = (unsigned char)(255*duty/100); //considerando TOP = 255
     6fa:	2f ef       	ldi	r18, 0xFF	; 255
     6fc:	62 9f       	mul	r22, r18
     6fe:	c0 01       	movw	r24, r0
     700:	11 24       	eor	r1, r1
     702:	64 e6       	ldi	r22, 0x64	; 100
     704:	70 e0       	ldi	r23, 0x00	; 0
     706:	0e 94 da 07 	call	0xfb4	; 0xfb4 <__divmodhi4>
     70a:	60 93 b4 00 	sts	0x00B4, r22	; 0x8000b4 <__DATA_REGION_ORIGIN__+0x54>
     70e:	08 95       	ret

00000710 <Timer__Initialize>:
 * 
 */
unsigned char Timer__HMSGetTime (HMS_TIMER_NAME id)
{
    return (Hms_Timers[id].Time.Sec);
}
     710:	ef e6       	ldi	r30, 0x6F	; 111
     712:	f1 e0       	ldi	r31, 0x01	; 1
     714:	8e e7       	ldi	r24, 0x7E	; 126
     716:	91 e0       	ldi	r25, 0x01	; 1
     718:	10 82       	st	Z, r1
     71a:	12 82       	std	Z+2, r1	; 0x02
     71c:	11 82       	std	Z+1, r1	; 0x01
     71e:	33 96       	adiw	r30, 0x03	; 3
     720:	e8 17       	cp	r30, r24
     722:	f9 07       	cpc	r31, r25
     724:	c9 f7       	brne	.-14     	; 0x718 <Timer__Initialize+0x8>
     726:	ee e7       	ldi	r30, 0x7E	; 126
     728:	f1 e0       	ldi	r31, 0x01	; 1
     72a:	8a e9       	ldi	r24, 0x9A	; 154
     72c:	91 e0       	ldi	r25, 0x01	; 1
     72e:	10 82       	st	Z, r1
     730:	11 82       	std	Z+1, r1	; 0x01
     732:	12 82       	std	Z+2, r1	; 0x02
     734:	13 82       	std	Z+3, r1	; 0x03
     736:	34 96       	adiw	r30, 0x04	; 4
     738:	e8 17       	cp	r30, r24
     73a:	f9 07       	cpc	r31, r25
     73c:	c1 f7       	brne	.-16     	; 0x72e <Timer__Initialize+0x1e>
     73e:	08 95       	ret

00000740 <Timer__HMSHandler>:
     740:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <__data_end>
     744:	81 30       	cpi	r24, 0x01	; 1
     746:	41 f5       	brne	.+80     	; 0x798 <Timer__HMSHandler+0x58>
     748:	ee e7       	ldi	r30, 0x7E	; 126
     74a:	f1 e0       	ldi	r31, 0x01	; 1
     74c:	2a e9       	ldi	r18, 0x9A	; 154
     74e:	31 e0       	ldi	r19, 0x01	; 1
     750:	4b e3       	ldi	r20, 0x3B	; 59
     752:	80 81       	ld	r24, Z
     754:	81 30       	cpi	r24, 0x01	; 1
     756:	d1 f4       	brne	.+52     	; 0x78c <Timer__HMSHandler+0x4c>
     758:	83 81       	ldd	r24, Z+3	; 0x03
     75a:	88 23       	and	r24, r24
     75c:	49 f0       	breq	.+18     	; 0x770 <Timer__HMSHandler+0x30>
     75e:	81 50       	subi	r24, 0x01	; 1
     760:	83 83       	std	Z+3, r24	; 0x03
     762:	52 81       	ldd	r21, Z+2	; 0x02
     764:	91 81       	ldd	r25, Z+1	; 0x01
     766:	95 2b       	or	r25, r21
     768:	89 2b       	or	r24, r25
     76a:	81 f4       	brne	.+32     	; 0x78c <Timer__HMSHandler+0x4c>
     76c:	10 82       	st	Z, r1
     76e:	0e c0       	rjmp	.+28     	; 0x78c <Timer__HMSHandler+0x4c>
     770:	82 81       	ldd	r24, Z+2	; 0x02
     772:	88 23       	and	r24, r24
     774:	21 f0       	breq	.+8      	; 0x77e <Timer__HMSHandler+0x3e>
     776:	81 50       	subi	r24, 0x01	; 1
     778:	82 83       	std	Z+2, r24	; 0x02
     77a:	43 83       	std	Z+3, r20	; 0x03
     77c:	07 c0       	rjmp	.+14     	; 0x78c <Timer__HMSHandler+0x4c>
     77e:	81 81       	ldd	r24, Z+1	; 0x01
     780:	88 23       	and	r24, r24
     782:	21 f0       	breq	.+8      	; 0x78c <Timer__HMSHandler+0x4c>
     784:	81 50       	subi	r24, 0x01	; 1
     786:	81 83       	std	Z+1, r24	; 0x01
     788:	42 83       	std	Z+2, r20	; 0x02
     78a:	43 83       	std	Z+3, r20	; 0x03
     78c:	34 96       	adiw	r30, 0x04	; 4
     78e:	e2 17       	cp	r30, r18
     790:	f3 07       	cpc	r31, r19
     792:	f9 f6       	brne	.-66     	; 0x752 <Timer__HMSHandler+0x12>
     794:	10 92 52 01 	sts	0x0152, r1	; 0x800152 <__data_end>
     798:	08 95       	ret

0000079a <Timer__HMSSet>:
     79a:	87 30       	cpi	r24, 0x07	; 7
     79c:	c0 f4       	brcc	.+48     	; 0x7ce <Timer__HMSSet+0x34>
     79e:	90 e0       	ldi	r25, 0x00	; 0
     7a0:	fc 01       	movw	r30, r24
     7a2:	ee 0f       	add	r30, r30
     7a4:	ff 1f       	adc	r31, r31
     7a6:	ee 0f       	add	r30, r30
     7a8:	ff 1f       	adc	r31, r31
     7aa:	e2 58       	subi	r30, 0x82	; 130
     7ac:	fe 4f       	sbci	r31, 0xFE	; 254
     7ae:	10 82       	st	Z, r1
     7b0:	61 83       	std	Z+1, r22	; 0x01
     7b2:	42 83       	std	Z+2, r20	; 0x02
     7b4:	23 83       	std	Z+3, r18	; 0x03
     7b6:	24 2b       	or	r18, r20
     7b8:	62 2b       	or	r22, r18
     7ba:	49 f0       	breq	.+18     	; 0x7ce <Timer__HMSSet+0x34>
     7bc:	88 0f       	add	r24, r24
     7be:	99 1f       	adc	r25, r25
     7c0:	88 0f       	add	r24, r24
     7c2:	99 1f       	adc	r25, r25
     7c4:	fc 01       	movw	r30, r24
     7c6:	e2 58       	subi	r30, 0x82	; 130
     7c8:	fe 4f       	sbci	r31, 0xFE	; 254
     7ca:	81 e0       	ldi	r24, 0x01	; 1
     7cc:	80 83       	st	Z, r24
     7ce:	08 95       	ret

000007d0 <Timer__HMSGetStatus>:
     7d0:	24 e0       	ldi	r18, 0x04	; 4
     7d2:	82 9f       	mul	r24, r18
     7d4:	c0 01       	movw	r24, r0
     7d6:	11 24       	eor	r1, r1
     7d8:	fc 01       	movw	r30, r24
     7da:	e2 58       	subi	r30, 0x82	; 130
     7dc:	fe 4f       	sbci	r31, 0xFE	; 254
     7de:	80 81       	ld	r24, Z
     7e0:	08 95       	ret

000007e2 <__vector_13>:

//=====================================================================================================================
//-------------------------------------- Interruption  Functions ------------------------------------------------------------
//=====================================================================================================================
ISR(TIMER1_OVF_vect)                              //interrupção do TIMER1 (pg.158)
{   if(flag_seg == 0)
     7e2:	1f 92       	push	r1
     7e4:	0f 92       	push	r0
     7e6:	0f b6       	in	r0, 0x3f	; 63
     7e8:	0f 92       	push	r0
     7ea:	11 24       	eor	r1, r1
     7ec:	8f 93       	push	r24
     7ee:	9f 93       	push	r25
     7f0:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <__data_end>
     7f4:	81 11       	cpse	r24, r1
     7f6:	09 c0       	rjmp	.+18     	; 0x80a <__vector_13+0x28>
	    {
		TCNT1 = 62500;   //para contar a cada 250ms
     7f8:	84 e2       	ldi	r24, 0x24	; 36
     7fa:	94 ef       	ldi	r25, 0xF4	; 244
     7fc:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     800:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
		flag_seg =1;    //seta o flag indicando que passou 1 segundo   
     804:	81 e0       	ldi	r24, 0x01	; 1
     806:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <__data_end>
	    }
}
     80a:	9f 91       	pop	r25
     80c:	8f 91       	pop	r24
     80e:	0f 90       	pop	r0
     810:	0f be       	out	0x3f, r0	; 63
     812:	0f 90       	pop	r0
     814:	1f 90       	pop	r1
     816:	18 95       	reti

00000818 <Hal__SetLed>:
 *  output: Respective LED
 *  value: ON/OFF
 */
void Hal__SetLed(LED_OUTPUT_TYPE output,unsigned char value)
{
	Hal_Leds_Buffer[output] = LED_OFF;
     818:	90 e0       	ldi	r25, 0x00	; 0
	if (value == ACENDE_LED)
     81a:	66 23       	and	r22, r22
     81c:	31 f0       	breq	.+12     	; 0x82a <Hal__SetLed+0x12>
 *  output: Respective LED
 *  value: ON/OFF
 */
void Hal__SetLed(LED_OUTPUT_TYPE output,unsigned char value)
{
	Hal_Leds_Buffer[output] = LED_OFF;
     81e:	fc 01       	movw	r30, r24
     820:	e5 56       	subi	r30, 0x65	; 101
     822:	fe 4f       	sbci	r31, 0xFE	; 254
     824:	21 e0       	ldi	r18, 0x01	; 1
     826:	20 83       	st	Z, r18
     828:	08 95       	ret
	if (value == ACENDE_LED)
	   Hal_Leds_Buffer[output] = LED_ON;
     82a:	fc 01       	movw	r30, r24
     82c:	e5 56       	subi	r30, 0x65	; 101
     82e:	fe 4f       	sbci	r31, 0xFE	; 254
     830:	10 82       	st	Z, r1
     832:	08 95       	ret

00000834 <Hal__SetAllLeds>:
 *  value ON/OFF
 *  ON: To turn All LEDs ON 
 *  OFF: To turn All LEDs OFF
 */
void Hal__SetAllLeds(unsigned char value)
{
     834:	eb e9       	ldi	r30, 0x9B	; 155
     836:	f1 e0       	ldi	r31, 0x01	; 1
     838:	2f e9       	ldi	r18, 0x9F	; 159
     83a:	31 e0       	ldi	r19, 0x01	; 1
	LED_OUTPUT_TYPE index;

	for(index = 0; index < NUM_OF_LEDS; index++)
		{
		Hal_Leds_Buffer[index] = LED_OFF;
     83c:	91 e0       	ldi	r25, 0x01	; 1
		if (value == ACENDE_LED)
     83e:	88 23       	and	r24, r24
     840:	11 f0       	breq	.+4      	; 0x846 <Hal__SetAllLeds+0x12>
{
	LED_OUTPUT_TYPE index;

	for(index = 0; index < NUM_OF_LEDS; index++)
		{
		Hal_Leds_Buffer[index] = LED_OFF;
     842:	90 83       	st	Z, r25
     844:	01 c0       	rjmp	.+2      	; 0x848 <Hal__SetAllLeds+0x14>
		if (value == ACENDE_LED)
			Hal_Leds_Buffer[index] = LED_ON;
     846:	10 82       	st	Z, r1
     848:	31 96       	adiw	r30, 0x01	; 1
 */
void Hal__SetAllLeds(unsigned char value)
{
	LED_OUTPUT_TYPE index;

	for(index = 0; index < NUM_OF_LEDS; index++)
     84a:	e2 17       	cp	r30, r18
     84c:	f3 07       	cpc	r31, r19
     84e:	b9 f7       	brne	.-18     	; 0x83e <Hal__SetAllLeds+0xa>
		{
		Hal_Leds_Buffer[index] = LED_OFF;
		if (value == ACENDE_LED)
			Hal_Leds_Buffer[index] = LED_ON;
		}
}
     850:	08 95       	ret

00000852 <Hal__Initialize>:
/*
 * Call this function on initialize tasks before use any function of this module
 * This function will properly configure all pins before use it
 */
void Hal__Initialize(void)
{
     852:	0f 93       	push	r16
     854:	1f 93       	push	r17
     856:	cf 93       	push	r28
     858:	df 93       	push	r29
     85a:	ce e0       	ldi	r28, 0x0E	; 14
     85c:	d1 e0       	ldi	r29, 0x01	; 1
     85e:	06 e1       	ldi	r16, 0x16	; 22
     860:	11 e0       	ldi	r17, 0x01	; 1
	
	
	// LEDs Configuration
	for(led_index = 0; led_index < NUM_OF_LEDS; led_index++)
	{
	Gpio__PinConfig(LED_GPIO[led_index].port, LED_GPIO[led_index].pin, OUTPUT_DIGITAL);
     862:	41 e0       	ldi	r20, 0x01	; 1
     864:	69 81       	ldd	r22, Y+1	; 0x01
     866:	88 81       	ld	r24, Y
     868:	0e 94 0f 02 	call	0x41e	; 0x41e <Gpio__PinConfig>
     86c:	22 96       	adiw	r28, 0x02	; 2
	KEY_INPUT_TYPE key_index;
	ANALOG_INPUT_TYPE analog_index;
	
	
	// LEDs Configuration
	for(led_index = 0; led_index < NUM_OF_LEDS; led_index++)
     86e:	c0 17       	cp	r28, r16
     870:	d1 07       	cpc	r29, r17
     872:	b9 f7       	brne	.-18     	; 0x862 <Hal__Initialize+0x10>
     874:	c6 e0       	ldi	r28, 0x06	; 6
     876:	d1 e0       	ldi	r29, 0x01	; 1
     878:	0e e0       	ldi	r16, 0x0E	; 14
     87a:	11 e0       	ldi	r17, 0x01	; 1
	
	
	// Keys Configuration
	for(key_index = 0; key_index < NUM_OF_KEYS; key_index++)
	{
	Gpio__PinConfig(KEYS_GPIO[key_index].port, KEYS_GPIO[key_index].pin, INPUT_DIGITAL_PULLUP);
     87c:	40 e0       	ldi	r20, 0x00	; 0
     87e:	69 81       	ldd	r22, Y+1	; 0x01
     880:	88 81       	ld	r24, Y
     882:	0e 94 0f 02 	call	0x41e	; 0x41e <Gpio__PinConfig>
     886:	22 96       	adiw	r28, 0x02	; 2
	Gpio__PinConfig(LED_GPIO[led_index].port, LED_GPIO[led_index].pin, OUTPUT_DIGITAL);
	}
	
	
	// Keys Configuration
	for(key_index = 0; key_index < NUM_OF_KEYS; key_index++)
     888:	c0 17       	cp	r28, r16
     88a:	d1 07       	cpc	r29, r17
     88c:	b9 f7       	brne	.-18     	; 0x87c <Hal__Initialize+0x2a>
	{
	Gpio__PinConfig(KEYS_GPIO[key_index].port, KEYS_GPIO[key_index].pin, INPUT_DIGITAL_PULLUP);
	}
	
	// Apaga todos os leds
	Hal__SetAllLeds(LED_OFF);   //apaga todos leds
     88e:	81 e0       	ldi	r24, 0x01	; 1
     890:	0e 94 1a 04 	call	0x834	; 0x834 <Hal__SetAllLeds>
	
	
	// Configuração do 7 segmentos
	
	bitWrite(DDRD, 4, OUTPUT_DIGITAL);
     894:	54 9a       	sbi	0x0a, 4	; 10
	bitWrite(DDRD, 7, OUTPUT_DIGITAL);
     896:	57 9a       	sbi	0x0a, 7	; 10
	bitWrite(DDRB, 0, OUTPUT_DIGITAL);
     898:	20 9a       	sbi	0x04, 0	; 4
	
	
	// Analog Inputs Configuration - modo de conversão e resolução e inicializa os buffers de várias leitura do ADC
	ADC__ConfigModes(MODE_10BITS,AD_SINGLE_CONVERSION);
     89a:	60 e0       	ldi	r22, 0x00	; 0
     89c:	81 e0       	ldi	r24, 0x01	; 1
     89e:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <ADC__ConfigModes>
	AD_Mux_State = MUX_INIT;
     8a2:	10 92 b7 01 	sts	0x01B7, r1	; 0x8001b7 <AD_Mux_State>
	AD_Channel = POT_INT;  // eqivalente ao canal AD0 do arduino
     8a6:	10 92 9a 01 	sts	0x019A, r1	; 0x80019a <AD_Channel>
     8aa:	e0 e4       	ldi	r30, 0x40	; 64
     8ac:	f1 e0       	ldi	r31, 0x01	; 1
     8ae:	8b ea       	ldi	r24, 0xAB	; 171
     8b0:	91 e0       	ldi	r25, 0x01	; 1
     8b2:	cf eb       	ldi	r28, 0xBF	; 191
     8b4:	d1 e0       	ldi	r29, 0x01	; 1
     8b6:	68 eb       	ldi	r22, 0xB8	; 184
     8b8:	71 e0       	ldi	r23, 0x01	; 1
     8ba:	46 e4       	ldi	r20, 0x46	; 70
     8bc:	51 e0       	ldi	r21, 0x01	; 1

	for(analog_index = 0; analog_index < NUM_OF_ANALOG_INPUT; analog_index++)
	{
		if(AD_Enable_Table[analog_index] == ENABLED)
     8be:	21 91       	ld	r18, Z+
     8c0:	21 30       	cpi	r18, 0x01	; 1
     8c2:	39 f4       	brne	.+14     	; 0x8d2 <Hal__Initialize+0x80>
		{
			Hal_Analog_Inputs[analog_index] = 0;   // zera o buffer de valor de cada canal
     8c4:	dc 01       	movw	r26, r24
     8c6:	1d 92       	st	X+, r1
     8c8:	1c 92       	st	X, r1
			AD_Accumulator[analog_index] = 0;
     8ca:	19 82       	std	Y+1, r1	; 0x01
     8cc:	18 82       	st	Y, r1
			AD_Counter[analog_index] = 0;
     8ce:	db 01       	movw	r26, r22
     8d0:	1c 92       	st	X, r1
     8d2:	02 96       	adiw	r24, 0x02	; 2
     8d4:	22 96       	adiw	r28, 0x02	; 2
     8d6:	6f 5f       	subi	r22, 0xFF	; 255
     8d8:	7f 4f       	sbci	r23, 0xFF	; 255
	// Analog Inputs Configuration - modo de conversão e resolução e inicializa os buffers de várias leitura do ADC
	ADC__ConfigModes(MODE_10BITS,AD_SINGLE_CONVERSION);
	AD_Mux_State = MUX_INIT;
	AD_Channel = POT_INT;  // eqivalente ao canal AD0 do arduino

	for(analog_index = 0; analog_index < NUM_OF_ANALOG_INPUT; analog_index++)
     8da:	e4 17       	cp	r30, r20
     8dc:	f5 07       	cpc	r31, r21
     8de:	79 f7       	brne	.-34     	; 0x8be <Hal__Initialize+0x6c>
	//#if (USE_BUZZER == ENABLED)

	//Pwm__SetTCFrequency(PWM_TC2, BUZZER_DEFAULT_FREQ);
	//Pwm__SetDutyCycle(PWM5,BUZZER_DEFAULT_ON_DUTY);
	//#endif	//(USE_BUZZER == ENABLED)
	}
     8e0:	df 91       	pop	r29
     8e2:	cf 91       	pop	r28
     8e4:	1f 91       	pop	r17
     8e6:	0f 91       	pop	r16
     8e8:	08 95       	ret

000008ea <Hal__ReadKey>:
 *  Use this function to read the status of a specific key
 *  key: desired key to be read
 *  return: TRUE if key is pressed otherwise FALSE
 */
unsigned char Hal__ReadKey(KEY_INPUT_TYPE key)
{
     8ea:	28 2f       	mov	r18, r24
	if (key < NUM_OF_KEYS)
     8ec:	84 30       	cpi	r24, 0x04	; 4
     8ee:	70 f4       	brcc	.+28     	; 0x90c <__stack+0xd>
	   {
	   if (BIT_TEST(Hal_Keys_Buffer, key) > 0)
	      return (TRUE);
     8f0:	80 91 be 01 	lds	r24, 0x01BE	; 0x8001be <Hal_Keys_Buffer>
     8f4:	90 e0       	ldi	r25, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	b0 e0       	ldi	r27, 0x00	; 0
     8fa:	04 c0       	rjmp	.+8      	; 0x904 <__stack+0x5>
     8fc:	b6 95       	lsr	r27
     8fe:	a7 95       	ror	r26
     900:	97 95       	ror	r25
     902:	87 95       	ror	r24
     904:	2a 95       	dec	r18
     906:	d2 f7       	brpl	.-12     	; 0x8fc <Hal__ReadKey+0x12>
     908:	81 70       	andi	r24, 0x01	; 1
     90a:	08 95       	ret
	   }
	 return (FALSE);
     90c:	80 e0       	ldi	r24, 0x00	; 0
}
     90e:	08 95       	ret

00000910 <Hal__WriteValtoSegment>:
 *  
 */
void Hal__WriteValtoSegment(char Segment, char *Value)
{

SevenSeg_WriteValueToSegment(Segment, Value);
     910:	0e 94 bd 05 	call	0xb7a	; 0xb7a <SevenSeg_WriteValueToSegment>
     914:	08 95       	ret

00000916 <Hal__GetAnalogInput>:
 *  Use this function to read a value ADC in the selected channel
 *  
 */
unsigned short int Hal__GetAnalogInput(ANALOG_INPUT_TYPE input)
{
if(input < NUM_OF_ANALOG_INPUT)
     916:	86 30       	cpi	r24, 0x06	; 6
     918:	48 f4       	brcc	.+18     	; 0x92c <Hal__GetAnalogInput+0x16>
   return Hal_Analog_Inputs[input];  // retorna o valor no buffer HAL_AnalogInputs do canal solicitado
     91a:	e8 2f       	mov	r30, r24
     91c:	f0 e0       	ldi	r31, 0x00	; 0
     91e:	ee 0f       	add	r30, r30
     920:	ff 1f       	adc	r31, r31
     922:	e5 55       	subi	r30, 0x55	; 85
     924:	fe 4f       	sbci	r31, 0xFE	; 254
     926:	80 81       	ld	r24, Z
     928:	91 81       	ldd	r25, Z+1	; 0x01
     92a:	08 95       	ret
}
     92c:	08 95       	ret

0000092e <Hal__SetBuzzer>:
 */
void Hal__SetBuzzer(unsigned char state)
{
#if (USE_BUZZER == ENABLED)

	if(state > 0)
     92e:	88 23       	and	r24, r24
     930:	29 f0       	breq	.+10     	; 0x93c <Hal__SetBuzzer+0xe>
		{
		//BuzzerRequest = ON;
		Pwm__SetDutyCycle(PWM5,BUZZER_DEFAULT_ON_DUTY);
     932:	62 e3       	ldi	r22, 0x32	; 50
     934:	85 e0       	ldi	r24, 0x05	; 5
     936:	0e 94 37 03 	call	0x66e	; 0x66e <Pwm__SetDutyCycle>
     93a:	08 95       	ret
		}
	else
		{
		Pwm__SetDutyCycle(PWM5,BUZZER_OFF_DUTY);
     93c:	60 e0       	ldi	r22, 0x00	; 0
     93e:	85 e0       	ldi	r24, 0x05	; 5
     940:	0e 94 37 03 	call	0x66e	; 0x66e <Pwm__SetDutyCycle>
     944:	08 95       	ret

00000946 <Hal__SetBuzzerFreq>:
 */
void Hal__SetBuzzerFreq(unsigned short int frequency)
{
#if (USE_BUZZER == ENABLED)
	
	if(frequency >= 2000)
     946:	80 3d       	cpi	r24, 0xD0	; 208
     948:	27 e0       	ldi	r18, 0x07	; 7
     94a:	92 07       	cpc	r25, r18
     94c:	20 f0       	brcs	.+8      	; 0x956 <Hal__SetBuzzerFreq+0x10>
     94e:	bc 01       	movw	r22, r24
		{
		Pwm__SetTCFrequency(PWM_TC2, frequency);
     950:	82 e0       	ldi	r24, 0x02	; 2
     952:	0e 94 83 02 	call	0x506	; 0x506 <Pwm__SetTCFrequency>
     956:	08 95       	ret

00000958 <LEDsUpdate>:
//---------------------------------------------------------------------------------------------------------------------
/**
 *  This local function update the LEDs status
 */
void LEDsUpdate(void)
{
     958:	af 92       	push	r10
     95a:	bf 92       	push	r11
     95c:	cf 92       	push	r12
     95e:	df 92       	push	r13
     960:	ef 92       	push	r14
     962:	ff 92       	push	r15
     964:	0f 93       	push	r16
     966:	1f 93       	push	r17
     968:	cf 93       	push	r28
     96a:	df 93       	push	r29
     96c:	ca e4       	ldi	r28, 0x4A	; 74
     96e:	d1 e0       	ldi	r29, 0x01	; 1
     970:	0f 2e       	mov	r0, r31
     972:	fb e9       	ldi	r31, 0x9B	; 155
     974:	ef 2e       	mov	r14, r31
     976:	f1 e0       	ldi	r31, 0x01	; 1
     978:	ff 2e       	mov	r15, r31
     97a:	f0 2d       	mov	r31, r0
     97c:	0e e0       	ldi	r16, 0x0E	; 14
     97e:	11 e0       	ldi	r17, 0x01	; 1
     980:	0f 2e       	mov	r0, r31
     982:	fe e4       	ldi	r31, 0x4E	; 78
     984:	cf 2e       	mov	r12, r31
     986:	f1 e0       	ldi	r31, 0x01	; 1
     988:	df 2e       	mov	r13, r31
     98a:	f0 2d       	mov	r31, r0
			value = LED_ON;
			if(Hal_Leds_Buffer[index] > 0)
			{
				value = LED_OFF;
			}
			Gpio__PinWrite(LED_GPIO[index].port, LED_GPIO[index].pin, value);
     98c:	bb 24       	eor	r11, r11
     98e:	b3 94       	inc	r11
     990:	a1 2c       	mov	r10, r1
	unsigned char value;
	
	//LEDs Update
	for(index = 0; index < NUM_OF_LEDS; index++)
	{
		if(Leds_Enable_Table[index] == ENABLED) // Update GPIO only if current LED is configured to be used
     992:	89 91       	ld	r24, Y+
     994:	81 30       	cpi	r24, 0x01	; 1
     996:	59 f4       	brne	.+22     	; 0x9ae <LEDsUpdate+0x56>
     998:	f8 01       	movw	r30, r16
			value = LED_ON;
			if(Hal_Leds_Buffer[index] > 0)
			{
				value = LED_OFF;
			}
			Gpio__PinWrite(LED_GPIO[index].port, LED_GPIO[index].pin, value);
     99a:	4b 2d       	mov	r20, r11
     99c:	d7 01       	movw	r26, r14
     99e:	8c 91       	ld	r24, X
     9a0:	81 11       	cpse	r24, r1
     9a2:	01 c0       	rjmp	.+2      	; 0x9a6 <LEDsUpdate+0x4e>
     9a4:	4a 2d       	mov	r20, r10
     9a6:	61 81       	ldd	r22, Z+1	; 0x01
     9a8:	80 81       	ld	r24, Z
     9aa:	0e 94 45 02 	call	0x48a	; 0x48a <Gpio__PinWrite>
     9ae:	bf ef       	ldi	r27, 0xFF	; 255
     9b0:	eb 1a       	sub	r14, r27
     9b2:	fb 0a       	sbc	r15, r27
     9b4:	0e 5f       	subi	r16, 0xFE	; 254
     9b6:	1f 4f       	sbci	r17, 0xFF	; 255
{
	unsigned char index;
	unsigned char value;
	
	//LEDs Update
	for(index = 0; index < NUM_OF_LEDS; index++)
     9b8:	cc 15       	cp	r28, r12
     9ba:	dd 05       	cpc	r29, r13
     9bc:	51 f7       	brne	.-44     	; 0x992 <LEDsUpdate+0x3a>
				value = LED_OFF;
			}
			Gpio__PinWrite(LED_GPIO[index].port, LED_GPIO[index].pin, value);
		}
	}
}
     9be:	df 91       	pop	r29
     9c0:	cf 91       	pop	r28
     9c2:	1f 91       	pop	r17
     9c4:	0f 91       	pop	r16
     9c6:	ff 90       	pop	r15
     9c8:	ef 90       	pop	r14
     9ca:	df 90       	pop	r13
     9cc:	cf 90       	pop	r12
     9ce:	bf 90       	pop	r11
     9d0:	af 90       	pop	r10
     9d2:	08 95       	ret

000009d4 <KeysRead>:
/**
 *  This local function reads the keys input and update the Hal_Keys_Buffer
 */

void KeysRead(void)
{
     9d4:	8f 92       	push	r8
     9d6:	9f 92       	push	r9
     9d8:	af 92       	push	r10
     9da:	bf 92       	push	r11
     9dc:	df 92       	push	r13
     9de:	ef 92       	push	r14
     9e0:	ff 92       	push	r15
     9e2:	0f 93       	push	r16
     9e4:	1f 93       	push	r17
     9e6:	cf 93       	push	r28
     9e8:	df 93       	push	r29
     9ea:	0f 2e       	mov	r0, r31
     9ec:	f6 e4       	ldi	r31, 0x46	; 70
     9ee:	ef 2e       	mov	r14, r31
     9f0:	f1 e0       	ldi	r31, 0x01	; 1
     9f2:	ff 2e       	mov	r15, r31
     9f4:	f0 2d       	mov	r31, r0
     9f6:	06 e0       	ldi	r16, 0x06	; 6
     9f8:	11 e0       	ldi	r17, 0x01	; 1
     9fa:	c0 e0       	ldi	r28, 0x00	; 0
     9fc:	d0 e0       	ldi	r29, 0x00	; 0
			{
				BIT_SET(Hal_Keys_Buffer,key_index);
			}
			else
			{
				BIT_CLR(Hal_Keys_Buffer,key_index);
     9fe:	81 2c       	mov	r8, r1
     a00:	91 2c       	mov	r9, r1
     a02:	54 01       	movw	r10, r8
     a04:	83 94       	inc	r8
	KEY_INPUT_TYPE key_index;
	unsigned char value;
	
	for(key_index = KEY_0; key_index < NUM_OF_KEYS; key_index++)
	{
		if(Keys_Enable_Table[key_index] == ENABLED)
     a06:	f7 01       	movw	r30, r14
     a08:	81 91       	ld	r24, Z+
     a0a:	7f 01       	movw	r14, r30
     a0c:	81 30       	cpi	r24, 0x01	; 1
     a0e:	39 f5       	brne	.+78     	; 0xa5e <KeysRead+0x8a>
		{
			value = Gpio__PinRead(KEYS_GPIO[key_index].port, KEYS_GPIO[key_index].pin);
     a10:	f8 01       	movw	r30, r16
     a12:	61 81       	ldd	r22, Z+1	; 0x01
     a14:	80 81       	ld	r24, Z
     a16:	0e 94 6f 02 	call	0x4de	; 0x4de <Gpio__PinRead>
			if(value == KEY_PRESSED)
     a1a:	81 11       	cpse	r24, r1
     a1c:	10 c0       	rjmp	.+32     	; 0xa3e <KeysRead+0x6a>
			{
				BIT_SET(Hal_Keys_Buffer,key_index);
     a1e:	d5 01       	movw	r26, r10
     a20:	c4 01       	movw	r24, r8
     a22:	0c 2e       	mov	r0, r28
     a24:	04 c0       	rjmp	.+8      	; 0xa2e <KeysRead+0x5a>
     a26:	88 0f       	add	r24, r24
     a28:	99 1f       	adc	r25, r25
     a2a:	aa 1f       	adc	r26, r26
     a2c:	bb 1f       	adc	r27, r27
     a2e:	0a 94       	dec	r0
     a30:	d2 f7       	brpl	.-12     	; 0xa26 <KeysRead+0x52>
     a32:	20 91 be 01 	lds	r18, 0x01BE	; 0x8001be <Hal_Keys_Buffer>
     a36:	82 2b       	or	r24, r18
     a38:	80 93 be 01 	sts	0x01BE, r24	; 0x8001be <Hal_Keys_Buffer>
     a3c:	10 c0       	rjmp	.+32     	; 0xa5e <KeysRead+0x8a>
			}
			else
			{
				BIT_CLR(Hal_Keys_Buffer,key_index);
     a3e:	d5 01       	movw	r26, r10
     a40:	c4 01       	movw	r24, r8
     a42:	0c 2e       	mov	r0, r28
     a44:	04 c0       	rjmp	.+8      	; 0xa4e <KeysRead+0x7a>
     a46:	88 0f       	add	r24, r24
     a48:	99 1f       	adc	r25, r25
     a4a:	aa 1f       	adc	r26, r26
     a4c:	bb 1f       	adc	r27, r27
     a4e:	0a 94       	dec	r0
     a50:	d2 f7       	brpl	.-12     	; 0xa46 <KeysRead+0x72>
     a52:	80 95       	com	r24
     a54:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <Hal_Keys_Buffer>
     a58:	89 23       	and	r24, r25
     a5a:	80 93 be 01 	sts	0x01BE, r24	; 0x8001be <Hal_Keys_Buffer>
     a5e:	21 96       	adiw	r28, 0x01	; 1
     a60:	0e 5f       	subi	r16, 0xFE	; 254
     a62:	1f 4f       	sbci	r17, 0xFF	; 255
{
	//Keys read
	KEY_INPUT_TYPE key_index;
	unsigned char value;
	
	for(key_index = KEY_0; key_index < NUM_OF_KEYS; key_index++)
     a64:	c4 30       	cpi	r28, 0x04	; 4
     a66:	d1 05       	cpc	r29, r1
     a68:	71 f6       	brne	.-100    	; 0xa06 <KeysRead+0x32>

			}
		}
	}

}
     a6a:	df 91       	pop	r29
     a6c:	cf 91       	pop	r28
     a6e:	1f 91       	pop	r17
     a70:	0f 91       	pop	r16
     a72:	ff 90       	pop	r15
     a74:	ef 90       	pop	r14
     a76:	df 90       	pop	r13
     a78:	bf 90       	pop	r11
     a7a:	af 90       	pop	r10
     a7c:	9f 90       	pop	r9
     a7e:	8f 90       	pop	r8
     a80:	08 95       	ret

00000a82 <Hal__FastHandler>:
 *  This function shall run in background in the main loop 
 *  Call rate: 1ms, 5ms, 10ms, ...PARA GPIO
 */
void Hal__FastHandler(void)
{
	LEDsUpdate();
     a82:	0e 94 ac 04 	call	0x958	; 0x958 <LEDsUpdate>
	KeysRead();
     a86:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <KeysRead>
     a8a:	08 95       	ret

00000a8c <ADProcess>:
 *  This local function reads the analog input and update the buffer Hal_Analog_inputs[]
    ROTINA ONDE SÃO FEITAS AS VÁRIAS LEITURAS DE AMOSTRAGEM (NUM_AD_SAMPLES) E DEPOIS TIRADO A MÉDIA DOS  VALORES
****/

void ADProcess(void)
{
     a8c:	cf 93       	push	r28
     a8e:	df 93       	push	r29
switch (AD_Mux_State)
     a90:	80 91 b7 01 	lds	r24, 0x01B7	; 0x8001b7 <AD_Mux_State>
     a94:	81 30       	cpi	r24, 0x01	; 1
     a96:	19 f0       	breq	.+6      	; 0xa9e <ADProcess+0x12>
     a98:	83 30       	cpi	r24, 0x03	; 3
     a9a:	31 f0       	breq	.+12     	; 0xaa8 <ADProcess+0x1c>
     a9c:	5d c0       	rjmp	.+186    	; 0xb58 <ADProcess+0xcc>
  {
  case MUX_INIT:
    break;
  case MUX_AD_CONFIG:
    ADC__ConfigModes(MODE_10BITS,AD_SINGLE_CONVERSION);
     a9e:	60 e0       	ldi	r22, 0x00	; 0
     aa0:	81 e0       	ldi	r24, 0x01	; 1
     aa2:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <ADC__ConfigModes>
    break;
     aa6:	58 c0       	rjmp	.+176    	; 0xb58 <ADProcess+0xcc>
  case MUX_DUMMY_STATE_1: //=> This state is placed in order to assure the raising time for ADC reading
    break;
  case MUX_AD_READ:
      if(AD_Enable_Table[AD_Channel] == ENABLED)
     aa8:	c0 91 9a 01 	lds	r28, 0x019A	; 0x80019a <AD_Channel>
     aac:	d0 e0       	ldi	r29, 0x00	; 0
     aae:	fe 01       	movw	r30, r28
     ab0:	e0 5c       	subi	r30, 0xC0	; 192
     ab2:	fe 4f       	sbci	r31, 0xFE	; 254
     ab4:	80 81       	ld	r24, Z
     ab6:	81 30       	cpi	r24, 0x01	; 1
     ab8:	09 f0       	breq	.+2      	; 0xabc <ADProcess+0x30>
     aba:	44 c0       	rjmp	.+136    	; 0xb44 <ADProcess+0xb8>
         {
         if(AD_Counter[AD_Channel] < NUM_AD_SAMPLES)
     abc:	fe 01       	movw	r30, r28
     abe:	e8 54       	subi	r30, 0x48	; 72
     ac0:	fe 4f       	sbci	r31, 0xFE	; 254
     ac2:	80 81       	ld	r24, Z
     ac4:	88 30       	cpi	r24, 0x08	; 8
     ac6:	38 f5       	brcc	.+78     	; 0xb16 <ADProcess+0x8a>
             {
             AD_Sample[AD_Channel] = ADC__GetValue(AD_Channel_Table[AD_Channel]);
     ac8:	fe 01       	movw	r30, r28
     aca:	e6 5c       	subi	r30, 0xC6	; 198
     acc:	fe 4f       	sbci	r31, 0xFE	; 254
     ace:	80 81       	ld	r24, Z
     ad0:	0e 94 01 02 	call	0x402	; 0x402 <ADC__GetValue>
     ad4:	cc 0f       	add	r28, r28
     ad6:	dd 1f       	adc	r29, r29
     ad8:	c1 56       	subi	r28, 0x61	; 97
     ada:	de 4f       	sbci	r29, 0xFE	; 254
     adc:	99 83       	std	Y+1, r25	; 0x01
     ade:	88 83       	st	Y, r24
             AD_Accumulator[AD_Channel] += AD_Sample[AD_Channel];
     ae0:	e0 91 9a 01 	lds	r30, 0x019A	; 0x80019a <AD_Channel>
     ae4:	f0 e0       	ldi	r31, 0x00	; 0
     ae6:	cf 01       	movw	r24, r30
     ae8:	88 0f       	add	r24, r24
     aea:	99 1f       	adc	r25, r25
     aec:	dc 01       	movw	r26, r24
     aee:	a1 54       	subi	r26, 0x41	; 65
     af0:	be 4f       	sbci	r27, 0xFE	; 254
     af2:	ec 01       	movw	r28, r24
     af4:	c1 56       	subi	r28, 0x61	; 97
     af6:	de 4f       	sbci	r29, 0xFE	; 254
     af8:	2d 91       	ld	r18, X+
     afa:	3c 91       	ld	r19, X
     afc:	11 97       	sbiw	r26, 0x01	; 1
     afe:	88 81       	ld	r24, Y
     b00:	99 81       	ldd	r25, Y+1	; 0x01
     b02:	82 0f       	add	r24, r18
     b04:	93 1f       	adc	r25, r19
     b06:	8d 93       	st	X+, r24
     b08:	9c 93       	st	X, r25
             AD_Counter[AD_Channel]++;
     b0a:	e8 54       	subi	r30, 0x48	; 72
     b0c:	fe 4f       	sbci	r31, 0xFE	; 254
     b0e:	80 81       	ld	r24, Z
     b10:	8f 5f       	subi	r24, 0xFF	; 255
     b12:	80 83       	st	Z, r24
     b14:	17 c0       	rjmp	.+46     	; 0xb44 <ADProcess+0xb8>
             }
         else
            {  // O Buffer Hal_Analog_Inputs[] é AQUI atualizado!
            Hal_Analog_Inputs[AD_Channel] = (unsigned short int)(AD_Accumulator[AD_Channel]/NUM_AD_SAMPLES);
     b16:	fe 01       	movw	r30, r28
     b18:	ee 0f       	add	r30, r30
     b1a:	ff 1f       	adc	r31, r31
     b1c:	df 01       	movw	r26, r30
     b1e:	a5 55       	subi	r26, 0x55	; 85
     b20:	be 4f       	sbci	r27, 0xFE	; 254
     b22:	e1 54       	subi	r30, 0x41	; 65
     b24:	fe 4f       	sbci	r31, 0xFE	; 254
     b26:	80 81       	ld	r24, Z
     b28:	91 81       	ldd	r25, Z+1	; 0x01
     b2a:	96 95       	lsr	r25
     b2c:	87 95       	ror	r24
     b2e:	96 95       	lsr	r25
     b30:	87 95       	ror	r24
     b32:	96 95       	lsr	r25
     b34:	87 95       	ror	r24
     b36:	8d 93       	st	X+, r24
     b38:	9c 93       	st	X, r25
            AD_Accumulator[AD_Channel] = 0;
     b3a:	11 82       	std	Z+1, r1	; 0x01
     b3c:	10 82       	st	Z, r1
            AD_Counter[AD_Channel] = 0;
     b3e:	c8 54       	subi	r28, 0x48	; 72
     b40:	de 4f       	sbci	r29, 0xFE	; 254
     b42:	18 82       	st	Y, r1
            }
          } 
       AD_Channel++;
     b44:	80 91 9a 01 	lds	r24, 0x019A	; 0x80019a <AD_Channel>
     b48:	8f 5f       	subi	r24, 0xFF	; 255
       if(AD_Channel >= NUM_OF_ANALOG_INPUT)
     b4a:	86 30       	cpi	r24, 0x06	; 6
     b4c:	18 f4       	brcc	.+6      	; 0xb54 <ADProcess+0xc8>
            Hal_Analog_Inputs[AD_Channel] = (unsigned short int)(AD_Accumulator[AD_Channel]/NUM_AD_SAMPLES);
            AD_Accumulator[AD_Channel] = 0;
            AD_Counter[AD_Channel] = 0;
            }
          } 
       AD_Channel++;
     b4e:	80 93 9a 01 	sts	0x019A, r24	; 0x80019a <AD_Channel>
     b52:	02 c0       	rjmp	.+4      	; 0xb58 <ADProcess+0xcc>
       if(AD_Channel >= NUM_OF_ANALOG_INPUT)
         {
         AD_Channel = 0;
     b54:	10 92 9a 01 	sts	0x019A, r1	; 0x80019a <AD_Channel>
       break;
  default:
       break;
  }

AD_Mux_State++;                                // Ticking the state machine.
     b58:	80 91 b7 01 	lds	r24, 0x01B7	; 0x8001b7 <AD_Mux_State>
     b5c:	8f 5f       	subi	r24, 0xFF	; 255

if (AD_Mux_State >= NUM_MUX_STEPS)
     b5e:	84 30       	cpi	r24, 0x04	; 4
     b60:	18 f4       	brcc	.+6      	; 0xb68 <ADProcess+0xdc>
       break;
  default:
       break;
  }

AD_Mux_State++;                                // Ticking the state machine.
     b62:	80 93 b7 01 	sts	0x01B7, r24	; 0x8001b7 <AD_Mux_State>
     b66:	03 c0       	rjmp	.+6      	; 0xb6e <ADProcess+0xe2>

if (AD_Mux_State >= NUM_MUX_STEPS)
  {
  AD_Mux_State = MUX_AD_CONFIG;
     b68:	81 e0       	ldi	r24, 0x01	; 1
     b6a:	80 93 b7 01 	sts	0x01B7, r24	; 0x8001b7 <AD_Mux_State>
  }
     b6e:	df 91       	pop	r29
     b70:	cf 91       	pop	r28
     b72:	08 95       	ret

00000b74 <Hal__BackgroundHandler>:
 *  This function shall run in background in the main loop 
 *  Call rate: 1ms, 5ms, 10ms, ...PARA ADC
 */
void Hal__BackgroundHandler(void)
{
 ADProcess();	
     b74:	0e 94 46 05 	call	0xa8c	; 0xa8c <ADProcess>
     b78:	08 95       	ret

00000b7a <SevenSeg_WriteValueToSegment>:
const char SEGMENT_SELECT[] = {0xF1,0xF2,0xF4,0xF8};


/* Write a value to one of the 4 digits of the display */
void SevenSeg_WriteValueToSegment(char Segment, char *Value)
{
     b7a:	fb 01       	movw	r30, r22
	bitClear(PORTD, 4);
     b7c:	5c 98       	cbi	0x0b, 4	; 11
     b7e:	47 e0       	ldi	r20, 0x07	; 7
     b80:	50 e0       	ldi	r21, 0x00	; 0

	for (uint8_t i = 0; i < 8; i++)  {
		bitWrite(PORTB, 0, !!((*Value) & (1 << (7 - i))));
     b82:	20 81       	ld	r18, Z
     b84:	30 e0       	ldi	r19, 0x00	; 0
     b86:	04 2e       	mov	r0, r20
     b88:	02 c0       	rjmp	.+4      	; 0xb8e <SevenSeg_WriteValueToSegment+0x14>
     b8a:	35 95       	asr	r19
     b8c:	27 95       	ror	r18
     b8e:	0a 94       	dec	r0
     b90:	e2 f7       	brpl	.-8      	; 0xb8a <SevenSeg_WriteValueToSegment+0x10>
     b92:	20 ff       	sbrs	r18, 0
     b94:	02 c0       	rjmp	.+4      	; 0xb9a <SevenSeg_WriteValueToSegment+0x20>
     b96:	28 9a       	sbi	0x05, 0	; 5
     b98:	01 c0       	rjmp	.+2      	; 0xb9c <SevenSeg_WriteValueToSegment+0x22>
     b9a:	28 98       	cbi	0x05, 0	; 5
		bitSet(PORTD, 7);
     b9c:	5f 9a       	sbi	0x0b, 7	; 11
		bitClear(PORTD, 7);
     b9e:	5f 98       	cbi	0x0b, 7	; 11
     ba0:	41 50       	subi	r20, 0x01	; 1
     ba2:	51 09       	sbc	r21, r1
     ba4:	70 f7       	brcc	.-36     	; 0xb82 <SevenSeg_WriteValueToSegment+0x8>
     ba6:	27 e0       	ldi	r18, 0x07	; 7
     ba8:	30 e0       	ldi	r19, 0x00	; 0
	}

	for (uint8_t i = 0; i < 8; i++)  {
		bitWrite(PORTB, 0, !!(SEGMENT_SELECT[Segment] & (1 << (7 - i))));
     baa:	e8 2f       	mov	r30, r24
     bac:	f0 e0       	ldi	r31, 0x00	; 0
     bae:	e2 5b       	subi	r30, 0xB2	; 178
     bb0:	fe 4f       	sbci	r31, 0xFE	; 254
     bb2:	40 81       	ld	r20, Z
     bb4:	50 e0       	ldi	r21, 0x00	; 0
     bb6:	ca 01       	movw	r24, r20
     bb8:	02 2e       	mov	r0, r18
     bba:	02 c0       	rjmp	.+4      	; 0xbc0 <SevenSeg_WriteValueToSegment+0x46>
     bbc:	95 95       	asr	r25
     bbe:	87 95       	ror	r24
     bc0:	0a 94       	dec	r0
     bc2:	e2 f7       	brpl	.-8      	; 0xbbc <SevenSeg_WriteValueToSegment+0x42>
     bc4:	80 ff       	sbrs	r24, 0
     bc6:	02 c0       	rjmp	.+4      	; 0xbcc <SevenSeg_WriteValueToSegment+0x52>
     bc8:	28 9a       	sbi	0x05, 0	; 5
     bca:	01 c0       	rjmp	.+2      	; 0xbce <SevenSeg_WriteValueToSegment+0x54>
     bcc:	28 98       	cbi	0x05, 0	; 5
		bitSet(PORTD, 7);
     bce:	5f 9a       	sbi	0x0b, 7	; 11
		bitClear(PORTD, 7);
     bd0:	5f 98       	cbi	0x0b, 7	; 11
     bd2:	21 50       	subi	r18, 0x01	; 1
     bd4:	31 09       	sbc	r19, r1
     bd6:	78 f7       	brcc	.-34     	; 0xbb6 <SevenSeg_WriteValueToSegment+0x3c>
	}

	bitSet(PORTD, 4);
     bd8:	5c 9a       	sbi	0x0b, 4	; 11
     bda:	08 95       	ret

00000bdc <Display__Initialize>:
/**
 *  
 */
void Display__Initialize(void)
{
	Oven_Display_State = STOPED; //Inicialmente o elevador encontra-se parado
     bdc:	10 92 cd 01 	sts	0x01CD, r1	; 0x8001cd <Oven_Display_State>
     be0:	08 95       	ret

00000be2 <Display__SetState>:
/**
 *  
 */
void Display__SetState(OVEN_DISPLAY_STATE_TYPE state)
{
	if(state < NUM_OF_OVEN_STATES)
     be2:	85 30       	cpi	r24, 0x05	; 5
     be4:	10 f4       	brcc	.+4      	; 0xbea <Display__SetState+0x8>
	{
		Oven_Display_State = state;
     be6:	80 93 cd 01 	sts	0x01CD, r24	; 0x8001cd <Oven_Display_State>
     bea:	08 95       	ret

00000bec <UpdateDisplayLeds>:
 *  Atualiza  Leds 
 */
void UpdateDisplayLeds(void)
{
	unsigned short int ad_value;
	switch(Oven_Display_State)
     bec:	80 91 cd 01 	lds	r24, 0x01CD	; 0x8001cd <Oven_Display_State>
     bf0:	82 30       	cpi	r24, 0x02	; 2
     bf2:	e9 f0       	breq	.+58     	; 0xc2e <UpdateDisplayLeds+0x42>
     bf4:	28 f4       	brcc	.+10     	; 0xc00 <UpdateDisplayLeds+0x14>
     bf6:	88 23       	and	r24, r24
     bf8:	41 f0       	breq	.+16     	; 0xc0a <UpdateDisplayLeds+0x1e>
     bfa:	81 30       	cpi	r24, 0x01	; 1
     bfc:	79 f0       	breq	.+30     	; 0xc1c <UpdateDisplayLeds+0x30>
     bfe:	08 95       	ret
     c00:	83 30       	cpi	r24, 0x03	; 3
     c02:	f1 f0       	breq	.+60     	; 0xc40 <UpdateDisplayLeds+0x54>
     c04:	84 30       	cpi	r24, 0x04	; 4
     c06:	29 f1       	breq	.+74     	; 0xc52 <UpdateDisplayLeds+0x66>
     c08:	08 95       	ret
	{
		case STOPED:
			Hal__SetLed(LED_0, APAGA_LED);
     c0a:	61 e0       	ldi	r22, 0x01	; 1
     c0c:	80 e0       	ldi	r24, 0x00	; 0
     c0e:	0e 94 0c 04 	call	0x818	; 0x818 <Hal__SetLed>
			Hal__SetLed(LED_1, APAGA_LED);
     c12:	61 e0       	ldi	r22, 0x01	; 1
     c14:	81 e0       	ldi	r24, 0x01	; 1
     c16:	0e 94 0c 04 	call	0x818	; 0x818 <Hal__SetLed>
	    break;
     c1a:	08 95       	ret
		
		case MOTOR_UP:
			Hal__SetLed(LED_0, ACENDE_LED);
     c1c:	60 e0       	ldi	r22, 0x00	; 0
     c1e:	80 e0       	ldi	r24, 0x00	; 0
     c20:	0e 94 0c 04 	call	0x818	; 0x818 <Hal__SetLed>
			Hal__SetLed(LED_1, APAGA_LED);
     c24:	61 e0       	ldi	r22, 0x01	; 1
     c26:	81 e0       	ldi	r24, 0x01	; 1
     c28:	0e 94 0c 04 	call	0x818	; 0x818 <Hal__SetLed>
	    break;
     c2c:	08 95       	ret
		
		case MOTOR_DOWN:
			Hal__SetLed(LED_0, APAGA_LED);
     c2e:	61 e0       	ldi	r22, 0x01	; 1
     c30:	80 e0       	ldi	r24, 0x00	; 0
     c32:	0e 94 0c 04 	call	0x818	; 0x818 <Hal__SetLed>
			Hal__SetLed(LED_1, ACENDE_LED);
     c36:	60 e0       	ldi	r22, 0x00	; 0
     c38:	81 e0       	ldi	r24, 0x01	; 1
     c3a:	0e 94 0c 04 	call	0x818	; 0x818 <Hal__SetLed>
		break;
     c3e:	08 95       	ret
		
		case DOOR_OPEN:
			Hal__SetLed(LED_0, APAGA_LED);
     c40:	61 e0       	ldi	r22, 0x01	; 1
     c42:	80 e0       	ldi	r24, 0x00	; 0
     c44:	0e 94 0c 04 	call	0x818	; 0x818 <Hal__SetLed>
			Hal__SetLed(LED_1, APAGA_LED);
     c48:	61 e0       	ldi	r22, 0x01	; 1
     c4a:	81 e0       	ldi	r24, 0x01	; 1
     c4c:	0e 94 0c 04 	call	0x818	; 0x818 <Hal__SetLed>
		break;
     c50:	08 95       	ret
		case DOOR_CLOSE:
			Hal__SetLed(LED_0, APAGA_LED);
     c52:	61 e0       	ldi	r22, 0x01	; 1
     c54:	80 e0       	ldi	r24, 0x00	; 0
     c56:	0e 94 0c 04 	call	0x818	; 0x818 <Hal__SetLed>
			Hal__SetLed(LED_1, APAGA_LED);
     c5a:	61 e0       	ldi	r22, 0x01	; 1
     c5c:	81 e0       	ldi	r24, 0x01	; 1
     c5e:	0e 94 0c 04 	call	0x818	; 0x818 <Hal__SetLed>
     c62:	08 95       	ret

00000c64 <ReadDisplayKeys>:
 */
void ReadDisplayKeys(void)
{
        unsigned char leitura;
		
		Display_Keys_Map = KEY_NONE;
     c64:	8a ea       	ldi	r24, 0xAA	; 170
     c66:	80 93 cc 01 	sts	0x01CC, r24	; 0x8001cc <Display_Keys_Map>
       		   	
		leitura = Hal__ReadKey(KEY_0);
     c6a:	80 e0       	ldi	r24, 0x00	; 0
     c6c:	0e 94 75 04 	call	0x8ea	; 0x8ea <Hal__ReadKey>
		if(leitura  == TRUE)
     c70:	81 30       	cpi	r24, 0x01	; 1
     c72:	11 f4       	brne	.+4      	; 0xc78 <ReadDisplayKeys+0x14>
		{
			Display_Keys_Map = KEY_GROUND_FLOOR;
     c74:	10 92 cc 01 	sts	0x01CC, r1	; 0x8001cc <Display_Keys_Map>
		}
		leitura = Hal__ReadKey(KEY_1);
     c78:	81 e0       	ldi	r24, 0x01	; 1
     c7a:	0e 94 75 04 	call	0x8ea	; 0x8ea <Hal__ReadKey>
		if(leitura == TRUE)
     c7e:	81 30       	cpi	r24, 0x01	; 1
     c80:	11 f4       	brne	.+4      	; 0xc86 <ReadDisplayKeys+0x22>
		{
			Display_Keys_Map = KEY_FIRST_FLOOR;
     c82:	80 93 cc 01 	sts	0x01CC, r24	; 0x8001cc <Display_Keys_Map>
		}
		leitura = Hal__ReadKey(KEY_2);
     c86:	82 e0       	ldi	r24, 0x02	; 2
     c88:	0e 94 75 04 	call	0x8ea	; 0x8ea <Hal__ReadKey>
		if(leitura == TRUE)
     c8c:	81 30       	cpi	r24, 0x01	; 1
     c8e:	19 f4       	brne	.+6      	; 0xc96 <ReadDisplayKeys+0x32>
		{
			Display_Keys_Map =  KEY_NEXT_FLOOR;
     c90:	82 e0       	ldi	r24, 0x02	; 2
     c92:	80 93 cc 01 	sts	0x01CC, r24	; 0x8001cc <Display_Keys_Map>
     c96:	08 95       	ret

00000c98 <Display__GetEvent>:
}

KEY_SOLICITATION_TYPE Display__GetEvent(void)
{
	KEY_SOLICITATION_TYPE event;
	ReadDisplayKeys();    // Lê as chaves e coloca valor na variável global Display_Keys_Map
     c98:	0e 94 32 06 	call	0xc64	; 0xc64 <ReadDisplayKeys>
	event = Display_Keys_Map;
	return (event);
	
}
     c9c:	80 91 cc 01 	lds	r24, 0x01CC	; 0x8001cc <Display_Keys_Map>
     ca0:	08 95       	ret

00000ca2 <UpdateDisplaySevenSeg>:
{
	char i;
	char *p_digito;
	unsigned short int current_floor;
	
	current_floor = PositionSensor__GetMeters(POSITION_SENSOR_1);
     ca2:	80 e0       	ldi	r24, 0x00	; 0
     ca4:	0e 94 bf 06 	call	0xd7e	; 0xd7e <PositionSensor__GetMeters>
	if(POSITION_GROUND_MAX >= current_floor)
     ca8:	85 3f       	cpi	r24, 0xF5	; 245
     caa:	91 40       	sbci	r25, 0x01	; 1
     cac:	b8 f4       	brcc	.+46     	; 0xcdc <UpdateDisplaySevenSeg+0x3a>
	{
		Segment_Floor_State = GROUND_FLOOR;
     cae:	10 92 cb 01 	sts	0x01CB, r1	; 0x8001cb <Segment_Floor_State>
	switch(Segment_Floor_State)
	{
	case GROUND_FLOOR:
		p_digito = &GROUD_DIGIT[0];
		for (i = 0; i< NUM_OF_SEG; i++, p_digito++)
		Hal__WriteValtoSegment(i, p_digito);
     cb2:	6a e1       	ldi	r22, 0x1A	; 26
     cb4:	71 e0       	ldi	r23, 0x01	; 1
     cb6:	80 e0       	ldi	r24, 0x00	; 0
     cb8:	0e 94 88 04 	call	0x910	; 0x910 <Hal__WriteValtoSegment>
     cbc:	6b e1       	ldi	r22, 0x1B	; 27
     cbe:	71 e0       	ldi	r23, 0x01	; 1
     cc0:	81 e0       	ldi	r24, 0x01	; 1
     cc2:	0e 94 88 04 	call	0x910	; 0x910 <Hal__WriteValtoSegment>
     cc6:	6c e1       	ldi	r22, 0x1C	; 28
     cc8:	71 e0       	ldi	r23, 0x01	; 1
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	0e 94 88 04 	call	0x910	; 0x910 <Hal__WriteValtoSegment>
     cd0:	6d e1       	ldi	r22, 0x1D	; 29
     cd2:	71 e0       	ldi	r23, 0x01	; 1
     cd4:	83 e0       	ldi	r24, 0x03	; 3
     cd6:	0e 94 88 04 	call	0x910	; 0x910 <Hal__WriteValtoSegment>
     cda:	08 95       	ret
	{
		Segment_Floor_State = GROUND_FLOOR;
	}
	else
	{
		Segment_Floor_State = FIRST_FLOOR;
     cdc:	81 e0       	ldi	r24, 0x01	; 1
     cde:	80 93 cb 01 	sts	0x01CB, r24	; 0x8001cb <Segment_Floor_State>
		Hal__WriteValtoSegment(i, p_digito);
	break;
	case FIRST_FLOOR:
		p_digito = &FIRST_DIGIT[0];
		for (i = 0; i< NUM_OF_SEG; i++, p_digito++)
		Hal__WriteValtoSegment(i, p_digito);
     ce2:	66 e1       	ldi	r22, 0x16	; 22
     ce4:	71 e0       	ldi	r23, 0x01	; 1
     ce6:	80 e0       	ldi	r24, 0x00	; 0
     ce8:	0e 94 88 04 	call	0x910	; 0x910 <Hal__WriteValtoSegment>
     cec:	67 e1       	ldi	r22, 0x17	; 23
     cee:	71 e0       	ldi	r23, 0x01	; 1
     cf0:	81 e0       	ldi	r24, 0x01	; 1
     cf2:	0e 94 88 04 	call	0x910	; 0x910 <Hal__WriteValtoSegment>
     cf6:	68 e1       	ldi	r22, 0x18	; 24
     cf8:	71 e0       	ldi	r23, 0x01	; 1
     cfa:	82 e0       	ldi	r24, 0x02	; 2
     cfc:	0e 94 88 04 	call	0x910	; 0x910 <Hal__WriteValtoSegment>
     d00:	69 e1       	ldi	r22, 0x19	; 25
     d02:	71 e0       	ldi	r23, 0x01	; 1
     d04:	83 e0       	ldi	r24, 0x03	; 3
     d06:	0e 94 88 04 	call	0x910	; 0x910 <Hal__WriteValtoSegment>
     d0a:	08 95       	ret

00000d0c <ReadSensor>:
	}
}

SENSOR_STATUS ReadSensor(void)
{
	Sensor_status = Hal__ReadKey(KEY_3); 
     d0c:	83 e0       	ldi	r24, 0x03	; 3
     d0e:	0e 94 75 04 	call	0x8ea	; 0x8ea <Hal__ReadKey>
     d12:	80 93 d0 01 	sts	0x01D0, r24	; 0x8001d0 <Sensor_status>
	return(Sensor_status);
}
     d16:	08 95       	ret

00000d18 <PortSensor__Movie>:
	Port_status = PORT_CLOSED;
}

void PortSensor__Movie(PORT_MOVIE action)
{
	Port_movie = action; 
     d18:	80 93 cf 01 	sts	0x01CF, r24	; 0x8001cf <Port_movie>
	if (Port_movie == OPEN)
     d1c:	81 11       	cpse	r24, r1
     d1e:	0d c0       	rjmp	.+26     	; 0xd3a <PortSensor__Movie+0x22>
	{
		Timer__HMSSet(TIMER_HMS_POWER_ON_SOUND, 0,0,1);
     d20:	21 e0       	ldi	r18, 0x01	; 1
     d22:	40 e0       	ldi	r20, 0x00	; 0
     d24:	60 e0       	ldi	r22, 0x00	; 0
     d26:	82 e0       	ldi	r24, 0x02	; 2
     d28:	0e 94 cd 03 	call	0x79a	; 0x79a <Timer__HMSSet>
		Hal__SetLed(LED_2,APAGA_LED);
     d2c:	61 e0       	ldi	r22, 0x01	; 1
     d2e:	82 e0       	ldi	r24, 0x02	; 2
     d30:	0e 94 0c 04 	call	0x818	; 0x818 <Hal__SetLed>
		Port_status = PORT_OPEN;
     d34:	10 92 d1 01 	sts	0x01D1, r1	; 0x8001d1 <Port_status>
     d38:	08 95       	ret
	}
	else
	{
		People = ReadSensor();
     d3a:	0e 94 86 06 	call	0xd0c	; 0xd0c <ReadSensor>
     d3e:	80 93 ce 01 	sts	0x01CE, r24	; 0x8001ce <People>
		if (People==NO_PEOPLE && Timer__HMSGetStatus(TIMER_HMS_POWER_ON_SOUND) == TIMER_EXPIRED)
     d42:	81 11       	cpse	r24, r1
     d44:	0c c0       	rjmp	.+24     	; 0xd5e <PortSensor__Movie+0x46>
     d46:	82 e0       	ldi	r24, 0x02	; 2
     d48:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <Timer__HMSGetStatus>
     d4c:	81 11       	cpse	r24, r1
     d4e:	07 c0       	rjmp	.+14     	; 0xd5e <PortSensor__Movie+0x46>
		{
			Hal__SetLed(LED_2,ACENDE_LED);
     d50:	60 e0       	ldi	r22, 0x00	; 0
     d52:	82 e0       	ldi	r24, 0x02	; 2
     d54:	0e 94 0c 04 	call	0x818	; 0x818 <Hal__SetLed>
			Port_status = PORT_CLOSED;
     d58:	81 e0       	ldi	r24, 0x01	; 1
     d5a:	80 93 d1 01 	sts	0x01D1, r24	; 0x8001d1 <Port_status>
     d5e:	08 95       	ret

00000d60 <PositionSensor__Initialize>:
{
	POSITION_SENSOR_TYPE sensor_id;

	for (sensor_id = 0; sensor_id < NUM_OF_POSITION_SENSOR; sensor_id++)
	{
		Position[sensor_id] = 0;
     d60:	e2 ed       	ldi	r30, 0xD2	; 210
     d62:	f1 e0       	ldi	r31, 0x01	; 1
     d64:	11 82       	std	Z+1, r1	; 0x01
     d66:	10 82       	st	Z, r1
     d68:	13 82       	std	Z+3, r1	; 0x03
     d6a:	12 82       	std	Z+2, r1	; 0x02
     d6c:	08 95       	ret

00000d6e <PositionSensor__ConversionHandler>:
	
	for (sensor_id = 0; sensor_id < NUM_OF_POSITION_SENSOR; sensor_id++)
	{
		if(PositionSensor_Enable_Table[sensor_id] == ENABLED)
		{
			ad_value = Hal__GetAnalogInput(PositionSensorTable[sensor_id]); //ad_value em valor digital
     d6e:	80 e0       	ldi	r24, 0x00	; 0
     d70:	0e 94 8b 04 	call	0x916	; 0x916 <Hal__GetAnalogInput>
			Position[sensor_id] = ad_value;
     d74:	90 93 d3 01 	sts	0x01D3, r25	; 0x8001d3 <Position+0x1>
     d78:	80 93 d2 01 	sts	0x01D2, r24	; 0x8001d2 <Position>
     d7c:	08 95       	ret

00000d7e <PositionSensor__GetMeters>:
}

//---------------------------------------------------------------------------------------------------------------------
unsigned short int PositionSensor__GetMeters(POSITION_SENSOR_TYPE sensor_id)
{
	if (sensor_id < NUM_OF_POSITION_SENSOR)
     d7e:	82 30       	cpi	r24, 0x02	; 2
     d80:	48 f4       	brcc	.+18     	; 0xd94 <PositionSensor__GetMeters+0x16>
	{
		return Position[sensor_id];
     d82:	e8 2f       	mov	r30, r24
     d84:	f0 e0       	ldi	r31, 0x00	; 0
     d86:	ee 0f       	add	r30, r30
     d88:	ff 1f       	adc	r31, r31
     d8a:	ee 52       	subi	r30, 0x2E	; 46
     d8c:	fe 4f       	sbci	r31, 0xFE	; 254
     d8e:	80 81       	ld	r24, Z
     d90:	91 81       	ldd	r25, Z+1	; 0x01
     d92:	08 95       	ret
	}
	else
	{
		return 0;
     d94:	80 e0       	ldi	r24, 0x00	; 0
     d96:	90 e0       	ldi	r25, 0x00	; 0
	}
	
     d98:	08 95       	ret

00000d9a <Sounds__Initialize>:
//
//*********************************************************
 SOUNDS_TYPE Sounds__GetSounds( void)
{
	return (PlaySound);
}
     d9a:	83 e0       	ldi	r24, 0x03	; 3
     d9c:	80 93 d6 01 	sts	0x01D6, r24	; 0x8001d6 <PlaySound>
     da0:	10 92 d8 01 	sts	0x01D8, r1	; 0x8001d8 <PowerON_Sound_Step>
     da4:	10 92 d9 01 	sts	0x01D9, r1	; 0x8001d9 <Key_Press_Sound_Step>
     da8:	81 e0       	ldi	r24, 0x01	; 1
     daa:	80 93 d7 01 	sts	0x01D7, r24	; 0x8001d7 <End_Cycle_Sound_Step>
     dae:	08 95       	ret

00000db0 <Sounds__PlaySounds>:
     db0:	84 30       	cpi	r24, 0x04	; 4
     db2:	20 f0       	brcs	.+8      	; 0xdbc <Sounds__PlaySounds+0xc>
     db4:	83 e0       	ldi	r24, 0x03	; 3
     db6:	80 93 d6 01 	sts	0x01D6, r24	; 0x8001d6 <PlaySound>
     dba:	08 95       	ret
     dbc:	80 93 d6 01 	sts	0x01D6, r24	; 0x8001d6 <PlaySound>
     dc0:	08 95       	ret

00000dc2 <PowerOnSoundHandler>:

SOUND_STATUS PowerOnSoundHandler(void)
{
SOUND_STATUS status;
status = SOUND_PLAYING;
Hal__SetBuzzerFreq(5000);
     dc2:	88 e8       	ldi	r24, 0x88	; 136
     dc4:	93 e1       	ldi	r25, 0x13	; 19
     dc6:	0e 94 a3 04 	call	0x946	; 0x946 <Hal__SetBuzzerFreq>

switch (PowerON_Sound_Step)
     dca:	80 91 d8 01 	lds	r24, 0x01D8	; 0x8001d8 <PowerON_Sound_Step>
     dce:	82 30       	cpi	r24, 0x02	; 2
     dd0:	71 f1       	breq	.+92     	; 0xe2e <PowerOnSoundHandler+0x6c>
     dd2:	28 f4       	brcc	.+10     	; 0xdde <PowerOnSoundHandler+0x1c>
     dd4:	88 23       	and	r24, r24
     dd6:	59 f0       	breq	.+22     	; 0xdee <PowerOnSoundHandler+0x2c>
     dd8:	81 30       	cpi	r24, 0x01	; 1
     dda:	b1 f0       	breq	.+44     	; 0xe08 <PowerOnSoundHandler+0x46>
     ddc:	6c c0       	rjmp	.+216    	; 0xeb6 <PowerOnSoundHandler+0xf4>
     dde:	84 30       	cpi	r24, 0x04	; 4
     de0:	09 f4       	brne	.+2      	; 0xde4 <PowerOnSoundHandler+0x22>
     de2:	4b c0       	rjmp	.+150    	; 0xe7a <PowerOnSoundHandler+0xb8>
     de4:	b8 f1       	brcs	.+110    	; 0xe54 <PowerOnSoundHandler+0x92>
     de6:	85 30       	cpi	r24, 0x05	; 5
     de8:	09 f4       	brne	.+2      	; 0xdec <PowerOnSoundHandler+0x2a>
     dea:	5a c0       	rjmp	.+180    	; 0xea0 <PowerOnSoundHandler+0xde>
     dec:	64 c0       	rjmp	.+200    	; 0xeb6 <PowerOnSoundHandler+0xf4>
{
case POWER_ON_SOUND_STEP1:
	Hal__SetBuzzer(ON);  // aqui entra
     dee:	81 e0       	ldi	r24, 0x01	; 1
     df0:	0e 94 97 04 	call	0x92e	; 0x92e <Hal__SetBuzzer>
	//_delay_ms(2000);
    Timer__HMSSet(TIMER_HMS_POWER_ON_SOUND, 0,0,1);
     df4:	21 e0       	ldi	r18, 0x01	; 1
     df6:	40 e0       	ldi	r20, 0x00	; 0
     df8:	60 e0       	ldi	r22, 0x00	; 0
     dfa:	82 e0       	ldi	r24, 0x02	; 2
     dfc:	0e 94 cd 03 	call	0x79a	; 0x79a <Timer__HMSSet>
	PowerON_Sound_Step = POWER_ON_SOUND_STEP2;
     e00:	81 e0       	ldi	r24, 0x01	; 1
     e02:	80 93 d8 01 	sts	0x01D8, r24	; 0x8001d8 <PowerON_Sound_Step>
	break;
     e06:	08 95       	ret

case POWER_ON_SOUND_STEP2:
	if(Timer__HMSGetStatus(TIMER_HMS_POWER_ON_SOUND) == TIMER_EXPIRED)
     e08:	82 e0       	ldi	r24, 0x02	; 2
     e0a:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <Timer__HMSGetStatus>
     e0e:	81 11       	cpse	r24, r1
     e10:	56 c0       	rjmp	.+172    	; 0xebe <PowerOnSoundHandler+0xfc>
		{
		Timer__HMSSet(TIMER_HMS_POWER_ON_SOUND, 0,0,1);	
     e12:	21 e0       	ldi	r18, 0x01	; 1
     e14:	40 e0       	ldi	r20, 0x00	; 0
     e16:	60 e0       	ldi	r22, 0x00	; 0
     e18:	82 e0       	ldi	r24, 0x02	; 2
     e1a:	0e 94 cd 03 	call	0x79a	; 0x79a <Timer__HMSSet>
		//	Hal__SetBuzzer(ON);    // não entra aqui  !!!
		//_delay_ms(2000);
		PowerON_Sound_Step = POWER_ON_SOUND_STEP3;
     e1e:	82 e0       	ldi	r24, 0x02	; 2
     e20:	80 93 d8 01 	sts	0x01D8, r24	; 0x8001d8 <PowerON_Sound_Step>
		Hal__SetBuzzer(OFF);
     e24:	80 e0       	ldi	r24, 0x00	; 0
     e26:	0e 94 97 04 	call	0x92e	; 0x92e <Hal__SetBuzzer>


SOUND_STATUS PowerOnSoundHandler(void)
{
SOUND_STATUS status;
status = SOUND_PLAYING;
     e2a:	81 e0       	ldi	r24, 0x01	; 1
     e2c:	08 95       	ret
		Hal__SetBuzzer(OFF);
		}
	break;  

case POWER_ON_SOUND_STEP3:
	if(Timer__HMSGetStatus(TIMER_HMS_POWER_ON_SOUND) == TIMER_EXPIRED)
     e2e:	82 e0       	ldi	r24, 0x02	; 2
     e30:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <Timer__HMSGetStatus>
     e34:	81 11       	cpse	r24, r1
     e36:	45 c0       	rjmp	.+138    	; 0xec2 <PowerOnSoundHandler+0x100>
		{
	    Timer__HMSSet(TIMER_HMS_POWER_ON_SOUND, 0,0,1);
     e38:	21 e0       	ldi	r18, 0x01	; 1
     e3a:	40 e0       	ldi	r20, 0x00	; 0
     e3c:	60 e0       	ldi	r22, 0x00	; 0
     e3e:	82 e0       	ldi	r24, 0x02	; 2
     e40:	0e 94 cd 03 	call	0x79a	; 0x79a <Timer__HMSSet>
		PowerON_Sound_Step = POWER_ON_SOUND_STEP4;
     e44:	83 e0       	ldi	r24, 0x03	; 3
     e46:	80 93 d8 01 	sts	0x01D8, r24	; 0x8001d8 <PowerON_Sound_Step>
		//Hal__SetBuzzerFreq(4000);   //mudar frequencia do PWM
		Hal__SetBuzzer(ON);
     e4a:	81 e0       	ldi	r24, 0x01	; 1
     e4c:	0e 94 97 04 	call	0x92e	; 0x92e <Hal__SetBuzzer>


SOUND_STATUS PowerOnSoundHandler(void)
{
SOUND_STATUS status;
status = SOUND_PLAYING;
     e50:	81 e0       	ldi	r24, 0x01	; 1
     e52:	08 95       	ret
		//_delay_ms(2000);
	    }
	break;
	
case POWER_ON_SOUND_STEP4:
	if(Timer__HMSGetStatus(TIMER_HMS_POWER_ON_SOUND) == TIMER_EXPIRED)
     e54:	82 e0       	ldi	r24, 0x02	; 2
     e56:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <Timer__HMSGetStatus>
     e5a:	81 11       	cpse	r24, r1
     e5c:	34 c0       	rjmp	.+104    	; 0xec6 <PowerOnSoundHandler+0x104>
		{
	    Timer__HMSSet(TIMER_HMS_POWER_ON_SOUND, 0,0,1);
     e5e:	21 e0       	ldi	r18, 0x01	; 1
     e60:	40 e0       	ldi	r20, 0x00	; 0
     e62:	60 e0       	ldi	r22, 0x00	; 0
     e64:	82 e0       	ldi	r24, 0x02	; 2
     e66:	0e 94 cd 03 	call	0x79a	; 0x79a <Timer__HMSSet>
		PowerON_Sound_Step = POWER_ON_SOUND_STEP5;
     e6a:	84 e0       	ldi	r24, 0x04	; 4
     e6c:	80 93 d8 01 	sts	0x01D8, r24	; 0x8001d8 <PowerON_Sound_Step>
		Hal__SetBuzzer(OFF);
     e70:	80 e0       	ldi	r24, 0x00	; 0
     e72:	0e 94 97 04 	call	0x92e	; 0x92e <Hal__SetBuzzer>


SOUND_STATUS PowerOnSoundHandler(void)
{
SOUND_STATUS status;
status = SOUND_PLAYING;
     e76:	81 e0       	ldi	r24, 0x01	; 1
     e78:	08 95       	ret
		//_delay_ms(2000);
		}
	break;
	
case POWER_ON_SOUND_STEP5:
	if(Timer__HMSGetStatus(TIMER_HMS_POWER_ON_SOUND) == TIMER_EXPIRED)
     e7a:	82 e0       	ldi	r24, 0x02	; 2
     e7c:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <Timer__HMSGetStatus>
     e80:	81 11       	cpse	r24, r1
     e82:	23 c0       	rjmp	.+70     	; 0xeca <PowerOnSoundHandler+0x108>
		{
	    Timer__HMSSet(TIMER_HMS_POWER_ON_SOUND, 0,0,1);
     e84:	21 e0       	ldi	r18, 0x01	; 1
     e86:	40 e0       	ldi	r20, 0x00	; 0
     e88:	60 e0       	ldi	r22, 0x00	; 0
     e8a:	82 e0       	ldi	r24, 0x02	; 2
     e8c:	0e 94 cd 03 	call	0x79a	; 0x79a <Timer__HMSSet>
		PowerON_Sound_Step = POWER_ON_SOUND_STEP6;
     e90:	85 e0       	ldi	r24, 0x05	; 5
     e92:	80 93 d8 01 	sts	0x01D8, r24	; 0x8001d8 <PowerON_Sound_Step>
		//Hal__SetBuzzerFreq(4000);
		Hal__SetBuzzer(ON);
     e96:	81 e0       	ldi	r24, 0x01	; 1
     e98:	0e 94 97 04 	call	0x92e	; 0x92e <Hal__SetBuzzer>


SOUND_STATUS PowerOnSoundHandler(void)
{
SOUND_STATUS status;
status = SOUND_PLAYING;
     e9c:	81 e0       	ldi	r24, 0x01	; 1
     e9e:	08 95       	ret
		//_delay_ms(2000);
		}
	break;
	
case POWER_ON_SOUND_STEP6:
	if(Timer__HMSGetStatus(TIMER_HMS_POWER_ON_SOUND) == TIMER_EXPIRED)
     ea0:	82 e0       	ldi	r24, 0x02	; 2
     ea2:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <Timer__HMSGetStatus>
     ea6:	81 11       	cpse	r24, r1
     ea8:	12 c0       	rjmp	.+36     	; 0xece <PowerOnSoundHandler+0x10c>
		{
		PowerON_Sound_Step = POWER_ON_SOUND_STEP1;
     eaa:	10 92 d8 01 	sts	0x01D8, r1	; 0x8001d8 <PowerON_Sound_Step>
		Hal__SetBuzzer(OFF);
     eae:	0e 94 97 04 	call	0x92e	; 0x92e <Hal__SetBuzzer>
		//Hal__SetLed(LED_1, LED_OFF);
		status = SOUND_DONE;
     eb2:	80 e0       	ldi	r24, 0x00	; 0
     eb4:	08 95       	ret
		}
	break;

default:
	PowerON_Sound_Step = POWER_ON_SOUND_STEP1;
     eb6:	10 92 d8 01 	sts	0x01D8, r1	; 0x8001d8 <PowerON_Sound_Step>
	status = SOUND_DONE;
     eba:	80 e0       	ldi	r24, 0x00	; 0
	break;
     ebc:	08 95       	ret


SOUND_STATUS PowerOnSoundHandler(void)
{
SOUND_STATUS status;
status = SOUND_PLAYING;
     ebe:	81 e0       	ldi	r24, 0x01	; 1
     ec0:	08 95       	ret
     ec2:	81 e0       	ldi	r24, 0x01	; 1
     ec4:	08 95       	ret
     ec6:	81 e0       	ldi	r24, 0x01	; 1
     ec8:	08 95       	ret
     eca:	81 e0       	ldi	r24, 0x01	; 1
     ecc:	08 95       	ret
     ece:	81 e0       	ldi	r24, 0x01	; 1
	PowerON_Sound_Step = POWER_ON_SOUND_STEP1;
	status = SOUND_DONE;
	break;
}
return status;
}
     ed0:	08 95       	ret

00000ed2 <KeyPressSoundHandler>:
{
SOUND_STATUS status;
status = SOUND_PLAYING;
//Hal__SetBuzzerFreq(4000);
	
switch(Key_Press_Sound_Step)
     ed2:	80 91 d9 01 	lds	r24, 0x01D9	; 0x8001d9 <Key_Press_Sound_Step>
     ed6:	88 23       	and	r24, r24
     ed8:	19 f0       	breq	.+6      	; 0xee0 <KeyPressSoundHandler+0xe>
     eda:	81 30       	cpi	r24, 0x01	; 1
     edc:	71 f0       	breq	.+28     	; 0xefa <KeyPressSoundHandler+0x28>
     ede:	18 c0       	rjmp	.+48     	; 0xf10 <KeyPressSoundHandler+0x3e>
	{
	case KEY_PRESS_SOUND_STEP1:
		Timer__HMSSet(TIMER_HMS_KEY_PRESS_SOUND, 0,0,1);
     ee0:	21 e0       	ldi	r18, 0x01	; 1
     ee2:	40 e0       	ldi	r20, 0x00	; 0
     ee4:	60 e0       	ldi	r22, 0x00	; 0
     ee6:	83 e0       	ldi	r24, 0x03	; 3
     ee8:	0e 94 cd 03 	call	0x79a	; 0x79a <Timer__HMSSet>
		Hal__SetBuzzer(ON);
     eec:	81 e0       	ldi	r24, 0x01	; 1
     eee:	0e 94 97 04 	call	0x92e	; 0x92e <Hal__SetBuzzer>
		Key_Press_Sound_Step = KEY_PRESS_SOUND_STEP2;
     ef2:	81 e0       	ldi	r24, 0x01	; 1
     ef4:	80 93 d9 01 	sts	0x01D9, r24	; 0x8001d9 <Key_Press_Sound_Step>
		break;
     ef8:	08 95       	ret

	case KEY_PRESS_SOUND_STEP2:
		if(Timer__HMSGetStatus(TIMER_HMS_KEY_PRESS_SOUND) == TIMER_EXPIRED)
     efa:	83 e0       	ldi	r24, 0x03	; 3
     efc:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <Timer__HMSGetStatus>
     f00:	81 11       	cpse	r24, r1
     f02:	0a c0       	rjmp	.+20     	; 0xf18 <KeyPressSoundHandler+0x46>
		{
			Hal__SetBuzzer(OFF);
     f04:	0e 94 97 04 	call	0x92e	; 0x92e <Hal__SetBuzzer>
			Key_Press_Sound_Step = KEY_PRESS_SOUND_STEP1;
     f08:	10 92 d9 01 	sts	0x01D9, r1	; 0x8001d9 <Key_Press_Sound_Step>
			status = SOUND_DONE;
     f0c:	80 e0       	ldi	r24, 0x00	; 0
     f0e:	08 95       	ret
		}
		break;
	default:
		Key_Press_Sound_Step = KEY_PRESS_SOUND_STEP1;
     f10:	10 92 d9 01 	sts	0x01D9, r1	; 0x8001d9 <Key_Press_Sound_Step>
		status = SOUND_DONE;
     f14:	80 e0       	ldi	r24, 0x00	; 0
		break;
     f16:	08 95       	ret

//---------------------------------------------------------------------------------------------------------------------
SOUND_STATUS KeyPressSoundHandler(void)
{
SOUND_STATUS status;
status = SOUND_PLAYING;
     f18:	81 e0       	ldi	r24, 0x01	; 1
		status = SOUND_DONE;
		break;
	}
	
return status;
}
     f1a:	08 95       	ret

00000f1c <EndCycleSoundHandler>:
{
SOUND_STATUS status;
status = SOUND_PLAYING;
//Hal__SetBuzzerFreq(4000);
	
switch(End_Cycle_Sound_Step)
     f1c:	80 91 d7 01 	lds	r24, 0x01D7	; 0x8001d7 <End_Cycle_Sound_Step>
     f20:	88 23       	and	r24, r24
     f22:	79 f0       	breq	.+30     	; 0xf42 <EndCycleSoundHandler+0x26>
     f24:	81 30       	cpi	r24, 0x01	; 1
     f26:	c9 f4       	brne	.+50     	; 0xf5a <EndCycleSoundHandler+0x3e>
	{
	case END_CYCLE_SOUND_STEP_ON:
		Timer__HMSSet(TIMER_HMS_END_CYCLE_SOUND, 0,0,3);
     f28:	23 e0       	ldi	r18, 0x03	; 3
     f2a:	40 e0       	ldi	r20, 0x00	; 0
     f2c:	60 e0       	ldi	r22, 0x00	; 0
     f2e:	84 e0       	ldi	r24, 0x04	; 4
     f30:	0e 94 cd 03 	call	0x79a	; 0x79a <Timer__HMSSet>
		Hal__SetBuzzer(ON);
     f34:	81 e0       	ldi	r24, 0x01	; 1
     f36:	0e 94 97 04 	call	0x92e	; 0x92e <Hal__SetBuzzer>
		//_delay_ms(2000);
		End_Cycle_Sound_Step = END_CYCLE_SOUND_STEP_OFF;
     f3a:	10 92 d7 01 	sts	0x01D7, r1	; 0x8001d7 <End_Cycle_Sound_Step>
*/

SOUND_STATUS EndCycleSoundHandler(void)
{
SOUND_STATUS status;
status = SOUND_PLAYING;
     f3e:	81 e0       	ldi	r24, 0x01	; 1
	case END_CYCLE_SOUND_STEP_ON:
		Timer__HMSSet(TIMER_HMS_END_CYCLE_SOUND, 0,0,3);
		Hal__SetBuzzer(ON);
		//_delay_ms(2000);
		End_Cycle_Sound_Step = END_CYCLE_SOUND_STEP_OFF;
		break;
     f40:	08 95       	ret

	case END_CYCLE_SOUND_STEP_OFF:
	//Hal__SetBuzzer(ON);
	//_delay_ms(2000);
		if(Timer__HMSGetStatus(TIMER_HMS_END_CYCLE_SOUND) == TIMER_EXPIRED)
     f42:	84 e0       	ldi	r24, 0x04	; 4
     f44:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <Timer__HMSGetStatus>
     f48:	81 11       	cpse	r24, r1
     f4a:	0c c0       	rjmp	.+24     	; 0xf64 <EndCycleSoundHandler+0x48>
			{
			Hal__SetBuzzer(OFF);
     f4c:	0e 94 97 04 	call	0x92e	; 0x92e <Hal__SetBuzzer>
			End_Cycle_Sound_Step = END_CYCLE_SOUND_STEP_ON;
     f50:	81 e0       	ldi	r24, 0x01	; 1
     f52:	80 93 d7 01 	sts	0x01D7, r24	; 0x8001d7 <End_Cycle_Sound_Step>
			status = SOUND_DONE;
     f56:	80 e0       	ldi	r24, 0x00	; 0
     f58:	08 95       	ret
			}
		break;
	default:
		End_Cycle_Sound_Step = END_CYCLE_SOUND_STEP_ON;
     f5a:	81 e0       	ldi	r24, 0x01	; 1
     f5c:	80 93 d7 01 	sts	0x01D7, r24	; 0x8001d7 <End_Cycle_Sound_Step>
		status = SOUND_DONE;
     f60:	80 e0       	ldi	r24, 0x00	; 0
		break;
     f62:	08 95       	ret
*/

SOUND_STATUS EndCycleSoundHandler(void)
{
SOUND_STATUS status;
status = SOUND_PLAYING;
     f64:	81 e0       	ldi	r24, 0x01	; 1
		status = SOUND_DONE;
		break;
	}
	
return status;
     f66:	08 95       	ret

00000f68 <Sounds__Background>:
//
//*********************************************************
 
void Sounds__Background(void)
{
switch (PlaySound)
     f68:	80 91 d6 01 	lds	r24, 0x01D6	; 0x8001d6 <PlaySound>
     f6c:	81 30       	cpi	r24, 0x01	; 1
     f6e:	71 f0       	breq	.+28     	; 0xf8c <Sounds__Background+0x24>
     f70:	28 f0       	brcs	.+10     	; 0xf7c <Sounds__Background+0x14>
     f72:	82 30       	cpi	r24, 0x02	; 2
     f74:	99 f0       	breq	.+38     	; 0xf9c <Sounds__Background+0x34>
     f76:	83 30       	cpi	r24, 0x03	; 3
     f78:	c9 f0       	breq	.+50     	; 0xfac <Sounds__Background+0x44>
     f7a:	08 95       	ret
	{
	case SOUND_POWER_ON:
		if(PowerOnSoundHandler() == SOUND_DONE)
     f7c:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <PowerOnSoundHandler>
     f80:	81 11       	cpse	r24, r1
     f82:	17 c0       	rjmp	.+46     	; 0xfb2 <Sounds__Background+0x4a>
			{
			PlaySound = PLAY_NO_SOUND;
     f84:	83 e0       	ldi	r24, 0x03	; 3
     f86:	80 93 d6 01 	sts	0x01D6, r24	; 0x8001d6 <PlaySound>
     f8a:	08 95       	ret
			}
		break;

	case SOUND_KEY_PRESS:
		if(KeyPressSoundHandler() == SOUND_DONE)
     f8c:	0e 94 69 07 	call	0xed2	; 0xed2 <KeyPressSoundHandler>
     f90:	81 11       	cpse	r24, r1
     f92:	0f c0       	rjmp	.+30     	; 0xfb2 <Sounds__Background+0x4a>
			{
			//	Hal__SetAllLeds(LED_ON);  // depuração
			PlaySound = PLAY_NO_SOUND;    
     f94:	83 e0       	ldi	r24, 0x03	; 3
     f96:	80 93 d6 01 	sts	0x01D6, r24	; 0x8001d6 <PlaySound>
     f9a:	08 95       	ret
			}
		break;

	case SOUND_END_CYCLE:
		if(EndCycleSoundHandler() == SOUND_DONE)
     f9c:	0e 94 8e 07 	call	0xf1c	; 0xf1c <EndCycleSoundHandler>
     fa0:	81 11       	cpse	r24, r1
     fa2:	07 c0       	rjmp	.+14     	; 0xfb2 <Sounds__Background+0x4a>
			{
			PlaySound = PLAY_NO_SOUND;  
     fa4:	83 e0       	ldi	r24, 0x03	; 3
     fa6:	80 93 d6 01 	sts	0x01D6, r24	; 0x8001d6 <PlaySound>
     faa:	08 95       	ret
			}
		break;
	
	case PLAY_NO_SOUND:
		Hal__SetBuzzer(OFF);
     fac:	80 e0       	ldi	r24, 0x00	; 0
     fae:	0e 94 97 04 	call	0x92e	; 0x92e <Hal__SetBuzzer>
     fb2:	08 95       	ret

00000fb4 <__divmodhi4>:
     fb4:	97 fb       	bst	r25, 7
     fb6:	07 2e       	mov	r0, r23
     fb8:	16 f4       	brtc	.+4      	; 0xfbe <__divmodhi4+0xa>
     fba:	00 94       	com	r0
     fbc:	07 d0       	rcall	.+14     	; 0xfcc <__divmodhi4_neg1>
     fbe:	77 fd       	sbrc	r23, 7
     fc0:	09 d0       	rcall	.+18     	; 0xfd4 <__divmodhi4_neg2>
     fc2:	0e 94 ee 07 	call	0xfdc	; 0xfdc <__udivmodhi4>
     fc6:	07 fc       	sbrc	r0, 7
     fc8:	05 d0       	rcall	.+10     	; 0xfd4 <__divmodhi4_neg2>
     fca:	3e f4       	brtc	.+14     	; 0xfda <__divmodhi4_exit>

00000fcc <__divmodhi4_neg1>:
     fcc:	90 95       	com	r25
     fce:	81 95       	neg	r24
     fd0:	9f 4f       	sbci	r25, 0xFF	; 255
     fd2:	08 95       	ret

00000fd4 <__divmodhi4_neg2>:
     fd4:	70 95       	com	r23
     fd6:	61 95       	neg	r22
     fd8:	7f 4f       	sbci	r23, 0xFF	; 255

00000fda <__divmodhi4_exit>:
     fda:	08 95       	ret

00000fdc <__udivmodhi4>:
     fdc:	aa 1b       	sub	r26, r26
     fde:	bb 1b       	sub	r27, r27
     fe0:	51 e1       	ldi	r21, 0x11	; 17
     fe2:	07 c0       	rjmp	.+14     	; 0xff2 <__udivmodhi4_ep>

00000fe4 <__udivmodhi4_loop>:
     fe4:	aa 1f       	adc	r26, r26
     fe6:	bb 1f       	adc	r27, r27
     fe8:	a6 17       	cp	r26, r22
     fea:	b7 07       	cpc	r27, r23
     fec:	10 f0       	brcs	.+4      	; 0xff2 <__udivmodhi4_ep>
     fee:	a6 1b       	sub	r26, r22
     ff0:	b7 0b       	sbc	r27, r23

00000ff2 <__udivmodhi4_ep>:
     ff2:	88 1f       	adc	r24, r24
     ff4:	99 1f       	adc	r25, r25
     ff6:	5a 95       	dec	r21
     ff8:	a9 f7       	brne	.-22     	; 0xfe4 <__udivmodhi4_loop>
     ffa:	80 95       	com	r24
     ffc:	90 95       	com	r25
     ffe:	bc 01       	movw	r22, r24
    1000:	cd 01       	movw	r24, r26
    1002:	08 95       	ret

00001004 <_exit>:
    1004:	f8 94       	cli

00001006 <__stop_program>:
    1006:	ff cf       	rjmp	.-2      	; 0x1006 <__stop_program>
