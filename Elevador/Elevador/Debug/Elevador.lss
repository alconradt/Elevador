
Elevador.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000052  00800100  00001000  00001094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001000  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000088  00800152  00800152  000010e6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000010e6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001118  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000328  00000000  00000000  00001158  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000384c  00000000  00000000  00001480  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000153e  00000000  00000000  00004ccc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000019dc  00000000  00000000  0000620a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000059c  00000000  00000000  00007be8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000017d6  00000000  00000000  00008184  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000ec7  00000000  00000000  0000995a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000258  00000000  00000000  0000a821  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 f8 03 	jmp	0x7f0	; 0x7f0 <__vector_13>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e0 e0       	ldi	r30, 0x00	; 0
      7c:	f0 e1       	ldi	r31, 0x10	; 16
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	a2 35       	cpi	r26, 0x52	; 82
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	21 e0       	ldi	r18, 0x01	; 1
      8c:	a2 e5       	ldi	r26, 0x52	; 82
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	aa 3d       	cpi	r26, 0xDA	; 218
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 a2 00 	call	0x144	; 0x144 <main>
      9e:	0c 94 fe 07 	jmp	0xffc	; 0xffc <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <Appl__Initialize>:
//=====================================================================================================================


void Appl__Initialize(void)
{
	User_Action = EVENTS_NO_EVENT;
      a6:	8f ef       	ldi	r24, 0xFF	; 255
      a8:	80 93 54 01 	sts	0x0154, r24	; 0x800154 <User_Action>
	Timer_Counter = TIME_IN_50MS_BASE;
      ac:	84 e1       	ldi	r24, 0x14	; 20
      ae:	80 93 55 01 	sts	0x0155, r24	; 0x800155 <Timer_Counter>
	Toggle = OFF;
      b2:	10 92 57 01 	sts	0x0157, r1	; 0x800157 <Toggle>
	Sounds__PlaySounds(SOUND_POWER_ON);   //buzzer de power on
      b6:	80 e0       	ldi	r24, 0x00	; 0
      b8:	0e 94 d4 06 	call	0xda8	; 0xda8 <Sounds__PlaySounds>
	Trigger = FALSE;
      bc:	10 92 56 01 	sts	0x0156, r1	; 0x800156 <Trigger>
      c0:	08 95       	ret

000000c2 <Appl__Handler>:
}

void Appl__Handler(void)
{
	User_Action = Display__GetEvent();
      c2:	0e 94 53 06 	call	0xca6	; 0xca6 <Display__GetEvent>
      c6:	80 93 54 01 	sts	0x0154, r24	; 0x800154 <User_Action>
	if (User_Action != EVENTS_NO_EVENT)
      ca:	8f 3f       	cpi	r24, 0xFF	; 255
      cc:	d1 f1       	breq	.+116    	; 0x142 <Appl__Handler+0x80>
	{
		switch(User_Action)
      ce:	81 30       	cpi	r24, 0x01	; 1
      d0:	89 f0       	breq	.+34     	; 0xf4 <Appl__Handler+0x32>
      d2:	18 f0       	brcs	.+6      	; 0xda <Appl__Handler+0x18>
      d4:	82 30       	cpi	r24, 0x02	; 2
      d6:	d9 f0       	breq	.+54     	; 0x10e <Appl__Handler+0x4c>
      d8:	08 95       	ret
		{
			case KEY_GROUND_FLOOR:
				Hal__SetBuzzerFreq(4000);
      da:	80 ea       	ldi	r24, 0xA0	; 160
      dc:	9f e0       	ldi	r25, 0x0F	; 15
      de:	0e 94 aa 04 	call	0x954	; 0x954 <Hal__SetBuzzerFreq>
				Sounds__PlaySounds(SOUND_KEY_PRESS);
      e2:	81 e0       	ldi	r24, 0x01	; 1
      e4:	0e 94 d4 06 	call	0xda8	; 0xda8 <Sounds__PlaySounds>
				Floor_position = GROUND_STATE;
      e8:	10 92 53 01 	sts	0x0153, r1	; 0x800153 <Floor_position>
				OvenPosition__SetSolicitation(GROUND);
      ec:	80 e0       	ldi	r24, 0x00	; 0
      ee:	0e 94 03 01 	call	0x206	; 0x206 <OvenPosition__SetSolicitation>
			break;
      f2:	08 95       	ret
		
			case KEY_FIRST_FLOOR:
				Hal__SetBuzzerFreq(4000);
      f4:	80 ea       	ldi	r24, 0xA0	; 160
      f6:	9f e0       	ldi	r25, 0x0F	; 15
      f8:	0e 94 aa 04 	call	0x954	; 0x954 <Hal__SetBuzzerFreq>
				Sounds__PlaySounds(SOUND_KEY_PRESS);
      fc:	81 e0       	ldi	r24, 0x01	; 1
      fe:	0e 94 d4 06 	call	0xda8	; 0xda8 <Sounds__PlaySounds>
				Floor_position = FIRST_STATE;
     102:	81 e0       	ldi	r24, 0x01	; 1
     104:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <Floor_position>
				OvenPosition__SetSolicitation(FIRST);
     108:	0e 94 03 01 	call	0x206	; 0x206 <OvenPosition__SetSolicitation>
			break;
     10c:	08 95       	ret
			
			case KEY_NEXT_FLOOR:
				Hal__SetBuzzerFreq(4000);
     10e:	80 ea       	ldi	r24, 0xA0	; 160
     110:	9f e0       	ldi	r25, 0x0F	; 15
     112:	0e 94 aa 04 	call	0x954	; 0x954 <Hal__SetBuzzerFreq>
				Sounds__PlaySounds(SOUND_KEY_PRESS);
     116:	81 e0       	ldi	r24, 0x01	; 1
     118:	0e 94 d4 06 	call	0xda8	; 0xda8 <Sounds__PlaySounds>
				if (Floor_position == GROUND_STATE)
     11c:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <Floor_position>
     120:	81 11       	cpse	r24, r1
     122:	06 c0       	rjmp	.+12     	; 0x130 <Appl__Handler+0x6e>
				{
					PortSensor__Movie(CLOSED);
     124:	81 e0       	ldi	r24, 0x01	; 1
     126:	0e 94 93 06 	call	0xd26	; 0xd26 <PortSensor__Movie>
					OvenPosition__SetSolicitation(FIRST);
     12a:	81 e0       	ldi	r24, 0x01	; 1
     12c:	0e 94 03 01 	call	0x206	; 0x206 <OvenPosition__SetSolicitation>
				}
				if (Floor_position == FIRST_STATE)
     130:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <Floor_position>
     134:	81 30       	cpi	r24, 0x01	; 1
     136:	29 f4       	brne	.+10     	; 0x142 <Appl__Handler+0x80>
				{
					PortSensor__Movie(CLOSED);
     138:	0e 94 93 06 	call	0xd26	; 0xd26 <PortSensor__Movie>
					OvenPosition__SetSolicitation(GROUND);
     13c:	80 e0       	ldi	r24, 0x00	; 0
     13e:	0e 94 03 01 	call	0x206	; 0x206 <OvenPosition__SetSolicitation>
     142:	08 95       	ret

00000144 <main>:
//-------------------------------------- Public Functions -------------------------------------------------------------
//=====================================================================================================================

void main(void)
{
	Slot = SLOT_1;
     144:	10 92 58 01 	sts	0x0158, r1	; 0x800158 <Slot>
	
	TCCR1A = 0;                        //confira timer para operação normal pinos OC1A e OC1B desconectados
     148:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
	TCCR1B = 0;                        //limpa registrador
     14c:	e1 e8       	ldi	r30, 0x81	; 129
     14e:	f0 e0       	ldi	r31, 0x00	; 0
     150:	10 82       	st	Z, r1
	TCCR1B |= (1<<CS10)|(1 << CS12);   // configura prescaler para 1024: CS12 = 1 e CS10 = 1
     152:	80 81       	ld	r24, Z
     154:	85 60       	ori	r24, 0x05	; 5
     156:	80 83       	st	Z, r24
	
	TCNT1 = 62500;      //para contar a cada 250ms
     158:	84 e2       	ldi	r24, 0x24	; 36
     15a:	94 ef       	ldi	r25, 0xF4	; 244
     15c:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     160:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
	//TCNT1 = 0xC2F7;                    //inicia timer com valor para que estouro ocorra em 1 segundo
	//TCNT1 = 34186;                   // Para contar 2s=> 65536 - 31330
	// 65536-(16MHz/1024/1Hz) =  65536 - 15.625 = 49911(0xC2F7)=> 15.625 é o período desejado.
	// Usa-se a diferença porque o contador é crescente e estoura de 0xffff a 0.
	TIMSK1 |= (1 << TOIE1);
     164:	ef e6       	ldi	r30, 0x6F	; 111
     166:	f0 e0       	ldi	r31, 0x00	; 0
     168:	80 81       	ld	r24, Z
     16a:	81 60       	ori	r24, 0x01	; 1
     16c:	80 83       	st	Z, r24
	sei();
     16e:	78 94       	sei
	
	
	// Functions Initialization
	INITIALIZE_TASKS();
     170:	0e 94 4a 01 	call	0x294	; 0x294 <ADC__Initialize>
     174:	0e 94 2e 03 	call	0x65c	; 0x65c <Pwm__Initialize>
     178:	0e 94 30 04 	call	0x860	; 0x860 <Hal__Initialize>
     17c:	0e 94 f5 05 	call	0xbea	; 0xbea <Display__Initialize>
     180:	0e 94 8f 03 	call	0x71e	; 0x71e <Timer__Initialize>
     184:	0e 94 c9 06 	call	0xd92	; 0xd92 <Sounds__Initialize>
     188:	0e 94 ac 06 	call	0xd58	; 0xd58 <PositionSensor__Initialize>
     18c:	0e 94 00 01 	call	0x200	; 0x200 <OvenPositionControl__Initialize>
     190:	0e 94 53 00 	call	0xa6	; 0xa6 <Appl__Initialize>

			default:
			  Slot = SLOT_1;
			  break;
	       }
	Slot++;
     194:	c1 e0       	ldi	r28, 0x01	; 1
	INITIALIZE_TASKS();
		
	//Main Loop
	for(;;)
	{
		ALL_SLOTS_TASKS();
     196:	0e 94 a7 03 	call	0x74e	; 0x74e <Timer__HMSHandler>
     19a:	0e 94 48 05 	call	0xa90	; 0xa90 <Hal__FastHandler>
		switch(Slot)
     19e:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <Slot>
     1a2:	82 30       	cpi	r24, 0x02	; 2
     1a4:	99 f0       	breq	.+38     	; 0x1cc <main+0x88>
     1a6:	28 f4       	brcc	.+10     	; 0x1b2 <main+0x6e>
     1a8:	88 23       	and	r24, r24
     1aa:	41 f0       	breq	.+16     	; 0x1bc <main+0x78>
     1ac:	81 30       	cpi	r24, 0x01	; 1
     1ae:	59 f0       	breq	.+22     	; 0x1c6 <main+0x82>
     1b0:	1a c0       	rjmp	.+52     	; 0x1e6 <main+0xa2>
     1b2:	83 30       	cpi	r24, 0x03	; 3
     1b4:	81 f0       	breq	.+32     	; 0x1d6 <main+0x92>
     1b6:	84 30       	cpi	r24, 0x04	; 4
     1b8:	89 f0       	breq	.+34     	; 0x1dc <main+0x98>
     1ba:	15 c0       	rjmp	.+42     	; 0x1e6 <main+0xa2>
		   {
			case SLOT_1:
			   SLOT_1_TASKS();
     1bc:	0e 94 b0 07 	call	0xf60	; 0xf60 <Sounds__Background>
     1c0:	0e 94 c1 05 	call	0xb82	; 0xb82 <Hal__BackgroundHandler>
			   break;
     1c4:	13 c0       	rjmp	.+38     	; 0x1ec <main+0xa8>

			case SLOT_2:
			   SLOT_2_TASKS();
     1c6:	0e 94 61 00 	call	0xc2	; 0xc2 <Appl__Handler>
			   break;
     1ca:	10 c0       	rjmp	.+32     	; 0x1ec <main+0xa8>

			case SLOT_3:
			  SLOT_3_TASKS();
     1cc:	0e 94 73 01 	call	0x2e6	; 0x2e6 <ADC__Handler>
     1d0:	0e 94 b3 06 	call	0xd66	; 0xd66 <PositionSensor__ConversionHandler>
			  break;
     1d4:	0b c0       	rjmp	.+22     	; 0x1ec <main+0xa8>

			case SLOT_4:
			  SLOT_4_TASKS();
     1d6:	0e 94 28 01 	call	0x250	; 0x250 <OvenPositionControl__Handler>
			  break;
     1da:	08 c0       	rjmp	.+16     	; 0x1ec <main+0xa8>

			case SLOT_5:
			  SLOT_5_TASKS();
     1dc:	0e 94 58 06 	call	0xcb0	; 0xcb0 <UpdateDisplaySevenSeg>
     1e0:	0e 94 fd 05 	call	0xbfa	; 0xbfa <UpdateDisplayLeds>
			  break;
     1e4:	03 c0       	rjmp	.+6      	; 0x1ec <main+0xa8>

			default:
			  Slot = SLOT_1;
			  break;
	       }
	Slot++;
     1e6:	c0 93 58 01 	sts	0x0158, r28	; 0x800158 <Slot>
     1ea:	d5 cf       	rjmp	.-86     	; 0x196 <main+0x52>
     1ec:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <Slot>
     1f0:	8f 5f       	subi	r24, 0xFF	; 255
     1f2:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <Slot>
	if(Slot >= NUM_OF_MAIN_SLOTS)
     1f6:	85 30       	cpi	r24, 0x05	; 5
     1f8:	70 f2       	brcs	.-100    	; 0x196 <main+0x52>
		Slot = SLOT_1;
     1fa:	10 92 58 01 	sts	0x0158, r1	; 0x800158 <Slot>
     1fe:	cb cf       	rjmp	.-106    	; 0x196 <main+0x52>

00000200 <OvenPositionControl__Initialize>:


//---------------------------------------------------------------------------------------------------------------------
void OvenPositionControl__Initialize(void)
{
	Oven_PositionControl_State = OVEN_OFF;
     200:	10 92 5a 01 	sts	0x015A, r1	; 0x80015a <Oven_PositionControl_State>
     204:	08 95       	ret

00000206 <OvenPosition__SetSolicitation>:
}

void OvenPosition__SetSolicitation(OVEN_POSITION_CONTROL_SOLICITATION_TYPE state)
{
	Oven_PositionControl_Solicitation = state;
     206:	80 93 5b 01 	sts	0x015B, r24	; 0x80015b <Oven_PositionControl_Solicitation>
	
	current_position = PositionSensor__GetMeters(POSITION_SENSOR_1);
     20a:	80 e0       	ldi	r24, 0x00	; 0
     20c:	0e 94 bb 06 	call	0xd76	; 0xd76 <PositionSensor__GetMeters>
     210:	90 93 5d 01 	sts	0x015D, r25	; 0x80015d <current_position+0x1>
     214:	80 93 5c 01 	sts	0x015C, r24	; 0x80015c <current_position>
	if(Oven_PositionControl_Solicitation == GROUND)
     218:	20 91 5b 01 	lds	r18, 0x015B	; 0x80015b <Oven_PositionControl_Solicitation>
     21c:	21 11       	cpse	r18, r1
     21e:	0b c0       	rjmp	.+22     	; 0x236 <OvenPosition__SetSolicitation+0x30>
	{
		if(POSITION_GROUND_MAX >= current_position)
     220:	85 3f       	cpi	r24, 0xF5	; 245
     222:	91 40       	sbci	r25, 0x01	; 1
     224:	20 f4       	brcc	.+8      	; 0x22e <OvenPosition__SetSolicitation+0x28>
		{
			Oven_PositionControl_State = OVEN_INSIDE;
     226:	81 e0       	ldi	r24, 0x01	; 1
     228:	80 93 5a 01 	sts	0x015A, r24	; 0x80015a <Oven_PositionControl_State>
     22c:	08 95       	ret
		}
		else
		{
			Oven_PositionControl_State = OVEN_OUTSIDE_UP;
     22e:	83 e0       	ldi	r24, 0x03	; 3
     230:	80 93 5a 01 	sts	0x015A, r24	; 0x80015a <Oven_PositionControl_State>
     234:	08 95       	ret
		}
	}
	if(Oven_PositionControl_Solicitation == FIRST)
     236:	21 30       	cpi	r18, 0x01	; 1
     238:	51 f4       	brne	.+20     	; 0x24e <OvenPosition__SetSolicitation+0x48>
	{	
		if(current_position >= POSITION_FIRST_MIN)
     23a:	85 3f       	cpi	r24, 0xF5	; 245
     23c:	91 40       	sbci	r25, 0x01	; 1
     23e:	20 f0       	brcs	.+8      	; 0x248 <OvenPosition__SetSolicitation+0x42>
		{
			Oven_PositionControl_State = OVEN_INSIDE;
     240:	81 e0       	ldi	r24, 0x01	; 1
     242:	80 93 5a 01 	sts	0x015A, r24	; 0x80015a <Oven_PositionControl_State>
     246:	08 95       	ret
		}
		else
		{
			Oven_PositionControl_State = OVEN_OUTSIDE_DOWN;
     248:	82 e0       	ldi	r24, 0x02	; 2
     24a:	80 93 5a 01 	sts	0x015A, r24	; 0x80015a <Oven_PositionControl_State>
     24e:	08 95       	ret

00000250 <OvenPositionControl__Handler>:
	}
}

void OvenPositionControl__Handler(void)
{
	OvenPosition__SetSolicitation(Oven_PositionControl_Solicitation);
     250:	80 91 5b 01 	lds	r24, 0x015B	; 0x80015b <Oven_PositionControl_Solicitation>
     254:	0e 94 03 01 	call	0x206	; 0x206 <OvenPosition__SetSolicitation>
	switch(Oven_PositionControl_State)
     258:	80 91 5a 01 	lds	r24, 0x015A	; 0x80015a <Oven_PositionControl_State>
     25c:	82 30       	cpi	r24, 0x02	; 2
     25e:	91 f0       	breq	.+36     	; 0x284 <OvenPositionControl__Handler+0x34>
     260:	83 30       	cpi	r24, 0x03	; 3
     262:	a1 f0       	breq	.+40     	; 0x28c <OvenPositionControl__Handler+0x3c>
     264:	81 30       	cpi	r24, 0x01	; 1
     266:	a9 f4       	brne	.+42     	; 0x292 <OvenPositionControl__Handler+0x42>
	{
		case OVEN_INSIDE:
			Display__SetState(STOPED);
     268:	80 e0       	ldi	r24, 0x00	; 0
     26a:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <Display__SetState>
			PortSensor__Movie(OPEN);
     26e:	80 e0       	ldi	r24, 0x00	; 0
     270:	0e 94 93 06 	call	0xd26	; 0xd26 <PortSensor__Movie>
			if (Door_state = SECOND_OPEN)
     274:	81 e0       	ldi	r24, 0x01	; 1
     276:	80 93 59 01 	sts	0x0159, r24	; 0x800159 <Door_state>
			{
				PortSensor__Movie(CLOSED);
     27a:	0e 94 93 06 	call	0xd26	; 0xd26 <PortSensor__Movie>
			}
			else
			{
				Door_state = SECOND_OPEN;
			}
			Oven_PositionControl_State = OVEN_OFF;
     27e:	10 92 5a 01 	sts	0x015A, r1	; 0x80015a <Oven_PositionControl_State>
		break;
     282:	08 95       	ret
		
		case OVEN_OUTSIDE_DOWN:
			Display__SetState(MOTOR_UP);		
     284:	81 e0       	ldi	r24, 0x01	; 1
     286:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <Display__SetState>
		break;
     28a:	08 95       	ret
		
		case OVEN_OUTSIDE_UP:
			Display__SetState(MOTOR_DOWN);
     28c:	82 e0       	ldi	r24, 0x02	; 2
     28e:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <Display__SetState>
     292:	08 95       	ret

00000294 <ADC__Initialize>:
// Esta função configura somente os pinos de digital para analogico e inicializa o ADC_Buffer[]

// ********************************** 
 
void ADC__Initialize(void)
{
     294:	cf 93       	push	r28
     296:	df 93       	push	r29
	volatile ADC_REG_TYPE *adc_pt;   // tipo definido no micro.h
	adc_pt = ADC_REGISTERS;          // adc_pt aponta par ao inicio dos regs do ADC ($000078)
	
	

	Adc_Step = ADC_STEP_INIT;   // inicializa o Adc_Step em INIT
     298:	10 92 6a 01 	sts	0x016A, r1	; 0x80016a <Adc_Step>
	Sampling_Time = 0;
     29c:	10 92 6b 01 	sts	0x016B, r1	; 0x80016b <Sampling_Time>
	adc_pt->DIDR0_REG.byte =0x00;  //  nenhuma entrada analógica habilitada
     2a0:	10 92 7e 00 	sts	0x007E, r1	; 0x80007e <__DATA_REGION_ORIGIN__+0x1e>
     2a4:	ce e5       	ldi	r28, 0x5E	; 94
     2a6:	d1 e0       	ldi	r29, 0x01	; 1
     2a8:	64 e2       	ldi	r22, 0x24	; 36
     2aa:	71 e0       	ldi	r23, 0x01	; 1
     2ac:	ee e1       	ldi	r30, 0x1E	; 30
     2ae:	f1 e0       	ldi	r31, 0x01	; 1
	
	for(channel = 0; channel <NUM_OF_AD_CHANNELS ; channel++)
     2b0:	80 e0       	ldi	r24, 0x00	; 0
		if(Adc_Enable_Table[channel] == ENABLED)      // se o canal é habilitado, então deixa analógico
		{
			// Configures relative input as analog input
			if(channel < NUM_OF_AD_CHANNELS) 
			   {							// CH0 to CH5 are configured in DIDR0
			   adc_pt->DIDR0_REG.byte |= ADC_BIT_SET_MASK[channel];	// configura como analógico conforme o canal enabled
     2b2:	28 e7       	ldi	r18, 0x78	; 120
     2b4:	30 e0       	ldi	r19, 0x00	; 0
	Sampling_Time = 0;
	adc_pt->DIDR0_REG.byte =0x00;  //  nenhuma entrada analógica habilitada
	
	for(channel = 0; channel <NUM_OF_AD_CHANNELS ; channel++)
	 {
		ADC_Buffer[channel] = 0;
     2b6:	19 92       	st	Y+, r1
     2b8:	19 92       	st	Y+, r1

		if(Adc_Enable_Table[channel] == ENABLED)      // se o canal é habilitado, então deixa analógico
     2ba:	db 01       	movw	r26, r22
     2bc:	9d 91       	ld	r25, X+
     2be:	bd 01       	movw	r22, r26
     2c0:	91 30       	cpi	r25, 0x01	; 1
     2c2:	51 f4       	brne	.+20     	; 0x2d8 <ADC__Initialize+0x44>
		{
			// Configures relative input as analog input
			if(channel < NUM_OF_AD_CHANNELS) 
     2c4:	86 30       	cpi	r24, 0x06	; 6
     2c6:	40 f4       	brcc	.+16     	; 0x2d8 <ADC__Initialize+0x44>
			   {							// CH0 to CH5 are configured in DIDR0
			   adc_pt->DIDR0_REG.byte |= ADC_BIT_SET_MASK[channel];	// configura como analógico conforme o canal enabled
     2c8:	d9 01       	movw	r26, r18
     2ca:	16 96       	adiw	r26, 0x06	; 6
     2cc:	4c 91       	ld	r20, X
     2ce:	16 97       	sbiw	r26, 0x06	; 6
     2d0:	90 81       	ld	r25, Z
     2d2:	94 2b       	or	r25, r20
     2d4:	16 96       	adiw	r26, 0x06	; 6
     2d6:	9c 93       	st	X, r25

	Adc_Step = ADC_STEP_INIT;   // inicializa o Adc_Step em INIT
	Sampling_Time = 0;
	adc_pt->DIDR0_REG.byte =0x00;  //  nenhuma entrada analógica habilitada
	
	for(channel = 0; channel <NUM_OF_AD_CHANNELS ; channel++)
     2d8:	8f 5f       	subi	r24, 0xFF	; 255
     2da:	31 96       	adiw	r30, 0x01	; 1
     2dc:	86 30       	cpi	r24, 0x06	; 6
     2de:	59 f7       	brne	.-42     	; 0x2b6 <ADC__Initialize+0x22>
			   {							// CH0 to CH5 are configured in DIDR0
			   adc_pt->DIDR0_REG.byte |= ADC_BIT_SET_MASK[channel];	// configura como analógico conforme o canal enabled
			   }
		}
	 }  
}
     2e0:	df 91       	pop	r29
     2e2:	cf 91       	pop	r28
     2e4:	08 95       	ret

000002e6 <ADC__Handler>:
	unsigned short int value, value_high;
	volatile ADC_REG_TYPE *adc_pt;
	adc_pt = ADC_REGISTERS;
	

	switch(Adc_Step)
     2e6:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <Adc_Step>
     2ea:	82 30       	cpi	r24, 0x02	; 2
     2ec:	81 f1       	breq	.+96     	; 0x34e <ADC__Handler+0x68>
     2ee:	28 f4       	brcc	.+10     	; 0x2fa <ADC__Handler+0x14>
     2f0:	88 23       	and	r24, r24
     2f2:	41 f0       	breq	.+16     	; 0x304 <ADC__Handler+0x1e>
     2f4:	81 30       	cpi	r24, 0x01	; 1
     2f6:	f9 f0       	breq	.+62     	; 0x336 <ADC__Handler+0x50>
     2f8:	5f c0       	rjmp	.+190    	; 0x3b8 <ADC__Handler+0xd2>
     2fa:	83 30       	cpi	r24, 0x03	; 3
     2fc:	c1 f1       	breq	.+112    	; 0x36e <ADC__Handler+0x88>
     2fe:	84 30       	cpi	r24, 0x04	; 4
     300:	f1 f1       	breq	.+124    	; 0x37e <ADC__Handler+0x98>
     302:	5a c0       	rjmp	.+180    	; 0x3b8 <ADC__Handler+0xd2>
	{
	case ADC_STEP_INIT:
		Adc_Channel++;											// Selects next channel
     304:	80 91 6c 01 	lds	r24, 0x016C	; 0x80016c <Adc_Channel>
     308:	8f 5f       	subi	r24, 0xFF	; 255
		if(Adc_Channel >= NUM_OF_AD_CHANNELS)
     30a:	86 30       	cpi	r24, 0x06	; 6
     30c:	18 f4       	brcc	.+6      	; 0x314 <ADC__Handler+0x2e>
	

	switch(Adc_Step)
	{
	case ADC_STEP_INIT:
		Adc_Channel++;											// Selects next channel
     30e:	80 93 6c 01 	sts	0x016C, r24	; 0x80016c <Adc_Channel>
     312:	02 c0       	rjmp	.+4      	; 0x318 <ADC__Handler+0x32>
		if(Adc_Channel >= NUM_OF_AD_CHANNELS)
		{
			Adc_Channel = AD_CH0;  // varre constantemente todas os canais
     314:	10 92 6c 01 	sts	0x016C, r1	; 0x80016c <Adc_Channel>
		}

		if(Adc_Enable_Table[Adc_Channel] == ENABLED)			// Checks if current channel is enabled
     318:	e0 91 6c 01 	lds	r30, 0x016C	; 0x80016c <Adc_Channel>
     31c:	f0 e0       	ldi	r31, 0x00	; 0
     31e:	ec 5d       	subi	r30, 0xDC	; 220
     320:	fe 4f       	sbci	r31, 0xFE	; 254
     322:	80 81       	ld	r24, Z
     324:	81 30       	cpi	r24, 0x01	; 1
     326:	09 f0       	breq	.+2      	; 0x32a <ADC__Handler+0x44>
     328:	49 c0       	rjmp	.+146    	; 0x3bc <ADC__Handler+0xd6>
		{
			Adc_Step = ADC_STEP_SAMPLING;
     32a:	80 93 6a 01 	sts	0x016A, r24	; 0x80016a <Adc_Step>
			Sampling_Time = ADC_SAMPLING_TIME;
     32e:	82 e3       	ldi	r24, 0x32	; 50
     330:	80 93 6b 01 	sts	0x016B, r24	; 0x80016b <Sampling_Time>
     334:	08 95       	ret
		}
		break;

	case ADC_STEP_SAMPLING:
		if(Sampling_Time)
     336:	80 91 6b 01 	lds	r24, 0x016B	; 0x80016b <Sampling_Time>
     33a:	88 23       	and	r24, r24
     33c:	21 f0       	breq	.+8      	; 0x346 <ADC__Handler+0x60>
		{
			Sampling_Time--;
     33e:	81 50       	subi	r24, 0x01	; 1
     340:	80 93 6b 01 	sts	0x016B, r24	; 0x80016b <Sampling_Time>
     344:	08 95       	ret
		}
		else
		{
			Adc_Step = ADC_STEP_CONFIG_CHANNEL;	
     346:	82 e0       	ldi	r24, 0x02	; 2
     348:	80 93 6a 01 	sts	0x016A, r24	; 0x80016a <Adc_Step>
     34c:	08 95       	ret
		}
		break;

	case ADC_STEP_CONFIG_CHANNEL:
	    adc_pt->ADMUX_REG.byte |= (unsigned char)Adc_Channel;	// Configures the channel be read
     34e:	e8 e7       	ldi	r30, 0x78	; 120
     350:	f0 e0       	ldi	r31, 0x00	; 0
     352:	94 81       	ldd	r25, Z+4	; 0x04
     354:	80 91 6c 01 	lds	r24, 0x016C	; 0x80016c <Adc_Channel>
     358:	89 2b       	or	r24, r25
     35a:	84 83       	std	Z+4, r24	; 0x04
		// ADC habilitado, sem auto trigger, sem interrupção, prescaler 128
		adc_pt->ADCSRA_REG.byte =  0x87; 
     35c:	87 e8       	ldi	r24, 0x87	; 135
     35e:	82 83       	std	Z+2, r24	; 0x02
		// INICIA conversão
		adc_pt->ADCSRA_REG.bit.bit6  = 1;    //seta bit 6 (ADSC)
     360:	82 81       	ldd	r24, Z+2	; 0x02
     362:	80 64       	ori	r24, 0x40	; 64
     364:	82 83       	std	Z+2, r24	; 0x02
		Adc_Step = ADC_STEP_WAIT_CONVERSION;					// Set next step
     366:	83 e0       	ldi	r24, 0x03	; 3
     368:	80 93 6a 01 	sts	0x016A, r24	; 0x80016a <Adc_Step>
		break;
     36c:	08 95       	ret
		
	case ADC_STEP_WAIT_CONVERSION:
		if(adc_pt->ADCSRA_REG.bit.bit6 == 0)	// Wait until conversion be completed
     36e:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
     372:	86 fd       	sbrc	r24, 6
     374:	23 c0       	rjmp	.+70     	; 0x3bc <ADC__Handler+0xd6>
		   	Adc_Step = ADC_STEP_READ_RESULT;
     376:	84 e0       	ldi	r24, 0x04	; 4
     378:	80 93 6a 01 	sts	0x016A, r24	; 0x80016a <Adc_Step>
     37c:	08 95       	ret
		break;

	case ADC_STEP_READ_RESULT:  // AQUI é feita a leitura do ADC físico!!!
	    if(adc_pt->ADMUX_REG.bit.bit5 == 1)   //8 bits
     37e:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
     382:	85 ff       	sbrs	r24, 5
     384:	03 c0       	rjmp	.+6      	; 0x38c <ADC__Handler+0xa6>
		   {
			value = (unsigned short int)((adc_pt->ADCH_REG.byte)& LO_BYTE_MASK); // 8 bits   
     386:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
     38a:	30 e0       	ldi	r19, 0x00	; 0
		   }
		if(adc_pt->ADMUX_REG.bit.bit5 == 0)    // 10 bits
     38c:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
     390:	85 fd       	sbrc	r24, 5
     392:	06 c0       	rjmp	.+12     	; 0x3a0 <ADC__Handler+0xba>
		   {
			value = (unsigned short int)((adc_pt->ADCL_REG.byte)& LO_BYTE_MASK);
     394:	e8 e7       	ldi	r30, 0x78	; 120
     396:	f0 e0       	ldi	r31, 0x00	; 0
     398:	20 81       	ld	r18, Z
			value_high = (unsigned short int)(adc_pt->ADCH_REG.byte <<8); 
     39a:	81 81       	ldd	r24, Z+1	; 0x01
			value |= value_high;	// Reads the conversion result bytes  
     39c:	30 e0       	ldi	r19, 0x00	; 0
     39e:	38 2b       	or	r19, r24
		   }

		ADC_Buffer[Adc_Channel] = value;  // A leitura do ADC é colocado no buffer ADC_Buffer do respectivo canal.
     3a0:	e0 91 6c 01 	lds	r30, 0x016C	; 0x80016c <Adc_Channel>
     3a4:	f0 e0       	ldi	r31, 0x00	; 0
     3a6:	ee 0f       	add	r30, r30
     3a8:	ff 1f       	adc	r31, r31
     3aa:	e2 5a       	subi	r30, 0xA2	; 162
     3ac:	fe 4f       	sbci	r31, 0xFE	; 254
     3ae:	31 83       	std	Z+1, r19	; 0x01
     3b0:	20 83       	st	Z, r18
		Adc_Step = ADC_STEP_INIT;
     3b2:	10 92 6a 01 	sts	0x016A, r1	; 0x80016a <Adc_Step>
		
		   //if (value >= 127)
		    //Hal__SetLed(LED_3, 0); //liga LED4
		  //else
		    //Hal__SetLed(LED_3, 1); //desliga LED4
	 	 break;
     3b6:	08 95       	ret

	default:
		Adc_Step = ADC_STEP_INIT;
     3b8:	10 92 6a 01 	sts	0x016A, r1	; 0x80016a <Adc_Step>
     3bc:	08 95       	ret

000003be <ADC__ConfigModes>:
{
	volatile ADC_REG_TYPE *adc_pt;
	adc_pt = ADC_REGISTERS;
	
	 	// seleção da tensão de referencia:
	adc_pt->ADMUX_REG.bit.bit7 = 0;   //tensão de referencia 5V
     3be:	e8 e7       	ldi	r30, 0x78	; 120
     3c0:	f0 e0       	ldi	r31, 0x00	; 0
     3c2:	94 81       	ldd	r25, Z+4	; 0x04
     3c4:	9f 77       	andi	r25, 0x7F	; 127
     3c6:	94 83       	std	Z+4, r25	; 0x04
	adc_pt->ADMUX_REG.bit.bit6 = 1;   //tensão de referencia 5V
     3c8:	94 81       	ldd	r25, Z+4	; 0x04
     3ca:	90 64       	ori	r25, 0x40	; 64
     3cc:	94 83       	std	Z+4, r25	; 0x04
	
	if(mode < NUM_OF_MODES)
     3ce:	82 30       	cpi	r24, 0x02	; 2
     3d0:	68 f4       	brcc	.+26     	; 0x3ec <ADC__ConfigModes+0x2e>
	{
		if (mode == MODE_8BITS)
     3d2:	81 11       	cpse	r24, r1
     3d4:	04 c0       	rjmp	.+8      	; 0x3de <ADC__ConfigModes+0x20>
		   adc_pt->ADMUX_REG.bit.bit5 = 1;  //Micro.h => ADLAR = 1, alinhado a esquerda e a leitura é no ADCH (8 bits)
     3d6:	84 81       	ldd	r24, Z+4	; 0x04
     3d8:	80 62       	ori	r24, 0x20	; 32
     3da:	84 83       	std	Z+4, r24	; 0x04
     3dc:	07 c0       	rjmp	.+14     	; 0x3ec <ADC__ConfigModes+0x2e>
		if (mode == MODE_10BITS)
     3de:	81 30       	cpi	r24, 0x01	; 1
     3e0:	29 f4       	brne	.+10     	; 0x3ec <ADC__ConfigModes+0x2e>
		   adc_pt->ADMUX_REG.bit.bit5 = 0;  //ADLAR = 0, alinhado a direita e a leitura é primeiro no ADCL e depois ADCH (10 bits)
     3e2:	e8 e7       	ldi	r30, 0x78	; 120
     3e4:	f0 e0       	ldi	r31, 0x00	; 0
     3e6:	84 81       	ldd	r24, Z+4	; 0x04
     3e8:	8f 7d       	andi	r24, 0xDF	; 223
     3ea:	84 83       	std	Z+4, r24	; 0x04
	}
		
	if(conv_type < NUM_OF_CONVERSION_TYPES)
     3ec:	62 30       	cpi	r22, 0x02	; 2
     3ee:	78 f4       	brcc	.+30     	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
	{
		if (conv_type == AD_SINGLE_CONVERSION)
     3f0:	61 11       	cpse	r22, r1
     3f2:	06 c0       	rjmp	.+12     	; 0x400 <__LOCK_REGION_LENGTH__>
		   adc_pt->ADCSRA_REG.bit.bit5 = 0;      //Micro.h => ADATE = 0, uma leitura
     3f4:	e8 e7       	ldi	r30, 0x78	; 120
     3f6:	f0 e0       	ldi	r31, 0x00	; 0
     3f8:	82 81       	ldd	r24, Z+2	; 0x02
     3fa:	8f 7d       	andi	r24, 0xDF	; 223
     3fc:	82 83       	std	Z+2, r24	; 0x02
     3fe:	08 95       	ret
		if (conv_type == AD_CONTINUOUS_CONVERSION)
     400:	61 30       	cpi	r22, 0x01	; 1
     402:	29 f4       	brne	.+10     	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
		   adc_pt->ADCSRA_REG.bit.bit5 = 1;      //ADATE = 1, a fonte de disparo pode ser conversão continua, comparador analogico, etc 
     404:	e8 e7       	ldi	r30, 0x78	; 120
     406:	f0 e0       	ldi	r31, 0x00	; 0
     408:	82 81       	ldd	r24, Z+2	; 0x02
     40a:	80 62       	ori	r24, 0x20	; 32
     40c:	82 83       	std	Z+2, r24	; 0x02
     40e:	08 95       	ret

00000410 <ADC__GetValue>:
 */


unsigned short int ADC__GetValue(AD_CHANNEL_TYPE channel)
{
	if(channel < NUM_OF_AD_CHANNELS)
     410:	86 30       	cpi	r24, 0x06	; 6
     412:	48 f4       	brcc	.+18     	; 0x426 <ADC__GetValue+0x16>
	{
		return ADC_Buffer[channel];  // retorna valor do ADC lido no ADC_Buffer do canal solcitado!
     414:	e8 2f       	mov	r30, r24
     416:	f0 e0       	ldi	r31, 0x00	; 0
     418:	ee 0f       	add	r30, r30
     41a:	ff 1f       	adc	r31, r31
     41c:	e2 5a       	subi	r30, 0xA2	; 162
     41e:	fe 4f       	sbci	r31, 0xFE	; 254
     420:	80 81       	ld	r24, Z
     422:	91 81       	ldd	r25, Z+1	; 0x01
     424:	08 95       	ret
	}
	return 0;
     426:	80 e0       	ldi	r24, 0x00	; 0
     428:	90 e0       	ldi	r25, 0x00	; 0
}
     42a:	08 95       	ret

0000042c <Gpio__PinConfig>:
	volatile GPIO_DATA_TYPE *pt_data;
	//volatile GPIO_MISC_TYPE *pt_misc;
	unsigned char set_bit_mask;
	unsigned char clr_bit_mask;
	
	set_bit_mask = GPIO_PIN_SET_MASK[pin];
     42c:	70 e0       	ldi	r23, 0x00	; 0
     42e:	fb 01       	movw	r30, r22
     430:	ee 5c       	subi	r30, 0xCE	; 206
     432:	fe 4f       	sbci	r31, 0xFE	; 254
     434:	20 81       	ld	r18, Z
	clr_bit_mask = GPIO_PIN_CLR_MASK[pin];
	
	
	switch(port)
     436:	81 30       	cpi	r24, 0x01	; 1
     438:	31 f0       	breq	.+12     	; 0x446 <Gpio__PinConfig+0x1a>
     43a:	18 f0       	brcs	.+6      	; 0x442 <Gpio__PinConfig+0x16>
     43c:	82 30       	cpi	r24, 0x02	; 2
     43e:	29 f0       	breq	.+10     	; 0x44a <Gpio__PinConfig+0x1e>
     440:	05 c0       	rjmp	.+10     	; 0x44c <Gpio__PinConfig+0x20>
	{
	case	PORT_B:
		pt_data = PORTB;   // Está no Micro.h: #define PORTA &GPIOA_DATA   => endereço 0x0000 00000
     442:	95 b1       	in	r25, 0x05	; 5
		break;
     444:	03 c0       	rjmp	.+6      	; 0x44c <Gpio__PinConfig+0x20>
	case	PORT_C:
		pt_data = PORTC;
     446:	98 b1       	in	r25, 0x08	; 8
		break;
     448:	01 c0       	rjmp	.+2      	; 0x44c <Gpio__PinConfig+0x20>
	case	PORT_D:
		pt_data = PORTD;
     44a:	9b b1       	in	r25, 0x0b	; 11
		break;
	default:
		break;
	}
if(type == OUTPUT_DIGITAL)    // setar 1 para saída
     44c:	41 30       	cpi	r20, 0x01	; 1
     44e:	69 f4       	brne	.+26     	; 0x46a <Gpio__PinConfig+0x3e>
{
	//var = pt_data->DIRECION_REG.byte;
	//BIT_SET(var,pin);      // Está no C_types.h =>  #define BIT_SET(mem,bit)    ((mem)|=(1UL<<(bit))) //This macro is used to set the bit of the data
	//pt_data->DIRECION_REG.byte = var;  
	//   OU
	pt_data = GPIO_DATA_LIST[port];		 	
     450:	e8 2f       	mov	r30, r24
     452:	f0 e0       	ldi	r31, 0x00	; 0
     454:	ee 0f       	add	r30, r30
     456:	ff 1f       	adc	r31, r31
     458:	e0 50       	subi	r30, 0x00	; 0
     45a:	ff 4f       	sbci	r31, 0xFF	; 255
     45c:	01 90       	ld	r0, Z+
     45e:	f0 81       	ld	r31, Z
     460:	e0 2d       	mov	r30, r0
	pt_data->DIRECION_REG.byte |= set_bit_mask;	// Config Output
     462:	81 81       	ldd	r24, Z+1	; 0x01
     464:	82 2b       	or	r24, r18
     466:	81 83       	std	Z+1, r24	; 0x01
     468:	08 95       	ret
}

if(type == INPUT_DIGITAL_PULLUP)
     46a:	41 11       	cpse	r20, r1
     46c:	14 c0       	rjmp	.+40     	; 0x496 <Gpio__PinConfig+0x6a>
{
	pt_data = GPIO_DATA_LIST[port];		 	
     46e:	e8 2f       	mov	r30, r24
     470:	f0 e0       	ldi	r31, 0x00	; 0
     472:	ee 0f       	add	r30, r30
     474:	ff 1f       	adc	r31, r31
     476:	e0 50       	subi	r30, 0x00	; 0
     478:	ff 4f       	sbci	r31, 0xFF	; 255
     47a:	01 90       	ld	r0, Z+
     47c:	f0 81       	ld	r31, Z
     47e:	e0 2d       	mov	r30, r0
	pt_data->DIRECION_REG.byte &= clr_bit_mask; 	// Config Input
     480:	81 81       	ldd	r24, Z+1	; 0x01
	//volatile GPIO_MISC_TYPE *pt_misc;
	unsigned char set_bit_mask;
	unsigned char clr_bit_mask;
	
	set_bit_mask = GPIO_PIN_SET_MASK[pin];
	clr_bit_mask = GPIO_PIN_CLR_MASK[pin];
     482:	db 01       	movw	r26, r22
     484:	a6 5d       	subi	r26, 0xD6	; 214
     486:	be 4f       	sbci	r27, 0xFE	; 254
}

if(type == INPUT_DIGITAL_PULLUP)
{
	pt_data = GPIO_DATA_LIST[port];		 	
	pt_data->DIRECION_REG.byte &= clr_bit_mask; 	// Config Input
     488:	9c 91       	ld	r25, X
     48a:	98 23       	and	r25, r24
     48c:	91 83       	std	Z+1, r25	; 0x01
	
	pt_data->DATA_OUT_PULL_REG.byte |= set_bit_mask;   // Config Input Pull up
     48e:	92 81       	ldd	r25, Z+2	; 0x02
     490:	82 2f       	mov	r24, r18
     492:	89 2b       	or	r24, r25
     494:	82 83       	std	Z+2, r24	; 0x02
     496:	08 95       	ret

00000498 <Gpio__PinWrite>:
 **********************************************************************************/
void Gpio__PinWrite(GPIO_PORT port,unsigned char pin,unsigned char value)
{
	volatile GPIO_DATA_TYPE *pt_data;
	
	  if (value == 0)
     498:	41 11       	cpse	r20, r1
     49a:	14 c0       	rjmp	.+40     	; 0x4c4 <Gpio__PinWrite+0x2c>
        {
        	pt_data = GPIO_DATA_LIST[port];		 	
     49c:	e8 2f       	mov	r30, r24
     49e:	f0 e0       	ldi	r31, 0x00	; 0
     4a0:	ee 0f       	add	r30, r30
     4a2:	ff 1f       	adc	r31, r31
     4a4:	e0 50       	subi	r30, 0x00	; 0
     4a6:	ff 4f       	sbci	r31, 0xFF	; 255
     4a8:	a0 81       	ld	r26, Z
     4aa:	b1 81       	ldd	r27, Z+1	; 0x01
        	pt_data->DATA_OUT_PULL_REG.byte &= GPIO_PIN_CLR_MASK[pin];
     4ac:	12 96       	adiw	r26, 0x02	; 2
     4ae:	9c 91       	ld	r25, X
     4b0:	12 97       	sbiw	r26, 0x02	; 2
     4b2:	e6 2f       	mov	r30, r22
     4b4:	f0 e0       	ldi	r31, 0x00	; 0
     4b6:	e6 5d       	subi	r30, 0xD6	; 214
     4b8:	fe 4f       	sbci	r31, 0xFE	; 254
     4ba:	80 81       	ld	r24, Z
     4bc:	89 23       	and	r24, r25
     4be:	12 96       	adiw	r26, 0x02	; 2
     4c0:	8c 93       	st	X, r24
     4c2:	08 95       	ret
        }
        else
        {
        	pt_data = GPIO_DATA_LIST[port];
     4c4:	e8 2f       	mov	r30, r24
     4c6:	f0 e0       	ldi	r31, 0x00	; 0
     4c8:	ee 0f       	add	r30, r30
     4ca:	ff 1f       	adc	r31, r31
     4cc:	e0 50       	subi	r30, 0x00	; 0
     4ce:	ff 4f       	sbci	r31, 0xFF	; 255
     4d0:	a0 81       	ld	r26, Z
     4d2:	b1 81       	ldd	r27, Z+1	; 0x01
        	pt_data->DATA_OUT_PULL_REG.byte |= GPIO_PIN_SET_MASK[pin];
     4d4:	12 96       	adiw	r26, 0x02	; 2
     4d6:	9c 91       	ld	r25, X
     4d8:	12 97       	sbiw	r26, 0x02	; 2
     4da:	e6 2f       	mov	r30, r22
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	ee 5c       	subi	r30, 0xCE	; 206
     4e0:	fe 4f       	sbci	r31, 0xFE	; 254
     4e2:	80 81       	ld	r24, Z
     4e4:	89 2b       	or	r24, r25
     4e6:	12 96       	adiw	r26, 0x02	; 2
     4e8:	8c 93       	st	X, r24
     4ea:	08 95       	ret

000004ec <Gpio__PinRead>:
unsigned char Gpio__PinRead(GPIO_PORT port,unsigned char pin)
{
	volatile GPIO_DATA_TYPE *pt_data;
	unsigned char pin_state = SW_OFF;       // pin_state = OFF  não pressionado  
	
		pt_data = GPIO_DATA_LIST[port];
     4ec:	e8 2f       	mov	r30, r24
     4ee:	f0 e0       	ldi	r31, 0x00	; 0
     4f0:	ee 0f       	add	r30, r30
     4f2:	ff 1f       	adc	r31, r31
     4f4:	e0 50       	subi	r30, 0x00	; 0
     4f6:	ff 4f       	sbci	r31, 0xFF	; 255
     4f8:	01 90       	ld	r0, Z+
     4fa:	f0 81       	ld	r31, Z
     4fc:	e0 2d       	mov	r30, r0
    	if (pt_data->DATA_IN_REG.byte & GPIO_PIN_SET_MASK[pin])     // if(leitura != 0)   ou if(leitura)
     4fe:	90 81       	ld	r25, Z
     500:	e6 2f       	mov	r30, r22
     502:	f0 e0       	ldi	r31, 0x00	; 0
     504:	ee 5c       	subi	r30, 0xCE	; 206
     506:	fe 4f       	sbci	r31, 0xFE	; 254
           pin_state = SW_OFF;     // pin_state = SW_OFF   não acionado
        else
		   pin_state = SW_ON;
   
    return (pin_state);
     508:	80 81       	ld	r24, Z
     50a:	98 23       	and	r25, r24
     50c:	81 e0       	ldi	r24, 0x01	; 1
     50e:	09 f4       	brne	.+2      	; 0x512 <Gpio__PinRead+0x26>
     510:	80 e0       	ldi	r24, 0x00	; 0
    
}
     512:	08 95       	ret

00000514 <Pwm__SetTCFrequency>:

pwm_pt0 = TC0_REGISTERS;
pwm_pt1 = TC1_REGISTERS;
pwm_pt2 = TC2_REGISTERS;

if((frequency > 1900) && frequency  < 2100 ){
     514:	9b 01       	movw	r18, r22
     516:	2d 56       	subi	r18, 0x6D	; 109
     518:	37 40       	sbci	r19, 0x07	; 7
     51a:	27 3c       	cpi	r18, 0xC7	; 199
     51c:	31 05       	cpc	r19, r1
     51e:	18 f5       	brcc	.+70     	; 0x566 <Pwm__SetTCFrequency+0x52>
	switch(tc){
     520:	81 30       	cpi	r24, 0x01	; 1
     522:	69 f0       	breq	.+26     	; 0x53e <Pwm__SetTCFrequency+0x2a>
     524:	18 f0       	brcs	.+6      	; 0x52c <Pwm__SetTCFrequency+0x18>
     526:	82 30       	cpi	r24, 0x02	; 2
     528:	a1 f0       	breq	.+40     	; 0x552 <Pwm__SetTCFrequency+0x3e>
     52a:	1d c0       	rjmp	.+58     	; 0x566 <Pwm__SetTCFrequency+0x52>
		case PWM_TC0:
		pwm_pt0->TCCR0B_REG.byte = 0b00100010;
     52c:	92 e2       	ldi	r25, 0x22	; 34
     52e:	95 bd       	out	0x25, r25	; 37
		default:
		break;
	}
}

if((frequency > 2900) && frequency  < 3100 ){
     530:	9b 01       	movw	r18, r22
     532:	25 55       	subi	r18, 0x55	; 85
     534:	3b 40       	sbci	r19, 0x0B	; 11
     536:	27 3c       	cpi	r18, 0xC7	; 199
     538:	31 05       	cpc	r19, r1
     53a:	08 f1       	brcs	.+66     	; 0x57e <Pwm__SetTCFrequency+0x6a>
     53c:	79 c0       	rjmp	.+242    	; 0x630 <Pwm__SetTCFrequency+0x11c>
	switch(tc){
		case PWM_TC0:
		pwm_pt0->TCCR0B_REG.byte = 0b00100010;
		break;
		case PWM_TC1:
		pwm_pt1->TCCR1B_REG.byte = 0b00100010;
     53e:	92 e2       	ldi	r25, 0x22	; 34
     540:	90 93 81 00 	sts	0x0081, r25	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
		default:
		break;
	}
}

if((frequency > 2900) && frequency  < 3100 ){
     544:	9b 01       	movw	r18, r22
     546:	25 55       	subi	r18, 0x55	; 85
     548:	3b 40       	sbci	r19, 0x0B	; 11
     54a:	27 3c       	cpi	r18, 0xC7	; 199
     54c:	31 05       	cpc	r19, r1
     54e:	00 f1       	brcs	.+64     	; 0x590 <Pwm__SetTCFrequency+0x7c>
     550:	76 c0       	rjmp	.+236    	; 0x63e <Pwm__SetTCFrequency+0x12a>
		pwm_pt1->TCCR1B_REG.byte = 0b00100010;
		break;
		case PWM_TC2:
		//pwm_pt2->TCCR2A_REG.byte = 0b00100001; //MODO 1 para PWM fase corrigida,
		//pwm_pt2->TCCR2A_REG.byte = 0b00110001; //MODO 1 para PWM fase corrigida,
		pwm_pt2->TCCR2B_REG.byte = 0b00100010;
     552:	92 e2       	ldi	r25, 0x22	; 34
     554:	90 93 b1 00 	sts	0x00B1, r25	; 0x8000b1 <__DATA_REGION_ORIGIN__+0x51>
		default:
		break;
	}
}

if((frequency > 2900) && frequency  < 3100 ){
     558:	9b 01       	movw	r18, r22
     55a:	25 55       	subi	r18, 0x55	; 85
     55c:	3b 40       	sbci	r19, 0x0B	; 11
     55e:	27 3c       	cpi	r18, 0xC7	; 199
     560:	31 05       	cpc	r19, r1
     562:	00 f1       	brcs	.+64     	; 0x5a4 <Pwm__SetTCFrequency+0x90>
     564:	73 c0       	rjmp	.+230    	; 0x64c <Pwm__SetTCFrequency+0x138>
     566:	9b 01       	movw	r18, r22
     568:	25 55       	subi	r18, 0x55	; 85
     56a:	3b 40       	sbci	r19, 0x0B	; 11
     56c:	27 3c       	cpi	r18, 0xC7	; 199
     56e:	31 05       	cpc	r19, r1
     570:	18 f5       	brcc	.+70     	; 0x5b8 <Pwm__SetTCFrequency+0xa4>
	switch(tc){
     572:	81 30       	cpi	r24, 0x01	; 1
     574:	69 f0       	breq	.+26     	; 0x590 <Pwm__SetTCFrequency+0x7c>
     576:	18 f0       	brcs	.+6      	; 0x57e <Pwm__SetTCFrequency+0x6a>
     578:	82 30       	cpi	r24, 0x02	; 2
     57a:	f1 f4       	brne	.+60     	; 0x5b8 <Pwm__SetTCFrequency+0xa4>
     57c:	13 c0       	rjmp	.+38     	; 0x5a4 <Pwm__SetTCFrequency+0x90>
		case PWM_TC0:
		pwm_pt0->TCCR0B_REG.byte = 0b00100011;
     57e:	93 e2       	ldi	r25, 0x23	; 35
     580:	95 bd       	out	0x25, r25	; 37
		default:
		break;
	}
}

if((frequency > 3900) && frequency  < 4100 ){
     582:	9b 01       	movw	r18, r22
     584:	2d 53       	subi	r18, 0x3D	; 61
     586:	3f 40       	sbci	r19, 0x0F	; 15
     588:	27 3c       	cpi	r18, 0xC7	; 199
     58a:	31 05       	cpc	r19, r1
     58c:	08 f1       	brcs	.+66     	; 0x5d0 <Pwm__SetTCFrequency+0xbc>
     58e:	3a c0       	rjmp	.+116    	; 0x604 <Pwm__SetTCFrequency+0xf0>
	switch(tc){
		case PWM_TC0:
		pwm_pt0->TCCR0B_REG.byte = 0b00100011;
		break;
		case PWM_TC1:
		pwm_pt1->TCCR1B_REG.byte = 0b00100011;
     590:	93 e2       	ldi	r25, 0x23	; 35
     592:	90 93 81 00 	sts	0x0081, r25	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
		default:
		break;
	}
}

if((frequency > 3900) && frequency  < 4100 ){
     596:	9b 01       	movw	r18, r22
     598:	2d 53       	subi	r18, 0x3D	; 61
     59a:	3f 40       	sbci	r19, 0x0F	; 15
     59c:	27 3c       	cpi	r18, 0xC7	; 199
     59e:	31 05       	cpc	r19, r1
     5a0:	f8 f0       	brcs	.+62     	; 0x5e0 <Pwm__SetTCFrequency+0xcc>
     5a2:	30 c0       	rjmp	.+96     	; 0x604 <Pwm__SetTCFrequency+0xf0>
		pwm_pt1->TCCR1B_REG.byte = 0b00100011;
		break;
		case PWM_TC2:
		//pwm_pt2->TCCR2A_REG.byte =  0b00100001; //MODO 1 para PWM fase corrigida,
		//pwm_pt2->TCCR2A_REG.byte = 0b00110001; //MODO 1 para PWM fase corrigida,
		pwm_pt2->TCCR2B_REG.byte = 0b00100011;
     5a4:	93 e2       	ldi	r25, 0x23	; 35
     5a6:	90 93 b1 00 	sts	0x00B1, r25	; 0x8000b1 <__DATA_REGION_ORIGIN__+0x51>
		default:
		break;
	}
}

if((frequency > 3900) && frequency  < 4100 ){
     5aa:	9b 01       	movw	r18, r22
     5ac:	2d 53       	subi	r18, 0x3D	; 61
     5ae:	3f 40       	sbci	r19, 0x0F	; 15
     5b0:	27 3c       	cpi	r18, 0xC7	; 199
     5b2:	31 05       	cpc	r19, r1
     5b4:	f0 f0       	brcs	.+60     	; 0x5f2 <Pwm__SetTCFrequency+0xde>
     5b6:	26 c0       	rjmp	.+76     	; 0x604 <Pwm__SetTCFrequency+0xf0>
     5b8:	9b 01       	movw	r18, r22
     5ba:	2d 53       	subi	r18, 0x3D	; 61
     5bc:	3f 40       	sbci	r19, 0x0F	; 15
     5be:	27 3c       	cpi	r18, 0xC7	; 199
     5c0:	31 05       	cpc	r19, r1
     5c2:	00 f5       	brcc	.+64     	; 0x604 <Pwm__SetTCFrequency+0xf0>
switch(tc){
     5c4:	81 30       	cpi	r24, 0x01	; 1
     5c6:	61 f0       	breq	.+24     	; 0x5e0 <Pwm__SetTCFrequency+0xcc>
     5c8:	18 f0       	brcs	.+6      	; 0x5d0 <Pwm__SetTCFrequency+0xbc>
     5ca:	82 30       	cpi	r24, 0x02	; 2
     5cc:	d9 f4       	brne	.+54     	; 0x604 <Pwm__SetTCFrequency+0xf0>
     5ce:	11 c0       	rjmp	.+34     	; 0x5f2 <Pwm__SetTCFrequency+0xde>
case PWM_TC0:
   pwm_pt0->TCCR0B_REG.byte = 0x02; //prescaler = 8 dando frequencia de 4000Hz
     5d0:	82 e0       	ldi	r24, 0x02	; 2
     5d2:	85 bd       	out	0x25, r24	; 37
default:
	break;
}
}

if((frequency > 4900) && frequency  < 5100 ){
     5d4:	65 52       	subi	r22, 0x25	; 37
     5d6:	73 41       	sbci	r23, 0x13	; 19
     5d8:	67 3c       	cpi	r22, 0xC7	; 199
     5da:	71 05       	cpc	r23, r1
     5dc:	f0 f0       	brcs	.+60     	; 0x61a <Pwm__SetTCFrequency+0x106>
     5de:	08 95       	ret
switch(tc){
case PWM_TC0:
   pwm_pt0->TCCR0B_REG.byte = 0x02; //prescaler = 8 dando frequencia de 4000Hz
   break;   
case PWM_TC1:
	pwm_pt1->TCCR1B_REG.byte = 0x02; //prescaler = 8 dando frequencia de 4000Hz
     5e0:	82 e0       	ldi	r24, 0x02	; 2
     5e2:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
default:
	break;
}
}

if((frequency > 4900) && frequency  < 5100 ){
     5e6:	65 52       	subi	r22, 0x25	; 37
     5e8:	73 41       	sbci	r23, 0x13	; 19
     5ea:	67 3c       	cpi	r22, 0xC7	; 199
     5ec:	71 05       	cpc	r23, r1
     5ee:	c0 f0       	brcs	.+48     	; 0x620 <Pwm__SetTCFrequency+0x10c>
     5f0:	08 95       	ret
case PWM_TC1:
	pwm_pt1->TCCR1B_REG.byte = 0x02; //prescaler = 8 dando frequencia de 4000Hz
	break;
case PWM_TC2:
    //pwm_pt2->TCCR2A_REG.byte =  0b00100001; //MODO 1 para PWM fase corrigida,
	pwm_pt2->TCCR2B_REG.byte = 0x02; //prescaler = 8 dando frequencia de 4000Hz   	
     5f2:	82 e0       	ldi	r24, 0x02	; 2
     5f4:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__DATA_REGION_ORIGIN__+0x51>
default:
	break;
}
}

if((frequency > 4900) && frequency  < 5100 ){
     5f8:	65 52       	subi	r22, 0x25	; 37
     5fa:	73 41       	sbci	r23, 0x13	; 19
     5fc:	67 3c       	cpi	r22, 0xC7	; 199
     5fe:	71 05       	cpc	r23, r1
     600:	98 f0       	brcs	.+38     	; 0x628 <Pwm__SetTCFrequency+0x114>
     602:	08 95       	ret
     604:	65 52       	subi	r22, 0x25	; 37
     606:	73 41       	sbci	r23, 0x13	; 19
     608:	67 3c       	cpi	r22, 0xC7	; 199
     60a:	71 05       	cpc	r23, r1
     60c:	30 f5       	brcc	.+76     	; 0x65a <Pwm__SetTCFrequency+0x146>
	switch(tc){
     60e:	81 30       	cpi	r24, 0x01	; 1
     610:	39 f0       	breq	.+14     	; 0x620 <Pwm__SetTCFrequency+0x10c>
     612:	18 f0       	brcs	.+6      	; 0x61a <Pwm__SetTCFrequency+0x106>
     614:	82 30       	cpi	r24, 0x02	; 2
     616:	09 f5       	brne	.+66     	; 0x65a <Pwm__SetTCFrequency+0x146>
     618:	07 c0       	rjmp	.+14     	; 0x628 <Pwm__SetTCFrequency+0x114>
		case PWM_TC0:
		pwm_pt0->TCCR0B_REG.byte = 0b00100101;
     61a:	85 e2       	ldi	r24, 0x25	; 37
     61c:	85 bd       	out	0x25, r24	; 37
		break;
     61e:	08 95       	ret
		case PWM_TC1:
		pwm_pt1->TCCR1B_REG.byte = 0b00100101;
     620:	85 e2       	ldi	r24, 0x25	; 37
     622:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
		break;
     626:	08 95       	ret
		case PWM_TC2:
		//pwm_pt2->TCCR2A_REG.byte =  0b00100001; //MODO 1 para PWM fase corrigida,
		//pwm_pt2->TCCR2A_REG.byte = 0b00110001; //MODO 1 para PWM fase corrigida,
		pwm_pt2->TCCR2B_REG.byte = 0b00100101;
     628:	85 e2       	ldi	r24, 0x25	; 37
     62a:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__DATA_REGION_ORIGIN__+0x51>

		default:
		break;
	}
}
}  // fim da função
     62e:	08 95       	ret
		default:
		break;
	}
}

if((frequency > 3900) && frequency  < 4100 ){
     630:	9b 01       	movw	r18, r22
     632:	2d 53       	subi	r18, 0x3D	; 61
     634:	3f 40       	sbci	r19, 0x0F	; 15
     636:	27 3c       	cpi	r18, 0xC7	; 199
     638:	31 05       	cpc	r19, r1
     63a:	50 f2       	brcs	.-108    	; 0x5d0 <Pwm__SetTCFrequency+0xbc>
     63c:	e3 cf       	rjmp	.-58     	; 0x604 <Pwm__SetTCFrequency+0xf0>
     63e:	9b 01       	movw	r18, r22
     640:	2d 53       	subi	r18, 0x3D	; 61
     642:	3f 40       	sbci	r19, 0x0F	; 15
     644:	27 3c       	cpi	r18, 0xC7	; 199
     646:	31 05       	cpc	r19, r1
     648:	58 f2       	brcs	.-106    	; 0x5e0 <Pwm__SetTCFrequency+0xcc>
     64a:	dc cf       	rjmp	.-72     	; 0x604 <Pwm__SetTCFrequency+0xf0>
     64c:	9b 01       	movw	r18, r22
     64e:	2d 53       	subi	r18, 0x3D	; 61
     650:	3f 40       	sbci	r19, 0x0F	; 15
     652:	27 3c       	cpi	r18, 0xC7	; 199
     654:	31 05       	cpc	r19, r1
     656:	68 f2       	brcs	.-102    	; 0x5f2 <Pwm__SetTCFrequency+0xde>
     658:	d5 cf       	rjmp	.-86     	; 0x604 <Pwm__SetTCFrequency+0xf0>
     65a:	08 95       	ret

0000065c <Pwm__Initialize>:
//   Esta rotina  faz a configuração do PWM (buzzer)
//
//*********************************************************
 
// Inicialização do módulo PWM ( Buzzer está no PD3 OC2B !!)
void Pwm__Initialize(void){
     65c:	cf 93       	push	r28
     65e:	df 93       	push	r29
volatile TC2_REG_TYPE *pwm_pt2;

pwm_pt2 = TC2_REGISTERS;

// porta de  saida para buzina
bitWrite(DDRD, 3, OUTPUT_DIGITAL);
     660:	53 9a       	sbi	0x0a, 3	; 10
//bitWrite(PORTD, 3, 0);
// saida Buzzer para OC2B
pwm_pt2->TCCR2A_REG.byte =  0b00110001; //MODO 1 para PWM fase corrigida, 
     662:	c0 eb       	ldi	r28, 0xB0	; 176
     664:	d0 e0       	ldi	r29, 0x00	; 0
     666:	81 e3       	ldi	r24, 0x31	; 49
     668:	88 83       	st	Y, r24
                       // saida  OC2B  INVERTIDA TOP = 0xFF, OC2B habilitado
//pwm_pt2->TCCR2B_REG.byte =  0b00000010; //TC2 parado

Pwm__SetTCFrequency(PWM_TC2, BUZZER_DEFAULT_FREQ);
     66a:	60 e7       	ldi	r22, 0x70	; 112
     66c:	77 e1       	ldi	r23, 0x17	; 23
     66e:	82 e0       	ldi	r24, 0x02	; 2
     670:	0e 94 8a 02 	call	0x514	; 0x514 <Pwm__SetTCFrequency>
	 break;    // tem que checar para 16 bits
case PWM4:
	 pwm_pt2->OCR2A_REG.byte = (unsigned char)(255*duty/100); //considerando TOP = 255
	 break;    // tem que checar para 16 bits
case PWM5:
	pwm_pt2->OCR2B_REG.byte = (unsigned char)(255*duty/100); //considerando TOP = 255
     674:	1c 82       	std	Y+4, r1	; 0x04

Pwm__SetTCFrequency(PWM_TC2, BUZZER_DEFAULT_FREQ);
Pwm__SetDutyCycle(PWM5, BUZZER_OFF_DUTY);  //desliga o buzzer
// desligar a buzina com duty cycle igual a 0
//pwm_pt2->OCR2B_REG.byte =  0;	
}
     676:	df 91       	pop	r29
     678:	cf 91       	pop	r28
     67a:	08 95       	ret

0000067c <Pwm__SetDutyCycle>:
//
//   Esta rotina configura o PWM TC num determinado 
//   ciclo de trabalho ( 0 a 100)
//
//*********************************************************
void Pwm__SetDutyCycle( PWM_ID_TYPE pwm, unsigned char duty){
     67c:	65 36       	cpi	r22, 0x65	; 101
     67e:	08 f0       	brcs	.+2      	; 0x682 <Pwm__SetDutyCycle+0x6>
     680:	64 e6       	ldi	r22, 0x64	; 100
pwm_pt0 = TC0_REGISTERS;
pwm_pt1 = TC1_REGISTERS;
pwm_pt2 = TC2_REGISTERS;
if (duty >100)
   duty = 100;
switch (pwm){
     682:	82 30       	cpi	r24, 0x02	; 2
     684:	01 f1       	breq	.+64     	; 0x6c6 <Pwm__SetDutyCycle+0x4a>
     686:	28 f4       	brcc	.+10     	; 0x692 <Pwm__SetDutyCycle+0x16>
     688:	88 23       	and	r24, r24
     68a:	49 f0       	breq	.+18     	; 0x69e <Pwm__SetDutyCycle+0x22>
     68c:	81 30       	cpi	r24, 0x01	; 1
     68e:	89 f0       	breq	.+34     	; 0x6b2 <Pwm__SetDutyCycle+0x36>
     690:	08 95       	ret
     692:	84 30       	cpi	r24, 0x04	; 4
     694:	71 f1       	breq	.+92     	; 0x6f2 <Pwm__SetDutyCycle+0x76>
     696:	10 f1       	brcs	.+68     	; 0x6dc <Pwm__SetDutyCycle+0x60>
     698:	85 30       	cpi	r24, 0x05	; 5
     69a:	b1 f1       	breq	.+108    	; 0x708 <Pwm__SetDutyCycle+0x8c>
     69c:	08 95       	ret
case PWM0:
	pwm_pt0->OCR0A_REG.byte = (unsigned char)(255*duty/100); //considerando TOP = 255
     69e:	2f ef       	ldi	r18, 0xFF	; 255
     6a0:	62 9f       	mul	r22, r18
     6a2:	c0 01       	movw	r24, r0
     6a4:	11 24       	eor	r1, r1
     6a6:	64 e6       	ldi	r22, 0x64	; 100
     6a8:	70 e0       	ldi	r23, 0x00	; 0
     6aa:	0e 94 d6 07 	call	0xfac	; 0xfac <__divmodhi4>
     6ae:	67 bd       	out	0x27, r22	; 39
	break;
     6b0:	08 95       	ret
case PWM1:
	pwm_pt0->OCR0B_REG.byte = (unsigned char)(255*duty/100); //considerando TOP = 255
     6b2:	2f ef       	ldi	r18, 0xFF	; 255
     6b4:	62 9f       	mul	r22, r18
     6b6:	c0 01       	movw	r24, r0
     6b8:	11 24       	eor	r1, r1
     6ba:	64 e6       	ldi	r22, 0x64	; 100
     6bc:	70 e0       	ldi	r23, 0x00	; 0
     6be:	0e 94 d6 07 	call	0xfac	; 0xfac <__divmodhi4>
     6c2:	68 bd       	out	0x28, r22	; 40
	break;
     6c4:	08 95       	ret
case PWM2:
	pwm_pt1->OCR1AH_REG.byte = (unsigned char)(255*duty/100); //considerando TOP = 255
     6c6:	2f ef       	ldi	r18, 0xFF	; 255
     6c8:	62 9f       	mul	r22, r18
     6ca:	c0 01       	movw	r24, r0
     6cc:	11 24       	eor	r1, r1
     6ce:	64 e6       	ldi	r22, 0x64	; 100
     6d0:	70 e0       	ldi	r23, 0x00	; 0
     6d2:	0e 94 d6 07 	call	0xfac	; 0xfac <__divmodhi4>
     6d6:	60 93 89 00 	sts	0x0089, r22	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
 	break;    // tem que checar para 16 bits
     6da:	08 95       	ret
case PWM3:
	 pwm_pt1->OCR1BH_REG.byte = (unsigned char)(255*duty/100); //considerando TOP = 255
     6dc:	2f ef       	ldi	r18, 0xFF	; 255
     6de:	62 9f       	mul	r22, r18
     6e0:	c0 01       	movw	r24, r0
     6e2:	11 24       	eor	r1, r1
     6e4:	64 e6       	ldi	r22, 0x64	; 100
     6e6:	70 e0       	ldi	r23, 0x00	; 0
     6e8:	0e 94 d6 07 	call	0xfac	; 0xfac <__divmodhi4>
     6ec:	60 93 8b 00 	sts	0x008B, r22	; 0x80008b <__DATA_REGION_ORIGIN__+0x2b>
	 break;    // tem que checar para 16 bits
     6f0:	08 95       	ret
case PWM4:
	 pwm_pt2->OCR2A_REG.byte = (unsigned char)(255*duty/100); //considerando TOP = 255
     6f2:	2f ef       	ldi	r18, 0xFF	; 255
     6f4:	62 9f       	mul	r22, r18
     6f6:	c0 01       	movw	r24, r0
     6f8:	11 24       	eor	r1, r1
     6fa:	64 e6       	ldi	r22, 0x64	; 100
     6fc:	70 e0       	ldi	r23, 0x00	; 0
     6fe:	0e 94 d6 07 	call	0xfac	; 0xfac <__divmodhi4>
     702:	60 93 b3 00 	sts	0x00B3, r22	; 0x8000b3 <__DATA_REGION_ORIGIN__+0x53>
	 break;    // tem que checar para 16 bits
     706:	08 95       	ret
case PWM5:
	pwm_pt2->OCR2B_REG.byte = (unsigned char)(255*duty/100); //considerando TOP = 255
     708:	2f ef       	ldi	r18, 0xFF	; 255
     70a:	62 9f       	mul	r22, r18
     70c:	c0 01       	movw	r24, r0
     70e:	11 24       	eor	r1, r1
     710:	64 e6       	ldi	r22, 0x64	; 100
     712:	70 e0       	ldi	r23, 0x00	; 0
     714:	0e 94 d6 07 	call	0xfac	; 0xfac <__divmodhi4>
     718:	60 93 b4 00 	sts	0x00B4, r22	; 0x8000b4 <__DATA_REGION_ORIGIN__+0x54>
     71c:	08 95       	ret

0000071e <Timer__Initialize>:
 * 
 */
unsigned char Timer__HMSGetTime (HMS_TIMER_NAME id)
{
    return (Hms_Timers[id].Time.Sec);
}
     71e:	ef e6       	ldi	r30, 0x6F	; 111
     720:	f1 e0       	ldi	r31, 0x01	; 1
     722:	8e e7       	ldi	r24, 0x7E	; 126
     724:	91 e0       	ldi	r25, 0x01	; 1
     726:	10 82       	st	Z, r1
     728:	12 82       	std	Z+2, r1	; 0x02
     72a:	11 82       	std	Z+1, r1	; 0x01
     72c:	33 96       	adiw	r30, 0x03	; 3
     72e:	e8 17       	cp	r30, r24
     730:	f9 07       	cpc	r31, r25
     732:	c9 f7       	brne	.-14     	; 0x726 <Timer__Initialize+0x8>
     734:	ee e7       	ldi	r30, 0x7E	; 126
     736:	f1 e0       	ldi	r31, 0x01	; 1
     738:	8a e9       	ldi	r24, 0x9A	; 154
     73a:	91 e0       	ldi	r25, 0x01	; 1
     73c:	10 82       	st	Z, r1
     73e:	11 82       	std	Z+1, r1	; 0x01
     740:	12 82       	std	Z+2, r1	; 0x02
     742:	13 82       	std	Z+3, r1	; 0x03
     744:	34 96       	adiw	r30, 0x04	; 4
     746:	e8 17       	cp	r30, r24
     748:	f9 07       	cpc	r31, r25
     74a:	c1 f7       	brne	.-16     	; 0x73c <Timer__Initialize+0x1e>
     74c:	08 95       	ret

0000074e <Timer__HMSHandler>:
     74e:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <__data_end>
     752:	81 30       	cpi	r24, 0x01	; 1
     754:	41 f5       	brne	.+80     	; 0x7a6 <Timer__HMSHandler+0x58>
     756:	ee e7       	ldi	r30, 0x7E	; 126
     758:	f1 e0       	ldi	r31, 0x01	; 1
     75a:	2a e9       	ldi	r18, 0x9A	; 154
     75c:	31 e0       	ldi	r19, 0x01	; 1
     75e:	4b e3       	ldi	r20, 0x3B	; 59
     760:	80 81       	ld	r24, Z
     762:	81 30       	cpi	r24, 0x01	; 1
     764:	d1 f4       	brne	.+52     	; 0x79a <Timer__HMSHandler+0x4c>
     766:	83 81       	ldd	r24, Z+3	; 0x03
     768:	88 23       	and	r24, r24
     76a:	49 f0       	breq	.+18     	; 0x77e <Timer__HMSHandler+0x30>
     76c:	81 50       	subi	r24, 0x01	; 1
     76e:	83 83       	std	Z+3, r24	; 0x03
     770:	52 81       	ldd	r21, Z+2	; 0x02
     772:	91 81       	ldd	r25, Z+1	; 0x01
     774:	95 2b       	or	r25, r21
     776:	89 2b       	or	r24, r25
     778:	81 f4       	brne	.+32     	; 0x79a <Timer__HMSHandler+0x4c>
     77a:	10 82       	st	Z, r1
     77c:	0e c0       	rjmp	.+28     	; 0x79a <Timer__HMSHandler+0x4c>
     77e:	82 81       	ldd	r24, Z+2	; 0x02
     780:	88 23       	and	r24, r24
     782:	21 f0       	breq	.+8      	; 0x78c <Timer__HMSHandler+0x3e>
     784:	81 50       	subi	r24, 0x01	; 1
     786:	82 83       	std	Z+2, r24	; 0x02
     788:	43 83       	std	Z+3, r20	; 0x03
     78a:	07 c0       	rjmp	.+14     	; 0x79a <Timer__HMSHandler+0x4c>
     78c:	81 81       	ldd	r24, Z+1	; 0x01
     78e:	88 23       	and	r24, r24
     790:	21 f0       	breq	.+8      	; 0x79a <Timer__HMSHandler+0x4c>
     792:	81 50       	subi	r24, 0x01	; 1
     794:	81 83       	std	Z+1, r24	; 0x01
     796:	42 83       	std	Z+2, r20	; 0x02
     798:	43 83       	std	Z+3, r20	; 0x03
     79a:	34 96       	adiw	r30, 0x04	; 4
     79c:	e2 17       	cp	r30, r18
     79e:	f3 07       	cpc	r31, r19
     7a0:	f9 f6       	brne	.-66     	; 0x760 <Timer__HMSHandler+0x12>
     7a2:	10 92 52 01 	sts	0x0152, r1	; 0x800152 <__data_end>
     7a6:	08 95       	ret

000007a8 <Timer__HMSSet>:
     7a8:	87 30       	cpi	r24, 0x07	; 7
     7aa:	c0 f4       	brcc	.+48     	; 0x7dc <Timer__HMSSet+0x34>
     7ac:	90 e0       	ldi	r25, 0x00	; 0
     7ae:	fc 01       	movw	r30, r24
     7b0:	ee 0f       	add	r30, r30
     7b2:	ff 1f       	adc	r31, r31
     7b4:	ee 0f       	add	r30, r30
     7b6:	ff 1f       	adc	r31, r31
     7b8:	e2 58       	subi	r30, 0x82	; 130
     7ba:	fe 4f       	sbci	r31, 0xFE	; 254
     7bc:	10 82       	st	Z, r1
     7be:	61 83       	std	Z+1, r22	; 0x01
     7c0:	42 83       	std	Z+2, r20	; 0x02
     7c2:	23 83       	std	Z+3, r18	; 0x03
     7c4:	24 2b       	or	r18, r20
     7c6:	62 2b       	or	r22, r18
     7c8:	49 f0       	breq	.+18     	; 0x7dc <Timer__HMSSet+0x34>
     7ca:	88 0f       	add	r24, r24
     7cc:	99 1f       	adc	r25, r25
     7ce:	88 0f       	add	r24, r24
     7d0:	99 1f       	adc	r25, r25
     7d2:	fc 01       	movw	r30, r24
     7d4:	e2 58       	subi	r30, 0x82	; 130
     7d6:	fe 4f       	sbci	r31, 0xFE	; 254
     7d8:	81 e0       	ldi	r24, 0x01	; 1
     7da:	80 83       	st	Z, r24
     7dc:	08 95       	ret

000007de <Timer__HMSGetStatus>:
     7de:	24 e0       	ldi	r18, 0x04	; 4
     7e0:	82 9f       	mul	r24, r18
     7e2:	c0 01       	movw	r24, r0
     7e4:	11 24       	eor	r1, r1
     7e6:	fc 01       	movw	r30, r24
     7e8:	e2 58       	subi	r30, 0x82	; 130
     7ea:	fe 4f       	sbci	r31, 0xFE	; 254
     7ec:	80 81       	ld	r24, Z
     7ee:	08 95       	ret

000007f0 <__vector_13>:

//=====================================================================================================================
//-------------------------------------- Interruption  Functions ------------------------------------------------------------
//=====================================================================================================================
ISR(TIMER1_OVF_vect)                              //interrupção do TIMER1 (pg.158)
{   if(flag_seg == 0)
     7f0:	1f 92       	push	r1
     7f2:	0f 92       	push	r0
     7f4:	0f b6       	in	r0, 0x3f	; 63
     7f6:	0f 92       	push	r0
     7f8:	11 24       	eor	r1, r1
     7fa:	8f 93       	push	r24
     7fc:	9f 93       	push	r25
     7fe:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <__data_end>
     802:	81 11       	cpse	r24, r1
     804:	09 c0       	rjmp	.+18     	; 0x818 <__vector_13+0x28>
	    {
		TCNT1 = 62500;   //para contar a cada 250ms
     806:	84 e2       	ldi	r24, 0x24	; 36
     808:	94 ef       	ldi	r25, 0xF4	; 244
     80a:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     80e:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
		flag_seg =1;    //seta o flag indicando que passou 1 segundo   
     812:	81 e0       	ldi	r24, 0x01	; 1
     814:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <__data_end>
	    }
}
     818:	9f 91       	pop	r25
     81a:	8f 91       	pop	r24
     81c:	0f 90       	pop	r0
     81e:	0f be       	out	0x3f, r0	; 63
     820:	0f 90       	pop	r0
     822:	1f 90       	pop	r1
     824:	18 95       	reti

00000826 <Hal__SetLed>:
 *  output: Respective LED
 *  value: ON/OFF
 */
void Hal__SetLed(LED_OUTPUT_TYPE output,unsigned char value)
{
	Hal_Leds_Buffer[output] = LED_OFF;
     826:	90 e0       	ldi	r25, 0x00	; 0
	if (value == ACENDE_LED)
     828:	66 23       	and	r22, r22
     82a:	31 f0       	breq	.+12     	; 0x838 <Hal__SetLed+0x12>
 *  output: Respective LED
 *  value: ON/OFF
 */
void Hal__SetLed(LED_OUTPUT_TYPE output,unsigned char value)
{
	Hal_Leds_Buffer[output] = LED_OFF;
     82c:	fc 01       	movw	r30, r24
     82e:	e5 56       	subi	r30, 0x65	; 101
     830:	fe 4f       	sbci	r31, 0xFE	; 254
     832:	21 e0       	ldi	r18, 0x01	; 1
     834:	20 83       	st	Z, r18
     836:	08 95       	ret
	if (value == ACENDE_LED)
	   Hal_Leds_Buffer[output] = LED_ON;
     838:	fc 01       	movw	r30, r24
     83a:	e5 56       	subi	r30, 0x65	; 101
     83c:	fe 4f       	sbci	r31, 0xFE	; 254
     83e:	10 82       	st	Z, r1
     840:	08 95       	ret

00000842 <Hal__SetAllLeds>:
 *  value ON/OFF
 *  ON: To turn All LEDs ON 
 *  OFF: To turn All LEDs OFF
 */
void Hal__SetAllLeds(unsigned char value)
{
     842:	eb e9       	ldi	r30, 0x9B	; 155
     844:	f1 e0       	ldi	r31, 0x01	; 1
     846:	2f e9       	ldi	r18, 0x9F	; 159
     848:	31 e0       	ldi	r19, 0x01	; 1
	LED_OUTPUT_TYPE index;

	for(index = 0; index < NUM_OF_LEDS; index++)
		{
		Hal_Leds_Buffer[index] = LED_OFF;
     84a:	91 e0       	ldi	r25, 0x01	; 1
		if (value == ACENDE_LED)
     84c:	88 23       	and	r24, r24
     84e:	11 f0       	breq	.+4      	; 0x854 <Hal__SetAllLeds+0x12>
{
	LED_OUTPUT_TYPE index;

	for(index = 0; index < NUM_OF_LEDS; index++)
		{
		Hal_Leds_Buffer[index] = LED_OFF;
     850:	90 83       	st	Z, r25
     852:	01 c0       	rjmp	.+2      	; 0x856 <Hal__SetAllLeds+0x14>
		if (value == ACENDE_LED)
			Hal_Leds_Buffer[index] = LED_ON;
     854:	10 82       	st	Z, r1
     856:	31 96       	adiw	r30, 0x01	; 1
 */
void Hal__SetAllLeds(unsigned char value)
{
	LED_OUTPUT_TYPE index;

	for(index = 0; index < NUM_OF_LEDS; index++)
     858:	e2 17       	cp	r30, r18
     85a:	f3 07       	cpc	r31, r19
     85c:	b9 f7       	brne	.-18     	; 0x84c <Hal__SetAllLeds+0xa>
		{
		Hal_Leds_Buffer[index] = LED_OFF;
		if (value == ACENDE_LED)
			Hal_Leds_Buffer[index] = LED_ON;
		}
}
     85e:	08 95       	ret

00000860 <Hal__Initialize>:
/*
 * Call this function on initialize tasks before use any function of this module
 * This function will properly configure all pins before use it
 */
void Hal__Initialize(void)
{
     860:	0f 93       	push	r16
     862:	1f 93       	push	r17
     864:	cf 93       	push	r28
     866:	df 93       	push	r29
     868:	ce e0       	ldi	r28, 0x0E	; 14
     86a:	d1 e0       	ldi	r29, 0x01	; 1
     86c:	06 e1       	ldi	r16, 0x16	; 22
     86e:	11 e0       	ldi	r17, 0x01	; 1
	
	
	// LEDs Configuration
	for(led_index = 0; led_index < NUM_OF_LEDS; led_index++)
	{
	Gpio__PinConfig(LED_GPIO[led_index].port, LED_GPIO[led_index].pin, OUTPUT_DIGITAL);
     870:	41 e0       	ldi	r20, 0x01	; 1
     872:	69 81       	ldd	r22, Y+1	; 0x01
     874:	88 81       	ld	r24, Y
     876:	0e 94 16 02 	call	0x42c	; 0x42c <Gpio__PinConfig>
     87a:	22 96       	adiw	r28, 0x02	; 2
	KEY_INPUT_TYPE key_index;
	ANALOG_INPUT_TYPE analog_index;
	
	
	// LEDs Configuration
	for(led_index = 0; led_index < NUM_OF_LEDS; led_index++)
     87c:	c0 17       	cp	r28, r16
     87e:	d1 07       	cpc	r29, r17
     880:	b9 f7       	brne	.-18     	; 0x870 <Hal__Initialize+0x10>
     882:	c6 e0       	ldi	r28, 0x06	; 6
     884:	d1 e0       	ldi	r29, 0x01	; 1
     886:	0e e0       	ldi	r16, 0x0E	; 14
     888:	11 e0       	ldi	r17, 0x01	; 1
	
	
	// Keys Configuration
	for(key_index = 0; key_index < NUM_OF_KEYS; key_index++)
	{
	Gpio__PinConfig(KEYS_GPIO[key_index].port, KEYS_GPIO[key_index].pin, INPUT_DIGITAL_PULLUP);
     88a:	40 e0       	ldi	r20, 0x00	; 0
     88c:	69 81       	ldd	r22, Y+1	; 0x01
     88e:	88 81       	ld	r24, Y
     890:	0e 94 16 02 	call	0x42c	; 0x42c <Gpio__PinConfig>
     894:	22 96       	adiw	r28, 0x02	; 2
	Gpio__PinConfig(LED_GPIO[led_index].port, LED_GPIO[led_index].pin, OUTPUT_DIGITAL);
	}
	
	
	// Keys Configuration
	for(key_index = 0; key_index < NUM_OF_KEYS; key_index++)
     896:	c0 17       	cp	r28, r16
     898:	d1 07       	cpc	r29, r17
     89a:	b9 f7       	brne	.-18     	; 0x88a <Hal__Initialize+0x2a>
	{
	Gpio__PinConfig(KEYS_GPIO[key_index].port, KEYS_GPIO[key_index].pin, INPUT_DIGITAL_PULLUP);
	}
	
	// Apaga todos os leds
	Hal__SetAllLeds(LED_OFF);   //apaga todos leds
     89c:	81 e0       	ldi	r24, 0x01	; 1
     89e:	0e 94 21 04 	call	0x842	; 0x842 <Hal__SetAllLeds>
	
	
	// Configuração do 7 segmentos
	
	bitWrite(DDRD, 4, OUTPUT_DIGITAL);
     8a2:	54 9a       	sbi	0x0a, 4	; 10
	bitWrite(DDRD, 7, OUTPUT_DIGITAL);
     8a4:	57 9a       	sbi	0x0a, 7	; 10
	bitWrite(DDRB, 0, OUTPUT_DIGITAL);
     8a6:	20 9a       	sbi	0x04, 0	; 4
	
	
	// Analog Inputs Configuration - modo de conversão e resolução e inicializa os buffers de várias leitura do ADC
	ADC__ConfigModes(MODE_10BITS,AD_SINGLE_CONVERSION);
     8a8:	60 e0       	ldi	r22, 0x00	; 0
     8aa:	81 e0       	ldi	r24, 0x01	; 1
     8ac:	0e 94 df 01 	call	0x3be	; 0x3be <ADC__ConfigModes>
	AD_Mux_State = MUX_INIT;
     8b0:	10 92 b7 01 	sts	0x01B7, r1	; 0x8001b7 <AD_Mux_State>
	AD_Channel = POT_INT;  // eqivalente ao canal AD0 do arduino
     8b4:	10 92 9a 01 	sts	0x019A, r1	; 0x80019a <AD_Channel>
     8b8:	e0 e4       	ldi	r30, 0x40	; 64
     8ba:	f1 e0       	ldi	r31, 0x01	; 1
     8bc:	8b ea       	ldi	r24, 0xAB	; 171
     8be:	91 e0       	ldi	r25, 0x01	; 1
     8c0:	cf eb       	ldi	r28, 0xBF	; 191
     8c2:	d1 e0       	ldi	r29, 0x01	; 1
     8c4:	68 eb       	ldi	r22, 0xB8	; 184
     8c6:	71 e0       	ldi	r23, 0x01	; 1
     8c8:	46 e4       	ldi	r20, 0x46	; 70
     8ca:	51 e0       	ldi	r21, 0x01	; 1

	for(analog_index = 0; analog_index < NUM_OF_ANALOG_INPUT; analog_index++)
	{
		if(AD_Enable_Table[analog_index] == ENABLED)
     8cc:	21 91       	ld	r18, Z+
     8ce:	21 30       	cpi	r18, 0x01	; 1
     8d0:	39 f4       	brne	.+14     	; 0x8e0 <Hal__Initialize+0x80>
		{
			Hal_Analog_Inputs[analog_index] = 0;   // zera o buffer de valor de cada canal
     8d2:	dc 01       	movw	r26, r24
     8d4:	1d 92       	st	X+, r1
     8d6:	1c 92       	st	X, r1
			AD_Accumulator[analog_index] = 0;
     8d8:	19 82       	std	Y+1, r1	; 0x01
     8da:	18 82       	st	Y, r1
			AD_Counter[analog_index] = 0;
     8dc:	db 01       	movw	r26, r22
     8de:	1c 92       	st	X, r1
     8e0:	02 96       	adiw	r24, 0x02	; 2
     8e2:	22 96       	adiw	r28, 0x02	; 2
     8e4:	6f 5f       	subi	r22, 0xFF	; 255
     8e6:	7f 4f       	sbci	r23, 0xFF	; 255
	// Analog Inputs Configuration - modo de conversão e resolução e inicializa os buffers de várias leitura do ADC
	ADC__ConfigModes(MODE_10BITS,AD_SINGLE_CONVERSION);
	AD_Mux_State = MUX_INIT;
	AD_Channel = POT_INT;  // eqivalente ao canal AD0 do arduino

	for(analog_index = 0; analog_index < NUM_OF_ANALOG_INPUT; analog_index++)
     8e8:	e4 17       	cp	r30, r20
     8ea:	f5 07       	cpc	r31, r21
     8ec:	79 f7       	brne	.-34     	; 0x8cc <Hal__Initialize+0x6c>
	//#if (USE_BUZZER == ENABLED)

	//Pwm__SetTCFrequency(PWM_TC2, BUZZER_DEFAULT_FREQ);
	//Pwm__SetDutyCycle(PWM5,BUZZER_DEFAULT_ON_DUTY);
	//#endif	//(USE_BUZZER == ENABLED)
	}
     8ee:	df 91       	pop	r29
     8f0:	cf 91       	pop	r28
     8f2:	1f 91       	pop	r17
     8f4:	0f 91       	pop	r16
     8f6:	08 95       	ret

000008f8 <Hal__ReadKey>:
 *  Use this function to read the status of a specific key
 *  key: desired key to be read
 *  return: TRUE if key is pressed otherwise FALSE
 */
unsigned char Hal__ReadKey(KEY_INPUT_TYPE key)
{
     8f8:	28 2f       	mov	r18, r24
	if (key < NUM_OF_KEYS)
     8fa:	84 30       	cpi	r24, 0x04	; 4
     8fc:	70 f4       	brcc	.+28     	; 0x91a <__stack+0x1b>
	   {
	   if (BIT_TEST(Hal_Keys_Buffer, key) > 0)
	      return (TRUE);
     8fe:	80 91 be 01 	lds	r24, 0x01BE	; 0x8001be <Hal_Keys_Buffer>
     902:	90 e0       	ldi	r25, 0x00	; 0
     904:	a0 e0       	ldi	r26, 0x00	; 0
     906:	b0 e0       	ldi	r27, 0x00	; 0
     908:	04 c0       	rjmp	.+8      	; 0x912 <__stack+0x13>
     90a:	b6 95       	lsr	r27
     90c:	a7 95       	ror	r26
     90e:	97 95       	ror	r25
     910:	87 95       	ror	r24
     912:	2a 95       	dec	r18
     914:	d2 f7       	brpl	.-12     	; 0x90a <__stack+0xb>
     916:	81 70       	andi	r24, 0x01	; 1
     918:	08 95       	ret
	   }
	 return (FALSE);
     91a:	80 e0       	ldi	r24, 0x00	; 0
}
     91c:	08 95       	ret

0000091e <Hal__WriteValtoSegment>:
 *  
 */
void Hal__WriteValtoSegment(char Segment, char *Value)
{

SevenSeg_WriteValueToSegment(Segment, Value);
     91e:	0e 94 c4 05 	call	0xb88	; 0xb88 <SevenSeg_WriteValueToSegment>
     922:	08 95       	ret

00000924 <Hal__GetAnalogInput>:
 *  Use this function to read a value ADC in the selected channel
 *  
 */
unsigned short int Hal__GetAnalogInput(ANALOG_INPUT_TYPE input)
{
if(input < NUM_OF_ANALOG_INPUT)
     924:	86 30       	cpi	r24, 0x06	; 6
     926:	48 f4       	brcc	.+18     	; 0x93a <Hal__GetAnalogInput+0x16>
   return Hal_Analog_Inputs[input];  // retorna o valor no buffer HAL_AnalogInputs do canal solicitado
     928:	e8 2f       	mov	r30, r24
     92a:	f0 e0       	ldi	r31, 0x00	; 0
     92c:	ee 0f       	add	r30, r30
     92e:	ff 1f       	adc	r31, r31
     930:	e5 55       	subi	r30, 0x55	; 85
     932:	fe 4f       	sbci	r31, 0xFE	; 254
     934:	80 81       	ld	r24, Z
     936:	91 81       	ldd	r25, Z+1	; 0x01
     938:	08 95       	ret
}
     93a:	08 95       	ret

0000093c <Hal__SetBuzzer>:
 */
void Hal__SetBuzzer(unsigned char state)
{
#if (USE_BUZZER == ENABLED)

	if(state > 0)
     93c:	88 23       	and	r24, r24
     93e:	29 f0       	breq	.+10     	; 0x94a <Hal__SetBuzzer+0xe>
		{
		//BuzzerRequest = ON;
		Pwm__SetDutyCycle(PWM5,BUZZER_DEFAULT_ON_DUTY);
     940:	62 e3       	ldi	r22, 0x32	; 50
     942:	85 e0       	ldi	r24, 0x05	; 5
     944:	0e 94 3e 03 	call	0x67c	; 0x67c <Pwm__SetDutyCycle>
     948:	08 95       	ret
		}
	else
		{
		Pwm__SetDutyCycle(PWM5,BUZZER_OFF_DUTY);
     94a:	60 e0       	ldi	r22, 0x00	; 0
     94c:	85 e0       	ldi	r24, 0x05	; 5
     94e:	0e 94 3e 03 	call	0x67c	; 0x67c <Pwm__SetDutyCycle>
     952:	08 95       	ret

00000954 <Hal__SetBuzzerFreq>:
 */
void Hal__SetBuzzerFreq(unsigned short int frequency)
{
#if (USE_BUZZER == ENABLED)
	
	if(frequency >= 2000)
     954:	80 3d       	cpi	r24, 0xD0	; 208
     956:	27 e0       	ldi	r18, 0x07	; 7
     958:	92 07       	cpc	r25, r18
     95a:	20 f0       	brcs	.+8      	; 0x964 <Hal__SetBuzzerFreq+0x10>
     95c:	bc 01       	movw	r22, r24
		{
		Pwm__SetTCFrequency(PWM_TC2, frequency);
     95e:	82 e0       	ldi	r24, 0x02	; 2
     960:	0e 94 8a 02 	call	0x514	; 0x514 <Pwm__SetTCFrequency>
     964:	08 95       	ret

00000966 <LEDsUpdate>:
//---------------------------------------------------------------------------------------------------------------------
/**
 *  This local function update the LEDs status
 */
void LEDsUpdate(void)
{
     966:	af 92       	push	r10
     968:	bf 92       	push	r11
     96a:	cf 92       	push	r12
     96c:	df 92       	push	r13
     96e:	ef 92       	push	r14
     970:	ff 92       	push	r15
     972:	0f 93       	push	r16
     974:	1f 93       	push	r17
     976:	cf 93       	push	r28
     978:	df 93       	push	r29
     97a:	ca e4       	ldi	r28, 0x4A	; 74
     97c:	d1 e0       	ldi	r29, 0x01	; 1
     97e:	0f 2e       	mov	r0, r31
     980:	fb e9       	ldi	r31, 0x9B	; 155
     982:	ef 2e       	mov	r14, r31
     984:	f1 e0       	ldi	r31, 0x01	; 1
     986:	ff 2e       	mov	r15, r31
     988:	f0 2d       	mov	r31, r0
     98a:	0e e0       	ldi	r16, 0x0E	; 14
     98c:	11 e0       	ldi	r17, 0x01	; 1
     98e:	0f 2e       	mov	r0, r31
     990:	fe e4       	ldi	r31, 0x4E	; 78
     992:	cf 2e       	mov	r12, r31
     994:	f1 e0       	ldi	r31, 0x01	; 1
     996:	df 2e       	mov	r13, r31
     998:	f0 2d       	mov	r31, r0
			value = LED_ON;
			if(Hal_Leds_Buffer[index] > 0)
			{
				value = LED_OFF;
			}
			Gpio__PinWrite(LED_GPIO[index].port, LED_GPIO[index].pin, value);
     99a:	bb 24       	eor	r11, r11
     99c:	b3 94       	inc	r11
     99e:	a1 2c       	mov	r10, r1
	unsigned char value;
	
	//LEDs Update
	for(index = 0; index < NUM_OF_LEDS; index++)
	{
		if(Leds_Enable_Table[index] == ENABLED) // Update GPIO only if current LED is configured to be used
     9a0:	89 91       	ld	r24, Y+
     9a2:	81 30       	cpi	r24, 0x01	; 1
     9a4:	59 f4       	brne	.+22     	; 0x9bc <LEDsUpdate+0x56>
     9a6:	f8 01       	movw	r30, r16
			value = LED_ON;
			if(Hal_Leds_Buffer[index] > 0)
			{
				value = LED_OFF;
			}
			Gpio__PinWrite(LED_GPIO[index].port, LED_GPIO[index].pin, value);
     9a8:	4b 2d       	mov	r20, r11
     9aa:	d7 01       	movw	r26, r14
     9ac:	8c 91       	ld	r24, X
     9ae:	81 11       	cpse	r24, r1
     9b0:	01 c0       	rjmp	.+2      	; 0x9b4 <LEDsUpdate+0x4e>
     9b2:	4a 2d       	mov	r20, r10
     9b4:	61 81       	ldd	r22, Z+1	; 0x01
     9b6:	80 81       	ld	r24, Z
     9b8:	0e 94 4c 02 	call	0x498	; 0x498 <Gpio__PinWrite>
     9bc:	bf ef       	ldi	r27, 0xFF	; 255
     9be:	eb 1a       	sub	r14, r27
     9c0:	fb 0a       	sbc	r15, r27
     9c2:	0e 5f       	subi	r16, 0xFE	; 254
     9c4:	1f 4f       	sbci	r17, 0xFF	; 255
{
	unsigned char index;
	unsigned char value;
	
	//LEDs Update
	for(index = 0; index < NUM_OF_LEDS; index++)
     9c6:	cc 15       	cp	r28, r12
     9c8:	dd 05       	cpc	r29, r13
     9ca:	51 f7       	brne	.-44     	; 0x9a0 <LEDsUpdate+0x3a>
				value = LED_OFF;
			}
			Gpio__PinWrite(LED_GPIO[index].port, LED_GPIO[index].pin, value);
		}
	}
}
     9cc:	df 91       	pop	r29
     9ce:	cf 91       	pop	r28
     9d0:	1f 91       	pop	r17
     9d2:	0f 91       	pop	r16
     9d4:	ff 90       	pop	r15
     9d6:	ef 90       	pop	r14
     9d8:	df 90       	pop	r13
     9da:	cf 90       	pop	r12
     9dc:	bf 90       	pop	r11
     9de:	af 90       	pop	r10
     9e0:	08 95       	ret

000009e2 <KeysRead>:
/**
 *  This local function reads the keys input and update the Hal_Keys_Buffer
 */

void KeysRead(void)
{
     9e2:	8f 92       	push	r8
     9e4:	9f 92       	push	r9
     9e6:	af 92       	push	r10
     9e8:	bf 92       	push	r11
     9ea:	df 92       	push	r13
     9ec:	ef 92       	push	r14
     9ee:	ff 92       	push	r15
     9f0:	0f 93       	push	r16
     9f2:	1f 93       	push	r17
     9f4:	cf 93       	push	r28
     9f6:	df 93       	push	r29
     9f8:	0f 2e       	mov	r0, r31
     9fa:	f6 e4       	ldi	r31, 0x46	; 70
     9fc:	ef 2e       	mov	r14, r31
     9fe:	f1 e0       	ldi	r31, 0x01	; 1
     a00:	ff 2e       	mov	r15, r31
     a02:	f0 2d       	mov	r31, r0
     a04:	06 e0       	ldi	r16, 0x06	; 6
     a06:	11 e0       	ldi	r17, 0x01	; 1
     a08:	c0 e0       	ldi	r28, 0x00	; 0
     a0a:	d0 e0       	ldi	r29, 0x00	; 0
			{
				BIT_SET(Hal_Keys_Buffer,key_index);
			}
			else
			{
				BIT_CLR(Hal_Keys_Buffer,key_index);
     a0c:	81 2c       	mov	r8, r1
     a0e:	91 2c       	mov	r9, r1
     a10:	54 01       	movw	r10, r8
     a12:	83 94       	inc	r8
	KEY_INPUT_TYPE key_index;
	unsigned char value;
	
	for(key_index = KEY_0; key_index < NUM_OF_KEYS; key_index++)
	{
		if(Keys_Enable_Table[key_index] == ENABLED)
     a14:	f7 01       	movw	r30, r14
     a16:	81 91       	ld	r24, Z+
     a18:	7f 01       	movw	r14, r30
     a1a:	81 30       	cpi	r24, 0x01	; 1
     a1c:	39 f5       	brne	.+78     	; 0xa6c <KeysRead+0x8a>
		{
			value = Gpio__PinRead(KEYS_GPIO[key_index].port, KEYS_GPIO[key_index].pin);
     a1e:	f8 01       	movw	r30, r16
     a20:	61 81       	ldd	r22, Z+1	; 0x01
     a22:	80 81       	ld	r24, Z
     a24:	0e 94 76 02 	call	0x4ec	; 0x4ec <Gpio__PinRead>
			if(value == KEY_PRESSED)
     a28:	81 11       	cpse	r24, r1
     a2a:	10 c0       	rjmp	.+32     	; 0xa4c <KeysRead+0x6a>
			{
				BIT_SET(Hal_Keys_Buffer,key_index);
     a2c:	d5 01       	movw	r26, r10
     a2e:	c4 01       	movw	r24, r8
     a30:	0c 2e       	mov	r0, r28
     a32:	04 c0       	rjmp	.+8      	; 0xa3c <KeysRead+0x5a>
     a34:	88 0f       	add	r24, r24
     a36:	99 1f       	adc	r25, r25
     a38:	aa 1f       	adc	r26, r26
     a3a:	bb 1f       	adc	r27, r27
     a3c:	0a 94       	dec	r0
     a3e:	d2 f7       	brpl	.-12     	; 0xa34 <KeysRead+0x52>
     a40:	20 91 be 01 	lds	r18, 0x01BE	; 0x8001be <Hal_Keys_Buffer>
     a44:	82 2b       	or	r24, r18
     a46:	80 93 be 01 	sts	0x01BE, r24	; 0x8001be <Hal_Keys_Buffer>
     a4a:	10 c0       	rjmp	.+32     	; 0xa6c <KeysRead+0x8a>
			}
			else
			{
				BIT_CLR(Hal_Keys_Buffer,key_index);
     a4c:	d5 01       	movw	r26, r10
     a4e:	c4 01       	movw	r24, r8
     a50:	0c 2e       	mov	r0, r28
     a52:	04 c0       	rjmp	.+8      	; 0xa5c <KeysRead+0x7a>
     a54:	88 0f       	add	r24, r24
     a56:	99 1f       	adc	r25, r25
     a58:	aa 1f       	adc	r26, r26
     a5a:	bb 1f       	adc	r27, r27
     a5c:	0a 94       	dec	r0
     a5e:	d2 f7       	brpl	.-12     	; 0xa54 <KeysRead+0x72>
     a60:	80 95       	com	r24
     a62:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <Hal_Keys_Buffer>
     a66:	89 23       	and	r24, r25
     a68:	80 93 be 01 	sts	0x01BE, r24	; 0x8001be <Hal_Keys_Buffer>
     a6c:	21 96       	adiw	r28, 0x01	; 1
     a6e:	0e 5f       	subi	r16, 0xFE	; 254
     a70:	1f 4f       	sbci	r17, 0xFF	; 255
{
	//Keys read
	KEY_INPUT_TYPE key_index;
	unsigned char value;
	
	for(key_index = KEY_0; key_index < NUM_OF_KEYS; key_index++)
     a72:	c4 30       	cpi	r28, 0x04	; 4
     a74:	d1 05       	cpc	r29, r1
     a76:	71 f6       	brne	.-100    	; 0xa14 <KeysRead+0x32>

			}
		}
	}

}
     a78:	df 91       	pop	r29
     a7a:	cf 91       	pop	r28
     a7c:	1f 91       	pop	r17
     a7e:	0f 91       	pop	r16
     a80:	ff 90       	pop	r15
     a82:	ef 90       	pop	r14
     a84:	df 90       	pop	r13
     a86:	bf 90       	pop	r11
     a88:	af 90       	pop	r10
     a8a:	9f 90       	pop	r9
     a8c:	8f 90       	pop	r8
     a8e:	08 95       	ret

00000a90 <Hal__FastHandler>:
 *  This function shall run in background in the main loop 
 *  Call rate: 1ms, 5ms, 10ms, ...PARA GPIO
 */
void Hal__FastHandler(void)
{
	LEDsUpdate();
     a90:	0e 94 b3 04 	call	0x966	; 0x966 <LEDsUpdate>
	KeysRead();
     a94:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <KeysRead>
     a98:	08 95       	ret

00000a9a <ADProcess>:
 *  This local function reads the analog input and update the buffer Hal_Analog_inputs[]
    ROTINA ONDE SÃO FEITAS AS VÁRIAS LEITURAS DE AMOSTRAGEM (NUM_AD_SAMPLES) E DEPOIS TIRADO A MÉDIA DOS  VALORES
****/

void ADProcess(void)
{
     a9a:	cf 93       	push	r28
     a9c:	df 93       	push	r29
switch (AD_Mux_State)
     a9e:	80 91 b7 01 	lds	r24, 0x01B7	; 0x8001b7 <AD_Mux_State>
     aa2:	81 30       	cpi	r24, 0x01	; 1
     aa4:	19 f0       	breq	.+6      	; 0xaac <ADProcess+0x12>
     aa6:	83 30       	cpi	r24, 0x03	; 3
     aa8:	31 f0       	breq	.+12     	; 0xab6 <ADProcess+0x1c>
     aaa:	5d c0       	rjmp	.+186    	; 0xb66 <ADProcess+0xcc>
  {
  case MUX_INIT:
    break;
  case MUX_AD_CONFIG:
    ADC__ConfigModes(MODE_10BITS,AD_SINGLE_CONVERSION);
     aac:	60 e0       	ldi	r22, 0x00	; 0
     aae:	81 e0       	ldi	r24, 0x01	; 1
     ab0:	0e 94 df 01 	call	0x3be	; 0x3be <ADC__ConfigModes>
    break;
     ab4:	58 c0       	rjmp	.+176    	; 0xb66 <ADProcess+0xcc>
  case MUX_DUMMY_STATE_1: //=> This state is placed in order to assure the raising time for ADC reading
    break;
  case MUX_AD_READ:
      if(AD_Enable_Table[AD_Channel] == ENABLED)
     ab6:	c0 91 9a 01 	lds	r28, 0x019A	; 0x80019a <AD_Channel>
     aba:	d0 e0       	ldi	r29, 0x00	; 0
     abc:	fe 01       	movw	r30, r28
     abe:	e0 5c       	subi	r30, 0xC0	; 192
     ac0:	fe 4f       	sbci	r31, 0xFE	; 254
     ac2:	80 81       	ld	r24, Z
     ac4:	81 30       	cpi	r24, 0x01	; 1
     ac6:	09 f0       	breq	.+2      	; 0xaca <ADProcess+0x30>
     ac8:	44 c0       	rjmp	.+136    	; 0xb52 <ADProcess+0xb8>
         {
         if(AD_Counter[AD_Channel] < NUM_AD_SAMPLES)
     aca:	fe 01       	movw	r30, r28
     acc:	e8 54       	subi	r30, 0x48	; 72
     ace:	fe 4f       	sbci	r31, 0xFE	; 254
     ad0:	80 81       	ld	r24, Z
     ad2:	88 30       	cpi	r24, 0x08	; 8
     ad4:	38 f5       	brcc	.+78     	; 0xb24 <ADProcess+0x8a>
             {
             AD_Sample[AD_Channel] = ADC__GetValue(AD_Channel_Table[AD_Channel]);
     ad6:	fe 01       	movw	r30, r28
     ad8:	e6 5c       	subi	r30, 0xC6	; 198
     ada:	fe 4f       	sbci	r31, 0xFE	; 254
     adc:	80 81       	ld	r24, Z
     ade:	0e 94 08 02 	call	0x410	; 0x410 <ADC__GetValue>
     ae2:	cc 0f       	add	r28, r28
     ae4:	dd 1f       	adc	r29, r29
     ae6:	c1 56       	subi	r28, 0x61	; 97
     ae8:	de 4f       	sbci	r29, 0xFE	; 254
     aea:	99 83       	std	Y+1, r25	; 0x01
     aec:	88 83       	st	Y, r24
             AD_Accumulator[AD_Channel] += AD_Sample[AD_Channel];
     aee:	e0 91 9a 01 	lds	r30, 0x019A	; 0x80019a <AD_Channel>
     af2:	f0 e0       	ldi	r31, 0x00	; 0
     af4:	cf 01       	movw	r24, r30
     af6:	88 0f       	add	r24, r24
     af8:	99 1f       	adc	r25, r25
     afa:	dc 01       	movw	r26, r24
     afc:	a1 54       	subi	r26, 0x41	; 65
     afe:	be 4f       	sbci	r27, 0xFE	; 254
     b00:	ec 01       	movw	r28, r24
     b02:	c1 56       	subi	r28, 0x61	; 97
     b04:	de 4f       	sbci	r29, 0xFE	; 254
     b06:	2d 91       	ld	r18, X+
     b08:	3c 91       	ld	r19, X
     b0a:	11 97       	sbiw	r26, 0x01	; 1
     b0c:	88 81       	ld	r24, Y
     b0e:	99 81       	ldd	r25, Y+1	; 0x01
     b10:	82 0f       	add	r24, r18
     b12:	93 1f       	adc	r25, r19
     b14:	8d 93       	st	X+, r24
     b16:	9c 93       	st	X, r25
             AD_Counter[AD_Channel]++;
     b18:	e8 54       	subi	r30, 0x48	; 72
     b1a:	fe 4f       	sbci	r31, 0xFE	; 254
     b1c:	80 81       	ld	r24, Z
     b1e:	8f 5f       	subi	r24, 0xFF	; 255
     b20:	80 83       	st	Z, r24
     b22:	17 c0       	rjmp	.+46     	; 0xb52 <ADProcess+0xb8>
             }
         else
            {  // O Buffer Hal_Analog_Inputs[] é AQUI atualizado!
            Hal_Analog_Inputs[AD_Channel] = (unsigned short int)(AD_Accumulator[AD_Channel]/NUM_AD_SAMPLES);
     b24:	fe 01       	movw	r30, r28
     b26:	ee 0f       	add	r30, r30
     b28:	ff 1f       	adc	r31, r31
     b2a:	df 01       	movw	r26, r30
     b2c:	a5 55       	subi	r26, 0x55	; 85
     b2e:	be 4f       	sbci	r27, 0xFE	; 254
     b30:	e1 54       	subi	r30, 0x41	; 65
     b32:	fe 4f       	sbci	r31, 0xFE	; 254
     b34:	80 81       	ld	r24, Z
     b36:	91 81       	ldd	r25, Z+1	; 0x01
     b38:	96 95       	lsr	r25
     b3a:	87 95       	ror	r24
     b3c:	96 95       	lsr	r25
     b3e:	87 95       	ror	r24
     b40:	96 95       	lsr	r25
     b42:	87 95       	ror	r24
     b44:	8d 93       	st	X+, r24
     b46:	9c 93       	st	X, r25
            AD_Accumulator[AD_Channel] = 0;
     b48:	11 82       	std	Z+1, r1	; 0x01
     b4a:	10 82       	st	Z, r1
            AD_Counter[AD_Channel] = 0;
     b4c:	c8 54       	subi	r28, 0x48	; 72
     b4e:	de 4f       	sbci	r29, 0xFE	; 254
     b50:	18 82       	st	Y, r1
            }
          } 
       AD_Channel++;
     b52:	80 91 9a 01 	lds	r24, 0x019A	; 0x80019a <AD_Channel>
     b56:	8f 5f       	subi	r24, 0xFF	; 255
       if(AD_Channel >= NUM_OF_ANALOG_INPUT)
     b58:	86 30       	cpi	r24, 0x06	; 6
     b5a:	18 f4       	brcc	.+6      	; 0xb62 <ADProcess+0xc8>
            Hal_Analog_Inputs[AD_Channel] = (unsigned short int)(AD_Accumulator[AD_Channel]/NUM_AD_SAMPLES);
            AD_Accumulator[AD_Channel] = 0;
            AD_Counter[AD_Channel] = 0;
            }
          } 
       AD_Channel++;
     b5c:	80 93 9a 01 	sts	0x019A, r24	; 0x80019a <AD_Channel>
     b60:	02 c0       	rjmp	.+4      	; 0xb66 <ADProcess+0xcc>
       if(AD_Channel >= NUM_OF_ANALOG_INPUT)
         {
         AD_Channel = 0;
     b62:	10 92 9a 01 	sts	0x019A, r1	; 0x80019a <AD_Channel>
       break;
  default:
       break;
  }

AD_Mux_State++;                                // Ticking the state machine.
     b66:	80 91 b7 01 	lds	r24, 0x01B7	; 0x8001b7 <AD_Mux_State>
     b6a:	8f 5f       	subi	r24, 0xFF	; 255

if (AD_Mux_State >= NUM_MUX_STEPS)
     b6c:	84 30       	cpi	r24, 0x04	; 4
     b6e:	18 f4       	brcc	.+6      	; 0xb76 <ADProcess+0xdc>
       break;
  default:
       break;
  }

AD_Mux_State++;                                // Ticking the state machine.
     b70:	80 93 b7 01 	sts	0x01B7, r24	; 0x8001b7 <AD_Mux_State>
     b74:	03 c0       	rjmp	.+6      	; 0xb7c <ADProcess+0xe2>

if (AD_Mux_State >= NUM_MUX_STEPS)
  {
  AD_Mux_State = MUX_AD_CONFIG;
     b76:	81 e0       	ldi	r24, 0x01	; 1
     b78:	80 93 b7 01 	sts	0x01B7, r24	; 0x8001b7 <AD_Mux_State>
  }
     b7c:	df 91       	pop	r29
     b7e:	cf 91       	pop	r28
     b80:	08 95       	ret

00000b82 <Hal__BackgroundHandler>:
 *  This function shall run in background in the main loop 
 *  Call rate: 1ms, 5ms, 10ms, ...PARA ADC
 */
void Hal__BackgroundHandler(void)
{
 ADProcess();	
     b82:	0e 94 4d 05 	call	0xa9a	; 0xa9a <ADProcess>
     b86:	08 95       	ret

00000b88 <SevenSeg_WriteValueToSegment>:
const char SEGMENT_SELECT[] = {0xF1,0xF2,0xF4,0xF8};


/* Write a value to one of the 4 digits of the display */
void SevenSeg_WriteValueToSegment(char Segment, char *Value)
{
     b88:	fb 01       	movw	r30, r22
	bitClear(PORTD, 4);
     b8a:	5c 98       	cbi	0x0b, 4	; 11
     b8c:	47 e0       	ldi	r20, 0x07	; 7
     b8e:	50 e0       	ldi	r21, 0x00	; 0

	for (uint8_t i = 0; i < 8; i++)  {
		bitWrite(PORTB, 0, !!((*Value) & (1 << (7 - i))));
     b90:	20 81       	ld	r18, Z
     b92:	30 e0       	ldi	r19, 0x00	; 0
     b94:	04 2e       	mov	r0, r20
     b96:	02 c0       	rjmp	.+4      	; 0xb9c <SevenSeg_WriteValueToSegment+0x14>
     b98:	35 95       	asr	r19
     b9a:	27 95       	ror	r18
     b9c:	0a 94       	dec	r0
     b9e:	e2 f7       	brpl	.-8      	; 0xb98 <SevenSeg_WriteValueToSegment+0x10>
     ba0:	20 ff       	sbrs	r18, 0
     ba2:	02 c0       	rjmp	.+4      	; 0xba8 <SevenSeg_WriteValueToSegment+0x20>
     ba4:	28 9a       	sbi	0x05, 0	; 5
     ba6:	01 c0       	rjmp	.+2      	; 0xbaa <SevenSeg_WriteValueToSegment+0x22>
     ba8:	28 98       	cbi	0x05, 0	; 5
		bitSet(PORTD, 7);
     baa:	5f 9a       	sbi	0x0b, 7	; 11
		bitClear(PORTD, 7);
     bac:	5f 98       	cbi	0x0b, 7	; 11
     bae:	41 50       	subi	r20, 0x01	; 1
     bb0:	51 09       	sbc	r21, r1
     bb2:	70 f7       	brcc	.-36     	; 0xb90 <SevenSeg_WriteValueToSegment+0x8>
     bb4:	27 e0       	ldi	r18, 0x07	; 7
     bb6:	30 e0       	ldi	r19, 0x00	; 0
	}

	for (uint8_t i = 0; i < 8; i++)  {
		bitWrite(PORTB, 0, !!(SEGMENT_SELECT[Segment] & (1 << (7 - i))));
     bb8:	e8 2f       	mov	r30, r24
     bba:	f0 e0       	ldi	r31, 0x00	; 0
     bbc:	e2 5b       	subi	r30, 0xB2	; 178
     bbe:	fe 4f       	sbci	r31, 0xFE	; 254
     bc0:	40 81       	ld	r20, Z
     bc2:	50 e0       	ldi	r21, 0x00	; 0
     bc4:	ca 01       	movw	r24, r20
     bc6:	02 2e       	mov	r0, r18
     bc8:	02 c0       	rjmp	.+4      	; 0xbce <SevenSeg_WriteValueToSegment+0x46>
     bca:	95 95       	asr	r25
     bcc:	87 95       	ror	r24
     bce:	0a 94       	dec	r0
     bd0:	e2 f7       	brpl	.-8      	; 0xbca <SevenSeg_WriteValueToSegment+0x42>
     bd2:	80 ff       	sbrs	r24, 0
     bd4:	02 c0       	rjmp	.+4      	; 0xbda <SevenSeg_WriteValueToSegment+0x52>
     bd6:	28 9a       	sbi	0x05, 0	; 5
     bd8:	01 c0       	rjmp	.+2      	; 0xbdc <SevenSeg_WriteValueToSegment+0x54>
     bda:	28 98       	cbi	0x05, 0	; 5
		bitSet(PORTD, 7);
     bdc:	5f 9a       	sbi	0x0b, 7	; 11
		bitClear(PORTD, 7);
     bde:	5f 98       	cbi	0x0b, 7	; 11
     be0:	21 50       	subi	r18, 0x01	; 1
     be2:	31 09       	sbc	r19, r1
     be4:	78 f7       	brcc	.-34     	; 0xbc4 <SevenSeg_WriteValueToSegment+0x3c>
	}

	bitSet(PORTD, 4);
     be6:	5c 9a       	sbi	0x0b, 4	; 11
     be8:	08 95       	ret

00000bea <Display__Initialize>:
/**
 *  
 */
void Display__Initialize(void)
{
	Oven_Display_State = STOPED; //Inicialmente o elevador encontra-se parado
     bea:	10 92 cd 01 	sts	0x01CD, r1	; 0x8001cd <Oven_Display_State>
     bee:	08 95       	ret

00000bf0 <Display__SetState>:
/**
 *  
 */
void Display__SetState(OVEN_DISPLAY_STATE_TYPE state)
{
	if(state < NUM_OF_OVEN_STATES)
     bf0:	85 30       	cpi	r24, 0x05	; 5
     bf2:	10 f4       	brcc	.+4      	; 0xbf8 <Display__SetState+0x8>
	{
		Oven_Display_State = state;
     bf4:	80 93 cd 01 	sts	0x01CD, r24	; 0x8001cd <Oven_Display_State>
     bf8:	08 95       	ret

00000bfa <UpdateDisplayLeds>:
 *  Atualiza  Leds 
 */
void UpdateDisplayLeds(void)
{
	unsigned short int ad_value;
	switch(Oven_Display_State)
     bfa:	80 91 cd 01 	lds	r24, 0x01CD	; 0x8001cd <Oven_Display_State>
     bfe:	82 30       	cpi	r24, 0x02	; 2
     c00:	e9 f0       	breq	.+58     	; 0xc3c <UpdateDisplayLeds+0x42>
     c02:	28 f4       	brcc	.+10     	; 0xc0e <UpdateDisplayLeds+0x14>
     c04:	88 23       	and	r24, r24
     c06:	41 f0       	breq	.+16     	; 0xc18 <UpdateDisplayLeds+0x1e>
     c08:	81 30       	cpi	r24, 0x01	; 1
     c0a:	79 f0       	breq	.+30     	; 0xc2a <UpdateDisplayLeds+0x30>
     c0c:	08 95       	ret
     c0e:	83 30       	cpi	r24, 0x03	; 3
     c10:	f1 f0       	breq	.+60     	; 0xc4e <UpdateDisplayLeds+0x54>
     c12:	84 30       	cpi	r24, 0x04	; 4
     c14:	29 f1       	breq	.+74     	; 0xc60 <UpdateDisplayLeds+0x66>
     c16:	08 95       	ret
	{
		case STOPED:
			Hal__SetLed(LED_0, APAGA_LED);
     c18:	61 e0       	ldi	r22, 0x01	; 1
     c1a:	80 e0       	ldi	r24, 0x00	; 0
     c1c:	0e 94 13 04 	call	0x826	; 0x826 <Hal__SetLed>
			Hal__SetLed(LED_1, APAGA_LED);
     c20:	61 e0       	ldi	r22, 0x01	; 1
     c22:	81 e0       	ldi	r24, 0x01	; 1
     c24:	0e 94 13 04 	call	0x826	; 0x826 <Hal__SetLed>
	    break;
     c28:	08 95       	ret
		
		case MOTOR_UP:
			Hal__SetLed(LED_0, ACENDE_LED);
     c2a:	60 e0       	ldi	r22, 0x00	; 0
     c2c:	80 e0       	ldi	r24, 0x00	; 0
     c2e:	0e 94 13 04 	call	0x826	; 0x826 <Hal__SetLed>
			Hal__SetLed(LED_1, APAGA_LED);
     c32:	61 e0       	ldi	r22, 0x01	; 1
     c34:	81 e0       	ldi	r24, 0x01	; 1
     c36:	0e 94 13 04 	call	0x826	; 0x826 <Hal__SetLed>
	    break;
     c3a:	08 95       	ret
		
		case MOTOR_DOWN:
			Hal__SetLed(LED_0, APAGA_LED);
     c3c:	61 e0       	ldi	r22, 0x01	; 1
     c3e:	80 e0       	ldi	r24, 0x00	; 0
     c40:	0e 94 13 04 	call	0x826	; 0x826 <Hal__SetLed>
			Hal__SetLed(LED_1, ACENDE_LED);
     c44:	60 e0       	ldi	r22, 0x00	; 0
     c46:	81 e0       	ldi	r24, 0x01	; 1
     c48:	0e 94 13 04 	call	0x826	; 0x826 <Hal__SetLed>
		break;
     c4c:	08 95       	ret
		
		case DOOR_OPEN:
			Hal__SetLed(LED_0, APAGA_LED);
     c4e:	61 e0       	ldi	r22, 0x01	; 1
     c50:	80 e0       	ldi	r24, 0x00	; 0
     c52:	0e 94 13 04 	call	0x826	; 0x826 <Hal__SetLed>
			Hal__SetLed(LED_1, APAGA_LED);
     c56:	61 e0       	ldi	r22, 0x01	; 1
     c58:	81 e0       	ldi	r24, 0x01	; 1
     c5a:	0e 94 13 04 	call	0x826	; 0x826 <Hal__SetLed>
		break;
     c5e:	08 95       	ret
		case DOOR_CLOSE:
			Hal__SetLed(LED_0, APAGA_LED);
     c60:	61 e0       	ldi	r22, 0x01	; 1
     c62:	80 e0       	ldi	r24, 0x00	; 0
     c64:	0e 94 13 04 	call	0x826	; 0x826 <Hal__SetLed>
			Hal__SetLed(LED_1, APAGA_LED);
     c68:	61 e0       	ldi	r22, 0x01	; 1
     c6a:	81 e0       	ldi	r24, 0x01	; 1
     c6c:	0e 94 13 04 	call	0x826	; 0x826 <Hal__SetLed>
     c70:	08 95       	ret

00000c72 <ReadDisplayKeys>:
 */
void ReadDisplayKeys(void)
{
        unsigned char leitura;
		
		Display_Keys_Map = KEY_NONE;
     c72:	8a ea       	ldi	r24, 0xAA	; 170
     c74:	80 93 cc 01 	sts	0x01CC, r24	; 0x8001cc <Display_Keys_Map>
       		   	
		leitura = Hal__ReadKey(KEY_0);
     c78:	80 e0       	ldi	r24, 0x00	; 0
     c7a:	0e 94 7c 04 	call	0x8f8	; 0x8f8 <Hal__ReadKey>
		if(leitura  == TRUE)
     c7e:	81 30       	cpi	r24, 0x01	; 1
     c80:	11 f4       	brne	.+4      	; 0xc86 <ReadDisplayKeys+0x14>
		{
			Display_Keys_Map = KEY_GROUND_FLOOR;
     c82:	10 92 cc 01 	sts	0x01CC, r1	; 0x8001cc <Display_Keys_Map>
		}
		leitura = Hal__ReadKey(KEY_1);
     c86:	81 e0       	ldi	r24, 0x01	; 1
     c88:	0e 94 7c 04 	call	0x8f8	; 0x8f8 <Hal__ReadKey>
		if(leitura == TRUE)
     c8c:	81 30       	cpi	r24, 0x01	; 1
     c8e:	11 f4       	brne	.+4      	; 0xc94 <ReadDisplayKeys+0x22>
		{
			Display_Keys_Map = KEY_FIRST_FLOOR;
     c90:	80 93 cc 01 	sts	0x01CC, r24	; 0x8001cc <Display_Keys_Map>
		}
		leitura = Hal__ReadKey(KEY_2);
     c94:	82 e0       	ldi	r24, 0x02	; 2
     c96:	0e 94 7c 04 	call	0x8f8	; 0x8f8 <Hal__ReadKey>
		if(leitura == TRUE)
     c9a:	81 30       	cpi	r24, 0x01	; 1
     c9c:	19 f4       	brne	.+6      	; 0xca4 <ReadDisplayKeys+0x32>
		{
			Display_Keys_Map =  KEY_NEXT_FLOOR;
     c9e:	82 e0       	ldi	r24, 0x02	; 2
     ca0:	80 93 cc 01 	sts	0x01CC, r24	; 0x8001cc <Display_Keys_Map>
     ca4:	08 95       	ret

00000ca6 <Display__GetEvent>:
}

KEY_SOLICITATION_TYPE Display__GetEvent(void)
{
	KEY_SOLICITATION_TYPE event;
	ReadDisplayKeys();    // Lê as chaves e coloca valor na variável global Display_Keys_Map
     ca6:	0e 94 39 06 	call	0xc72	; 0xc72 <ReadDisplayKeys>
	event = Display_Keys_Map;
	return (event);
	
}
     caa:	80 91 cc 01 	lds	r24, 0x01CC	; 0x8001cc <Display_Keys_Map>
     cae:	08 95       	ret

00000cb0 <UpdateDisplaySevenSeg>:
{
	char i;
	char *p_digito;
	unsigned short int current_floor;
	
	current_floor = PositionSensor__GetMeters(POSITION_SENSOR_1);
     cb0:	80 e0       	ldi	r24, 0x00	; 0
     cb2:	0e 94 bb 06 	call	0xd76	; 0xd76 <PositionSensor__GetMeters>
	if(POSITION_GROUND_MAX >= current_floor)
     cb6:	85 3f       	cpi	r24, 0xF5	; 245
     cb8:	91 40       	sbci	r25, 0x01	; 1
     cba:	b8 f4       	brcc	.+46     	; 0xcea <UpdateDisplaySevenSeg+0x3a>
	{
		Segment_Floor_State = GROUND_FLOOR;
     cbc:	10 92 cb 01 	sts	0x01CB, r1	; 0x8001cb <Segment_Floor_State>
	switch(Segment_Floor_State)
	{
	case GROUND_FLOOR:
		p_digito = &GROUD_DIGIT[0];
		for (i = 0; i< NUM_OF_SEG; i++, p_digito++)
		Hal__WriteValtoSegment(i, p_digito);
     cc0:	6a e1       	ldi	r22, 0x1A	; 26
     cc2:	71 e0       	ldi	r23, 0x01	; 1
     cc4:	80 e0       	ldi	r24, 0x00	; 0
     cc6:	0e 94 8f 04 	call	0x91e	; 0x91e <Hal__WriteValtoSegment>
     cca:	6b e1       	ldi	r22, 0x1B	; 27
     ccc:	71 e0       	ldi	r23, 0x01	; 1
     cce:	81 e0       	ldi	r24, 0x01	; 1
     cd0:	0e 94 8f 04 	call	0x91e	; 0x91e <Hal__WriteValtoSegment>
     cd4:	6c e1       	ldi	r22, 0x1C	; 28
     cd6:	71 e0       	ldi	r23, 0x01	; 1
     cd8:	82 e0       	ldi	r24, 0x02	; 2
     cda:	0e 94 8f 04 	call	0x91e	; 0x91e <Hal__WriteValtoSegment>
     cde:	6d e1       	ldi	r22, 0x1D	; 29
     ce0:	71 e0       	ldi	r23, 0x01	; 1
     ce2:	83 e0       	ldi	r24, 0x03	; 3
     ce4:	0e 94 8f 04 	call	0x91e	; 0x91e <Hal__WriteValtoSegment>
     ce8:	08 95       	ret
	{
		Segment_Floor_State = GROUND_FLOOR;
	}
	else
	{
		Segment_Floor_State = FIRST_FLOOR;
     cea:	81 e0       	ldi	r24, 0x01	; 1
     cec:	80 93 cb 01 	sts	0x01CB, r24	; 0x8001cb <Segment_Floor_State>
		Hal__WriteValtoSegment(i, p_digito);
	break;
	case FIRST_FLOOR:
		p_digito = &FIRST_DIGIT[0];
		for (i = 0; i< NUM_OF_SEG; i++, p_digito++)
		Hal__WriteValtoSegment(i, p_digito);
     cf0:	66 e1       	ldi	r22, 0x16	; 22
     cf2:	71 e0       	ldi	r23, 0x01	; 1
     cf4:	80 e0       	ldi	r24, 0x00	; 0
     cf6:	0e 94 8f 04 	call	0x91e	; 0x91e <Hal__WriteValtoSegment>
     cfa:	67 e1       	ldi	r22, 0x17	; 23
     cfc:	71 e0       	ldi	r23, 0x01	; 1
     cfe:	81 e0       	ldi	r24, 0x01	; 1
     d00:	0e 94 8f 04 	call	0x91e	; 0x91e <Hal__WriteValtoSegment>
     d04:	68 e1       	ldi	r22, 0x18	; 24
     d06:	71 e0       	ldi	r23, 0x01	; 1
     d08:	82 e0       	ldi	r24, 0x02	; 2
     d0a:	0e 94 8f 04 	call	0x91e	; 0x91e <Hal__WriteValtoSegment>
     d0e:	69 e1       	ldi	r22, 0x19	; 25
     d10:	71 e0       	ldi	r23, 0x01	; 1
     d12:	83 e0       	ldi	r24, 0x03	; 3
     d14:	0e 94 8f 04 	call	0x91e	; 0x91e <Hal__WriteValtoSegment>
     d18:	08 95       	ret

00000d1a <ReadSensor>:
	}
}

SENSOR_STATUS ReadSensor(void)
{
	Sensor_status = Hal__ReadKey(KEY_3); 
     d1a:	83 e0       	ldi	r24, 0x03	; 3
     d1c:	0e 94 7c 04 	call	0x8f8	; 0x8f8 <Hal__ReadKey>
     d20:	80 93 d0 01 	sts	0x01D0, r24	; 0x8001d0 <Sensor_status>
	return(Sensor_status);
}
     d24:	08 95       	ret

00000d26 <PortSensor__Movie>:
	Port_status = PORT_CLOSED;
}

void PortSensor__Movie(PORT_MOVIE action)
{
	Port_movie = action; 
     d26:	80 93 cf 01 	sts	0x01CF, r24	; 0x8001cf <Port_movie>
	if (Port_movie == OPEN)
     d2a:	81 11       	cpse	r24, r1
     d2c:	07 c0       	rjmp	.+14     	; 0xd3c <PortSensor__Movie+0x16>
	{
		Hal__SetLed(LED_2,ACENDE_LED);
     d2e:	60 e0       	ldi	r22, 0x00	; 0
     d30:	82 e0       	ldi	r24, 0x02	; 2
     d32:	0e 94 13 04 	call	0x826	; 0x826 <Hal__SetLed>
		Port_status = PORT_OPEN;
     d36:	10 92 d1 01 	sts	0x01D1, r1	; 0x8001d1 <Port_status>
     d3a:	08 95       	ret
	}
	else
	{
		People = ReadSensor();
     d3c:	0e 94 8d 06 	call	0xd1a	; 0xd1a <ReadSensor>
     d40:	80 93 ce 01 	sts	0x01CE, r24	; 0x8001ce <People>
		if (People==NO_PEOPLE)
     d44:	81 11       	cpse	r24, r1
     d46:	07 c0       	rjmp	.+14     	; 0xd56 <PortSensor__Movie+0x30>
		{
			Hal__SetLed(LED_2,APAGA_LED);
     d48:	61 e0       	ldi	r22, 0x01	; 1
     d4a:	82 e0       	ldi	r24, 0x02	; 2
     d4c:	0e 94 13 04 	call	0x826	; 0x826 <Hal__SetLed>
			Port_status = PORT_CLOSED;
     d50:	81 e0       	ldi	r24, 0x01	; 1
     d52:	80 93 d1 01 	sts	0x01D1, r24	; 0x8001d1 <Port_status>
     d56:	08 95       	ret

00000d58 <PositionSensor__Initialize>:
{
	POSITION_SENSOR_TYPE sensor_id;

	for (sensor_id = 0; sensor_id < NUM_OF_POSITION_SENSOR; sensor_id++)
	{
		Position[sensor_id] = 0;
     d58:	e2 ed       	ldi	r30, 0xD2	; 210
     d5a:	f1 e0       	ldi	r31, 0x01	; 1
     d5c:	11 82       	std	Z+1, r1	; 0x01
     d5e:	10 82       	st	Z, r1
     d60:	13 82       	std	Z+3, r1	; 0x03
     d62:	12 82       	std	Z+2, r1	; 0x02
     d64:	08 95       	ret

00000d66 <PositionSensor__ConversionHandler>:
	
	for (sensor_id = 0; sensor_id < NUM_OF_POSITION_SENSOR; sensor_id++)
	{
		if(PositionSensor_Enable_Table[sensor_id] == ENABLED)
		{
			ad_value = Hal__GetAnalogInput(PositionSensorTable[sensor_id]); //ad_value em valor digital
     d66:	80 e0       	ldi	r24, 0x00	; 0
     d68:	0e 94 92 04 	call	0x924	; 0x924 <Hal__GetAnalogInput>
			Position[sensor_id] = ad_value;
     d6c:	90 93 d3 01 	sts	0x01D3, r25	; 0x8001d3 <Position+0x1>
     d70:	80 93 d2 01 	sts	0x01D2, r24	; 0x8001d2 <Position>
     d74:	08 95       	ret

00000d76 <PositionSensor__GetMeters>:
}

//---------------------------------------------------------------------------------------------------------------------
unsigned short int PositionSensor__GetMeters(POSITION_SENSOR_TYPE sensor_id)
{
	if (sensor_id < NUM_OF_POSITION_SENSOR)
     d76:	82 30       	cpi	r24, 0x02	; 2
     d78:	48 f4       	brcc	.+18     	; 0xd8c <PositionSensor__GetMeters+0x16>
	{
		return Position[sensor_id];
     d7a:	e8 2f       	mov	r30, r24
     d7c:	f0 e0       	ldi	r31, 0x00	; 0
     d7e:	ee 0f       	add	r30, r30
     d80:	ff 1f       	adc	r31, r31
     d82:	ee 52       	subi	r30, 0x2E	; 46
     d84:	fe 4f       	sbci	r31, 0xFE	; 254
     d86:	80 81       	ld	r24, Z
     d88:	91 81       	ldd	r25, Z+1	; 0x01
     d8a:	08 95       	ret
	}
	else
	{
		return 0;
     d8c:	80 e0       	ldi	r24, 0x00	; 0
     d8e:	90 e0       	ldi	r25, 0x00	; 0
	}
	
     d90:	08 95       	ret

00000d92 <Sounds__Initialize>:
//
//*********************************************************
 SOUNDS_TYPE Sounds__GetSounds( void)
{
	return (PlaySound);
}
     d92:	83 e0       	ldi	r24, 0x03	; 3
     d94:	80 93 d6 01 	sts	0x01D6, r24	; 0x8001d6 <PlaySound>
     d98:	10 92 d8 01 	sts	0x01D8, r1	; 0x8001d8 <PowerON_Sound_Step>
     d9c:	10 92 d9 01 	sts	0x01D9, r1	; 0x8001d9 <Key_Press_Sound_Step>
     da0:	81 e0       	ldi	r24, 0x01	; 1
     da2:	80 93 d7 01 	sts	0x01D7, r24	; 0x8001d7 <End_Cycle_Sound_Step>
     da6:	08 95       	ret

00000da8 <Sounds__PlaySounds>:
     da8:	84 30       	cpi	r24, 0x04	; 4
     daa:	20 f0       	brcs	.+8      	; 0xdb4 <Sounds__PlaySounds+0xc>
     dac:	83 e0       	ldi	r24, 0x03	; 3
     dae:	80 93 d6 01 	sts	0x01D6, r24	; 0x8001d6 <PlaySound>
     db2:	08 95       	ret
     db4:	80 93 d6 01 	sts	0x01D6, r24	; 0x8001d6 <PlaySound>
     db8:	08 95       	ret

00000dba <PowerOnSoundHandler>:

SOUND_STATUS PowerOnSoundHandler(void)
{
SOUND_STATUS status;
status = SOUND_PLAYING;
Hal__SetBuzzerFreq(5000);
     dba:	88 e8       	ldi	r24, 0x88	; 136
     dbc:	93 e1       	ldi	r25, 0x13	; 19
     dbe:	0e 94 aa 04 	call	0x954	; 0x954 <Hal__SetBuzzerFreq>

switch (PowerON_Sound_Step)
     dc2:	80 91 d8 01 	lds	r24, 0x01D8	; 0x8001d8 <PowerON_Sound_Step>
     dc6:	82 30       	cpi	r24, 0x02	; 2
     dc8:	71 f1       	breq	.+92     	; 0xe26 <PowerOnSoundHandler+0x6c>
     dca:	28 f4       	brcc	.+10     	; 0xdd6 <PowerOnSoundHandler+0x1c>
     dcc:	88 23       	and	r24, r24
     dce:	59 f0       	breq	.+22     	; 0xde6 <PowerOnSoundHandler+0x2c>
     dd0:	81 30       	cpi	r24, 0x01	; 1
     dd2:	b1 f0       	breq	.+44     	; 0xe00 <PowerOnSoundHandler+0x46>
     dd4:	6c c0       	rjmp	.+216    	; 0xeae <PowerOnSoundHandler+0xf4>
     dd6:	84 30       	cpi	r24, 0x04	; 4
     dd8:	09 f4       	brne	.+2      	; 0xddc <PowerOnSoundHandler+0x22>
     dda:	4b c0       	rjmp	.+150    	; 0xe72 <PowerOnSoundHandler+0xb8>
     ddc:	b8 f1       	brcs	.+110    	; 0xe4c <PowerOnSoundHandler+0x92>
     dde:	85 30       	cpi	r24, 0x05	; 5
     de0:	09 f4       	brne	.+2      	; 0xde4 <PowerOnSoundHandler+0x2a>
     de2:	5a c0       	rjmp	.+180    	; 0xe98 <PowerOnSoundHandler+0xde>
     de4:	64 c0       	rjmp	.+200    	; 0xeae <PowerOnSoundHandler+0xf4>
{
case POWER_ON_SOUND_STEP1:
	Hal__SetBuzzer(ON);  // aqui entra
     de6:	81 e0       	ldi	r24, 0x01	; 1
     de8:	0e 94 9e 04 	call	0x93c	; 0x93c <Hal__SetBuzzer>
	//_delay_ms(2000);
    Timer__HMSSet(TIMER_HMS_POWER_ON_SOUND, 0,0,1);
     dec:	21 e0       	ldi	r18, 0x01	; 1
     dee:	40 e0       	ldi	r20, 0x00	; 0
     df0:	60 e0       	ldi	r22, 0x00	; 0
     df2:	82 e0       	ldi	r24, 0x02	; 2
     df4:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <Timer__HMSSet>
	PowerON_Sound_Step = POWER_ON_SOUND_STEP2;
     df8:	81 e0       	ldi	r24, 0x01	; 1
     dfa:	80 93 d8 01 	sts	0x01D8, r24	; 0x8001d8 <PowerON_Sound_Step>
	break;
     dfe:	08 95       	ret

case POWER_ON_SOUND_STEP2:
	if(Timer__HMSGetStatus(TIMER_HMS_POWER_ON_SOUND) == TIMER_EXPIRED)
     e00:	82 e0       	ldi	r24, 0x02	; 2
     e02:	0e 94 ef 03 	call	0x7de	; 0x7de <Timer__HMSGetStatus>
     e06:	81 11       	cpse	r24, r1
     e08:	56 c0       	rjmp	.+172    	; 0xeb6 <PowerOnSoundHandler+0xfc>
		{
		Timer__HMSSet(TIMER_HMS_POWER_ON_SOUND, 0,0,1);	
     e0a:	21 e0       	ldi	r18, 0x01	; 1
     e0c:	40 e0       	ldi	r20, 0x00	; 0
     e0e:	60 e0       	ldi	r22, 0x00	; 0
     e10:	82 e0       	ldi	r24, 0x02	; 2
     e12:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <Timer__HMSSet>
		//	Hal__SetBuzzer(ON);    // não entra aqui  !!!
		//_delay_ms(2000);
		PowerON_Sound_Step = POWER_ON_SOUND_STEP3;
     e16:	82 e0       	ldi	r24, 0x02	; 2
     e18:	80 93 d8 01 	sts	0x01D8, r24	; 0x8001d8 <PowerON_Sound_Step>
		Hal__SetBuzzer(OFF);
     e1c:	80 e0       	ldi	r24, 0x00	; 0
     e1e:	0e 94 9e 04 	call	0x93c	; 0x93c <Hal__SetBuzzer>


SOUND_STATUS PowerOnSoundHandler(void)
{
SOUND_STATUS status;
status = SOUND_PLAYING;
     e22:	81 e0       	ldi	r24, 0x01	; 1
     e24:	08 95       	ret
		Hal__SetBuzzer(OFF);
		}
	break;  

case POWER_ON_SOUND_STEP3:
	if(Timer__HMSGetStatus(TIMER_HMS_POWER_ON_SOUND) == TIMER_EXPIRED)
     e26:	82 e0       	ldi	r24, 0x02	; 2
     e28:	0e 94 ef 03 	call	0x7de	; 0x7de <Timer__HMSGetStatus>
     e2c:	81 11       	cpse	r24, r1
     e2e:	45 c0       	rjmp	.+138    	; 0xeba <PowerOnSoundHandler+0x100>
		{
	    Timer__HMSSet(TIMER_HMS_POWER_ON_SOUND, 0,0,1);
     e30:	21 e0       	ldi	r18, 0x01	; 1
     e32:	40 e0       	ldi	r20, 0x00	; 0
     e34:	60 e0       	ldi	r22, 0x00	; 0
     e36:	82 e0       	ldi	r24, 0x02	; 2
     e38:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <Timer__HMSSet>
		PowerON_Sound_Step = POWER_ON_SOUND_STEP4;
     e3c:	83 e0       	ldi	r24, 0x03	; 3
     e3e:	80 93 d8 01 	sts	0x01D8, r24	; 0x8001d8 <PowerON_Sound_Step>
		//Hal__SetBuzzerFreq(4000);   //mudar frequencia do PWM
		Hal__SetBuzzer(ON);
     e42:	81 e0       	ldi	r24, 0x01	; 1
     e44:	0e 94 9e 04 	call	0x93c	; 0x93c <Hal__SetBuzzer>


SOUND_STATUS PowerOnSoundHandler(void)
{
SOUND_STATUS status;
status = SOUND_PLAYING;
     e48:	81 e0       	ldi	r24, 0x01	; 1
     e4a:	08 95       	ret
		//_delay_ms(2000);
	    }
	break;
	
case POWER_ON_SOUND_STEP4:
	if(Timer__HMSGetStatus(TIMER_HMS_POWER_ON_SOUND) == TIMER_EXPIRED)
     e4c:	82 e0       	ldi	r24, 0x02	; 2
     e4e:	0e 94 ef 03 	call	0x7de	; 0x7de <Timer__HMSGetStatus>
     e52:	81 11       	cpse	r24, r1
     e54:	34 c0       	rjmp	.+104    	; 0xebe <PowerOnSoundHandler+0x104>
		{
	    Timer__HMSSet(TIMER_HMS_POWER_ON_SOUND, 0,0,1);
     e56:	21 e0       	ldi	r18, 0x01	; 1
     e58:	40 e0       	ldi	r20, 0x00	; 0
     e5a:	60 e0       	ldi	r22, 0x00	; 0
     e5c:	82 e0       	ldi	r24, 0x02	; 2
     e5e:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <Timer__HMSSet>
		PowerON_Sound_Step = POWER_ON_SOUND_STEP5;
     e62:	84 e0       	ldi	r24, 0x04	; 4
     e64:	80 93 d8 01 	sts	0x01D8, r24	; 0x8001d8 <PowerON_Sound_Step>
		Hal__SetBuzzer(OFF);
     e68:	80 e0       	ldi	r24, 0x00	; 0
     e6a:	0e 94 9e 04 	call	0x93c	; 0x93c <Hal__SetBuzzer>


SOUND_STATUS PowerOnSoundHandler(void)
{
SOUND_STATUS status;
status = SOUND_PLAYING;
     e6e:	81 e0       	ldi	r24, 0x01	; 1
     e70:	08 95       	ret
		//_delay_ms(2000);
		}
	break;
	
case POWER_ON_SOUND_STEP5:
	if(Timer__HMSGetStatus(TIMER_HMS_POWER_ON_SOUND) == TIMER_EXPIRED)
     e72:	82 e0       	ldi	r24, 0x02	; 2
     e74:	0e 94 ef 03 	call	0x7de	; 0x7de <Timer__HMSGetStatus>
     e78:	81 11       	cpse	r24, r1
     e7a:	23 c0       	rjmp	.+70     	; 0xec2 <PowerOnSoundHandler+0x108>
		{
	    Timer__HMSSet(TIMER_HMS_POWER_ON_SOUND, 0,0,1);
     e7c:	21 e0       	ldi	r18, 0x01	; 1
     e7e:	40 e0       	ldi	r20, 0x00	; 0
     e80:	60 e0       	ldi	r22, 0x00	; 0
     e82:	82 e0       	ldi	r24, 0x02	; 2
     e84:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <Timer__HMSSet>
		PowerON_Sound_Step = POWER_ON_SOUND_STEP6;
     e88:	85 e0       	ldi	r24, 0x05	; 5
     e8a:	80 93 d8 01 	sts	0x01D8, r24	; 0x8001d8 <PowerON_Sound_Step>
		//Hal__SetBuzzerFreq(4000);
		Hal__SetBuzzer(ON);
     e8e:	81 e0       	ldi	r24, 0x01	; 1
     e90:	0e 94 9e 04 	call	0x93c	; 0x93c <Hal__SetBuzzer>


SOUND_STATUS PowerOnSoundHandler(void)
{
SOUND_STATUS status;
status = SOUND_PLAYING;
     e94:	81 e0       	ldi	r24, 0x01	; 1
     e96:	08 95       	ret
		//_delay_ms(2000);
		}
	break;
	
case POWER_ON_SOUND_STEP6:
	if(Timer__HMSGetStatus(TIMER_HMS_POWER_ON_SOUND) == TIMER_EXPIRED)
     e98:	82 e0       	ldi	r24, 0x02	; 2
     e9a:	0e 94 ef 03 	call	0x7de	; 0x7de <Timer__HMSGetStatus>
     e9e:	81 11       	cpse	r24, r1
     ea0:	12 c0       	rjmp	.+36     	; 0xec6 <PowerOnSoundHandler+0x10c>
		{
		PowerON_Sound_Step = POWER_ON_SOUND_STEP1;
     ea2:	10 92 d8 01 	sts	0x01D8, r1	; 0x8001d8 <PowerON_Sound_Step>
		Hal__SetBuzzer(OFF);
     ea6:	0e 94 9e 04 	call	0x93c	; 0x93c <Hal__SetBuzzer>
		//Hal__SetLed(LED_1, LED_OFF);
		status = SOUND_DONE;
     eaa:	80 e0       	ldi	r24, 0x00	; 0
     eac:	08 95       	ret
		}
	break;

default:
	PowerON_Sound_Step = POWER_ON_SOUND_STEP1;
     eae:	10 92 d8 01 	sts	0x01D8, r1	; 0x8001d8 <PowerON_Sound_Step>
	status = SOUND_DONE;
     eb2:	80 e0       	ldi	r24, 0x00	; 0
	break;
     eb4:	08 95       	ret


SOUND_STATUS PowerOnSoundHandler(void)
{
SOUND_STATUS status;
status = SOUND_PLAYING;
     eb6:	81 e0       	ldi	r24, 0x01	; 1
     eb8:	08 95       	ret
     eba:	81 e0       	ldi	r24, 0x01	; 1
     ebc:	08 95       	ret
     ebe:	81 e0       	ldi	r24, 0x01	; 1
     ec0:	08 95       	ret
     ec2:	81 e0       	ldi	r24, 0x01	; 1
     ec4:	08 95       	ret
     ec6:	81 e0       	ldi	r24, 0x01	; 1
	PowerON_Sound_Step = POWER_ON_SOUND_STEP1;
	status = SOUND_DONE;
	break;
}
return status;
}
     ec8:	08 95       	ret

00000eca <KeyPressSoundHandler>:
{
SOUND_STATUS status;
status = SOUND_PLAYING;
//Hal__SetBuzzerFreq(4000);
	
switch(Key_Press_Sound_Step)
     eca:	80 91 d9 01 	lds	r24, 0x01D9	; 0x8001d9 <Key_Press_Sound_Step>
     ece:	88 23       	and	r24, r24
     ed0:	19 f0       	breq	.+6      	; 0xed8 <KeyPressSoundHandler+0xe>
     ed2:	81 30       	cpi	r24, 0x01	; 1
     ed4:	71 f0       	breq	.+28     	; 0xef2 <KeyPressSoundHandler+0x28>
     ed6:	18 c0       	rjmp	.+48     	; 0xf08 <KeyPressSoundHandler+0x3e>
	{
	case KEY_PRESS_SOUND_STEP1:
		Timer__HMSSet(TIMER_HMS_KEY_PRESS_SOUND, 0,0,1);
     ed8:	21 e0       	ldi	r18, 0x01	; 1
     eda:	40 e0       	ldi	r20, 0x00	; 0
     edc:	60 e0       	ldi	r22, 0x00	; 0
     ede:	83 e0       	ldi	r24, 0x03	; 3
     ee0:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <Timer__HMSSet>
		Hal__SetBuzzer(ON);
     ee4:	81 e0       	ldi	r24, 0x01	; 1
     ee6:	0e 94 9e 04 	call	0x93c	; 0x93c <Hal__SetBuzzer>
		Key_Press_Sound_Step = KEY_PRESS_SOUND_STEP2;
     eea:	81 e0       	ldi	r24, 0x01	; 1
     eec:	80 93 d9 01 	sts	0x01D9, r24	; 0x8001d9 <Key_Press_Sound_Step>
		break;
     ef0:	08 95       	ret

	case KEY_PRESS_SOUND_STEP2:
		if(Timer__HMSGetStatus(TIMER_HMS_KEY_PRESS_SOUND) == TIMER_EXPIRED)
     ef2:	83 e0       	ldi	r24, 0x03	; 3
     ef4:	0e 94 ef 03 	call	0x7de	; 0x7de <Timer__HMSGetStatus>
     ef8:	81 11       	cpse	r24, r1
     efa:	0a c0       	rjmp	.+20     	; 0xf10 <KeyPressSoundHandler+0x46>
		{
			Hal__SetBuzzer(OFF);
     efc:	0e 94 9e 04 	call	0x93c	; 0x93c <Hal__SetBuzzer>
			Key_Press_Sound_Step = KEY_PRESS_SOUND_STEP1;
     f00:	10 92 d9 01 	sts	0x01D9, r1	; 0x8001d9 <Key_Press_Sound_Step>
			status = SOUND_DONE;
     f04:	80 e0       	ldi	r24, 0x00	; 0
     f06:	08 95       	ret
		}
		break;
	default:
		Key_Press_Sound_Step = KEY_PRESS_SOUND_STEP1;
     f08:	10 92 d9 01 	sts	0x01D9, r1	; 0x8001d9 <Key_Press_Sound_Step>
		status = SOUND_DONE;
     f0c:	80 e0       	ldi	r24, 0x00	; 0
		break;
     f0e:	08 95       	ret

//---------------------------------------------------------------------------------------------------------------------
SOUND_STATUS KeyPressSoundHandler(void)
{
SOUND_STATUS status;
status = SOUND_PLAYING;
     f10:	81 e0       	ldi	r24, 0x01	; 1
		status = SOUND_DONE;
		break;
	}
	
return status;
}
     f12:	08 95       	ret

00000f14 <EndCycleSoundHandler>:
{
SOUND_STATUS status;
status = SOUND_PLAYING;
//Hal__SetBuzzerFreq(4000);
	
switch(End_Cycle_Sound_Step)
     f14:	80 91 d7 01 	lds	r24, 0x01D7	; 0x8001d7 <End_Cycle_Sound_Step>
     f18:	88 23       	and	r24, r24
     f1a:	79 f0       	breq	.+30     	; 0xf3a <EndCycleSoundHandler+0x26>
     f1c:	81 30       	cpi	r24, 0x01	; 1
     f1e:	c9 f4       	brne	.+50     	; 0xf52 <EndCycleSoundHandler+0x3e>
	{
	case END_CYCLE_SOUND_STEP_ON:
		Timer__HMSSet(TIMER_HMS_END_CYCLE_SOUND, 0,0,3);
     f20:	23 e0       	ldi	r18, 0x03	; 3
     f22:	40 e0       	ldi	r20, 0x00	; 0
     f24:	60 e0       	ldi	r22, 0x00	; 0
     f26:	84 e0       	ldi	r24, 0x04	; 4
     f28:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <Timer__HMSSet>
		Hal__SetBuzzer(ON);
     f2c:	81 e0       	ldi	r24, 0x01	; 1
     f2e:	0e 94 9e 04 	call	0x93c	; 0x93c <Hal__SetBuzzer>
		//_delay_ms(2000);
		End_Cycle_Sound_Step = END_CYCLE_SOUND_STEP_OFF;
     f32:	10 92 d7 01 	sts	0x01D7, r1	; 0x8001d7 <End_Cycle_Sound_Step>
*/

SOUND_STATUS EndCycleSoundHandler(void)
{
SOUND_STATUS status;
status = SOUND_PLAYING;
     f36:	81 e0       	ldi	r24, 0x01	; 1
	case END_CYCLE_SOUND_STEP_ON:
		Timer__HMSSet(TIMER_HMS_END_CYCLE_SOUND, 0,0,3);
		Hal__SetBuzzer(ON);
		//_delay_ms(2000);
		End_Cycle_Sound_Step = END_CYCLE_SOUND_STEP_OFF;
		break;
     f38:	08 95       	ret

	case END_CYCLE_SOUND_STEP_OFF:
	//Hal__SetBuzzer(ON);
	//_delay_ms(2000);
		if(Timer__HMSGetStatus(TIMER_HMS_END_CYCLE_SOUND) == TIMER_EXPIRED)
     f3a:	84 e0       	ldi	r24, 0x04	; 4
     f3c:	0e 94 ef 03 	call	0x7de	; 0x7de <Timer__HMSGetStatus>
     f40:	81 11       	cpse	r24, r1
     f42:	0c c0       	rjmp	.+24     	; 0xf5c <EndCycleSoundHandler+0x48>
			{
			Hal__SetBuzzer(OFF);
     f44:	0e 94 9e 04 	call	0x93c	; 0x93c <Hal__SetBuzzer>
			End_Cycle_Sound_Step = END_CYCLE_SOUND_STEP_ON;
     f48:	81 e0       	ldi	r24, 0x01	; 1
     f4a:	80 93 d7 01 	sts	0x01D7, r24	; 0x8001d7 <End_Cycle_Sound_Step>
			status = SOUND_DONE;
     f4e:	80 e0       	ldi	r24, 0x00	; 0
     f50:	08 95       	ret
			}
		break;
	default:
		End_Cycle_Sound_Step = END_CYCLE_SOUND_STEP_ON;
     f52:	81 e0       	ldi	r24, 0x01	; 1
     f54:	80 93 d7 01 	sts	0x01D7, r24	; 0x8001d7 <End_Cycle_Sound_Step>
		status = SOUND_DONE;
     f58:	80 e0       	ldi	r24, 0x00	; 0
		break;
     f5a:	08 95       	ret
*/

SOUND_STATUS EndCycleSoundHandler(void)
{
SOUND_STATUS status;
status = SOUND_PLAYING;
     f5c:	81 e0       	ldi	r24, 0x01	; 1
		status = SOUND_DONE;
		break;
	}
	
return status;
     f5e:	08 95       	ret

00000f60 <Sounds__Background>:
//
//*********************************************************
 
void Sounds__Background(void)
{
switch (PlaySound)
     f60:	80 91 d6 01 	lds	r24, 0x01D6	; 0x8001d6 <PlaySound>
     f64:	81 30       	cpi	r24, 0x01	; 1
     f66:	71 f0       	breq	.+28     	; 0xf84 <Sounds__Background+0x24>
     f68:	28 f0       	brcs	.+10     	; 0xf74 <Sounds__Background+0x14>
     f6a:	82 30       	cpi	r24, 0x02	; 2
     f6c:	99 f0       	breq	.+38     	; 0xf94 <Sounds__Background+0x34>
     f6e:	83 30       	cpi	r24, 0x03	; 3
     f70:	c9 f0       	breq	.+50     	; 0xfa4 <Sounds__Background+0x44>
     f72:	08 95       	ret
	{
	case SOUND_POWER_ON:
		if(PowerOnSoundHandler() == SOUND_DONE)
     f74:	0e 94 dd 06 	call	0xdba	; 0xdba <PowerOnSoundHandler>
     f78:	81 11       	cpse	r24, r1
     f7a:	17 c0       	rjmp	.+46     	; 0xfaa <Sounds__Background+0x4a>
			{
			PlaySound = PLAY_NO_SOUND;
     f7c:	83 e0       	ldi	r24, 0x03	; 3
     f7e:	80 93 d6 01 	sts	0x01D6, r24	; 0x8001d6 <PlaySound>
     f82:	08 95       	ret
			}
		break;

	case SOUND_KEY_PRESS:
		if(KeyPressSoundHandler() == SOUND_DONE)
     f84:	0e 94 65 07 	call	0xeca	; 0xeca <KeyPressSoundHandler>
     f88:	81 11       	cpse	r24, r1
     f8a:	0f c0       	rjmp	.+30     	; 0xfaa <Sounds__Background+0x4a>
			{
			//	Hal__SetAllLeds(LED_ON);  // depuração
			PlaySound = PLAY_NO_SOUND;    
     f8c:	83 e0       	ldi	r24, 0x03	; 3
     f8e:	80 93 d6 01 	sts	0x01D6, r24	; 0x8001d6 <PlaySound>
     f92:	08 95       	ret
			}
		break;

	case SOUND_END_CYCLE:
		if(EndCycleSoundHandler() == SOUND_DONE)
     f94:	0e 94 8a 07 	call	0xf14	; 0xf14 <EndCycleSoundHandler>
     f98:	81 11       	cpse	r24, r1
     f9a:	07 c0       	rjmp	.+14     	; 0xfaa <Sounds__Background+0x4a>
			{
			PlaySound = PLAY_NO_SOUND;  
     f9c:	83 e0       	ldi	r24, 0x03	; 3
     f9e:	80 93 d6 01 	sts	0x01D6, r24	; 0x8001d6 <PlaySound>
     fa2:	08 95       	ret
			}
		break;
	
	case PLAY_NO_SOUND:
		Hal__SetBuzzer(OFF);
     fa4:	80 e0       	ldi	r24, 0x00	; 0
     fa6:	0e 94 9e 04 	call	0x93c	; 0x93c <Hal__SetBuzzer>
     faa:	08 95       	ret

00000fac <__divmodhi4>:
     fac:	97 fb       	bst	r25, 7
     fae:	07 2e       	mov	r0, r23
     fb0:	16 f4       	brtc	.+4      	; 0xfb6 <__divmodhi4+0xa>
     fb2:	00 94       	com	r0
     fb4:	07 d0       	rcall	.+14     	; 0xfc4 <__divmodhi4_neg1>
     fb6:	77 fd       	sbrc	r23, 7
     fb8:	09 d0       	rcall	.+18     	; 0xfcc <__divmodhi4_neg2>
     fba:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <__udivmodhi4>
     fbe:	07 fc       	sbrc	r0, 7
     fc0:	05 d0       	rcall	.+10     	; 0xfcc <__divmodhi4_neg2>
     fc2:	3e f4       	brtc	.+14     	; 0xfd2 <__divmodhi4_exit>

00000fc4 <__divmodhi4_neg1>:
     fc4:	90 95       	com	r25
     fc6:	81 95       	neg	r24
     fc8:	9f 4f       	sbci	r25, 0xFF	; 255
     fca:	08 95       	ret

00000fcc <__divmodhi4_neg2>:
     fcc:	70 95       	com	r23
     fce:	61 95       	neg	r22
     fd0:	7f 4f       	sbci	r23, 0xFF	; 255

00000fd2 <__divmodhi4_exit>:
     fd2:	08 95       	ret

00000fd4 <__udivmodhi4>:
     fd4:	aa 1b       	sub	r26, r26
     fd6:	bb 1b       	sub	r27, r27
     fd8:	51 e1       	ldi	r21, 0x11	; 17
     fda:	07 c0       	rjmp	.+14     	; 0xfea <__udivmodhi4_ep>

00000fdc <__udivmodhi4_loop>:
     fdc:	aa 1f       	adc	r26, r26
     fde:	bb 1f       	adc	r27, r27
     fe0:	a6 17       	cp	r26, r22
     fe2:	b7 07       	cpc	r27, r23
     fe4:	10 f0       	brcs	.+4      	; 0xfea <__udivmodhi4_ep>
     fe6:	a6 1b       	sub	r26, r22
     fe8:	b7 0b       	sbc	r27, r23

00000fea <__udivmodhi4_ep>:
     fea:	88 1f       	adc	r24, r24
     fec:	99 1f       	adc	r25, r25
     fee:	5a 95       	dec	r21
     ff0:	a9 f7       	brne	.-22     	; 0xfdc <__udivmodhi4_loop>
     ff2:	80 95       	com	r24
     ff4:	90 95       	com	r25
     ff6:	bc 01       	movw	r22, r24
     ff8:	cd 01       	movw	r24, r26
     ffa:	08 95       	ret

00000ffc <_exit>:
     ffc:	f8 94       	cli

00000ffe <__stop_program>:
     ffe:	ff cf       	rjmp	.-2      	; 0xffe <__stop_program>
